2017-01-19 15:18:15,702 INFO  Loading Baseframework Plugin
2017-01-19 15:18:15,718 INFO  Initializing the platform to load the Menu - HandsOn
2017-01-19 15:18:16,405 INFO  Loading the Menu - HandsOn
2017-01-19 15:18:16,421 INFO  Successfully loaded the Menu - HandsOn
2017-01-19 15:31:48,309 INFO  Loading Programming Assignment Plugin
2017-01-19 15:31:48,316 INFO  Creating Layout for the perspective : 
2017-01-19 15:31:48,319 INFO  Creating Layout for the perspective : Programming Assignment V4.0
2017-01-19 15:31:48,324 INFO  Successfully created Layout for the perspective : Programming Assignment V4.0
2017-01-19 15:31:48,325 INFO  Successfully created Layout for the perspective : 
2017-01-19 15:34:02,912 INFO  Loading Baseframework Plugin
2017-01-19 15:34:02,990 INFO  Initializing the platform to load the Menu - HandsOn
2017-01-19 15:34:04,379 INFO  Loading the Menu - HandsOn
2017-01-19 15:34:04,897 INFO  Successfully loaded the Menu - HandsOn
2017-01-19 15:40:45,468 INFO  Loading Programming Assignment Plugin
2017-01-19 15:40:45,538 INFO  First line is not as expected!!!
2017-01-19 15:42:29,478 INFO  First line is not as expected!!!
2017-01-19 15:42:51,433 INFO  First line is not as expected!!!
2017-01-19 15:43:31,658 INFO  First line is not as expected!!!
2017-01-19 15:43:46,804 INFO  First line is not as expected!!!
2017-01-19 15:59:08,676 INFO  First line is not as expected!!!
2017-01-19 15:59:12,608 INFO  First line is not as expected!!!
2017-01-19 16:01:38,301 INFO  First line is not as expected!!!
2017-01-19 16:01:58,564 INFO  First line is not as expected!!!
2017-01-19 16:02:47,082 INFO  First line is not as expected!!!
2017-01-19 16:03:23,339 INFO  First line is not as expected!!!
2017-01-19 16:03:43,323 INFO  First line is not as expected!!!
2017-01-19 16:03:47,651 INFO  Initiating to process and prepare Input for the submit service
2017-01-19 16:03:47,658 INFO  Displaying user solution
2017-01-19 16:03:47,987 ERROR Exception occured while submitting the user solution
2017-01-19 16:04:07,362 INFO  First line is not as expected!!!
2017-01-19 16:04:10,480 INFO  First line is not as expected!!!
2017-01-19 16:04:41,489 INFO  First line is not as expected!!!
2017-01-19 16:04:53,957 INFO  First line is not as expected!!!
2017-01-19 16:05:05,180 INFO  First line is not as expected!!!
2017-01-19 16:05:07,178 INFO  Initiating to process and prepare Input for the submit service
2017-01-19 16:05:07,180 INFO  Displaying user solution
2017-01-19 16:05:07,181 ERROR Exception occured while submitting the user solution
2017-01-19 16:05:09,331 INFO  Initiating to process and prepare Input for the submit service
2017-01-19 16:05:09,333 INFO  Displaying user solution
2017-01-19 16:05:09,335 ERROR Exception occured while submitting the user solution
2017-01-19 16:06:17,305 INFO  First line is not as expected!!!
2017-01-19 16:09:05,936 INFO  First line is not as expected!!!
2017-01-19 16:09:08,040 INFO  Initiating to process and prepare Input for the submit service
2017-01-19 16:09:08,042 INFO  Displaying user solution
2017-01-19 16:09:08,043 ERROR Exception occured while submitting the user solution
2017-01-19 16:09:09,936 INFO  Initiating to process and prepare Input for the submit service
2017-01-19 16:09:09,937 INFO  Displaying user solution
2017-01-19 16:09:09,939 ERROR Exception occured while submitting the user solution
2017-01-19 16:09:12,191 INFO  Initiating to process and prepare Input for the submit service
2017-01-19 16:09:12,193 INFO  Displaying user solution
2017-01-19 16:09:12,195 ERROR Exception occured while submitting the user solution
2017-01-19 16:09:21,791 INFO  Setting request parameters for VerifySolution
2017-01-19 16:09:21,793 INFO  Initiating to process and prepare Input for the verify service
2017-01-19 16:09:21,796 INFO  Starting to parse the user solution
2017-01-19 16:09:21,798 INFO  Displaying user solution
2017-01-19 16:09:23,136 INFO  Successfully parsed the user solution{"CourseShortName":"PF","UserSolution":"#PF-Assgn-15\r\n\r\ndef find_product(num1,num2,num3):\r\n    product=0\r\n    #write your logic here\r\n    \r\n    if num1 != 7 and num2 !=7 and num3 !=7 :\r\n        \r\n        product = num1 * num2 * num3\r\n       \r\n    elif num1 == 7 and num2 != 7 and num3 != 7 :\r\n        product = num2 * num3 \r\n        \r\n    elif num1 != 7 and num2 == 7 and num3 != 7 :\r\n        product = num3 \r\n        \r\n    elif num1 != 7 and num2 != 7 and num3 == 7 :\r\n        product = -1 \r\n    \r\n    return product\r\n\r\n\r\n\r\n#Provide different values for num1, num2, num3 and test your program \r\nproduct=find_product(7,6,2)\r\nprint(product)\r\n\r\n\r\n\r\n","asgnmtId":"15","SolutionFileName":"Assignment1.py","AsgnmtTyp":"A","TestcaseFileName":""}
2017-01-19 16:09:23,137 INFO  Successfully processed and prepared the input for the verify service
2017-01-19 16:09:23,138 INFO  Successfully set the request parameters for VerifySolution
2017-01-19 16:09:23,139 INFO  Invoking the service to verify the user solution
2017-01-19 16:09:23,140 INFO  Time before invoking service:Thu Jan 19 16:09:23 IST 2017
2017-01-19 16:09:23,142 INFO  Initialising service address for VerifySolution
2017-01-19 16:09:23,144 INFO  Time before invoking service In SUPER:Thu Jan 19 16:09:23 IST 2017
2017-01-19 16:09:24,945 INFO  Time after invoking service In SUPER:Thu Jan 19 16:09:24 IST 2017
2017-01-19 16:09:24,946 INFO  Service responded successfully with required details
2017-01-19 16:09:24,948 INFO  Time after invoking service:Thu Jan 19 16:09:24 IST 2017
2017-01-19 16:09:24,949 INFO  User solution successfully verified
2017-01-19 16:09:24,950 INFO  Processing the response from verify service
2017-01-19 16:09:24,958 INFO  Starting to parse JSON response
2017-01-19 16:09:24,963 ERROR Keys used to parse test result JSON might be incorrect
2017-01-19 16:09:24,965 ERROR Keys used to parse test result JSON might be incorrect
2017-01-19 16:09:24,966 ERROR Keys used to parse test result JSON might be incorrect
2017-01-19 16:09:24,967 ERROR Keys used to parse test result JSON might be incorrect
2017-01-19 16:09:24,969 INFO  Successfully parsed JSON response
2017-01-19 16:09:24,971 INFO  In the process of generating verify response in HTML
2017-01-19 16:09:25,258 INFO  Successfully generated verify response in HTML
2017-01-19 16:09:25,260 INFO  Successfully processed the response from service
2017-01-19 16:09:41,893 INFO  Initiating to process and prepare Input for the submit service
2017-01-19 16:09:41,897 INFO  Displaying user solution
2017-01-19 16:09:41,913 INFO  Successfully processed and prepared the input for the submit service
2017-01-19 16:09:41,915 INFO  Invoking the service to submit the user solution
2017-01-19 16:09:41,917 INFO  Initialising service address for Submit
2017-01-19 16:09:41,918 INFO  Time before invoking service In SUPER:Thu Jan 19 16:09:41 IST 2017
2017-01-19 16:09:42,077 INFO  Time after invoking service In SUPER:Thu Jan 19 16:09:42 IST 2017
2017-01-19 16:09:42,079 INFO  Service responded successfully with required details
2017-01-19 16:09:42,079 INFO  User solution successfully submitted
2017-01-19 16:09:42,081 INFO  Displaying submission status
2017-01-19 16:09:42,082 INFO  Displayed submission status successfullySuccessfully Submitted!
2017-01-19 16:24:36,702 INFO  Setting request parameters for VerifySolution
2017-01-19 16:24:36,704 INFO  Initiating to process and prepare Input for the verify service
2017-01-19 16:24:36,705 INFO  Starting to parse the user solution
2017-01-19 16:24:36,706 INFO  Displaying user solution
2017-01-19 16:24:37,281 INFO  Successfully parsed the user solution{"CourseShortName":"PF","UserSolution":"#PF-Assgn-16\r\ndef make_amount(rupees_to_make,no_of_five,no_of_one):\r\n    five_needed=0\r\n    one_needed=0\r\n\r\n    #Start writing your code here\r\n    #Populate the variables: five_needed and one_needed\r\n    \r\n    five_needed = rupees_to_make // 5\r\n    one_needed = rupees_to_make % 5\r\n    \r\n    \r\n    if  no_of_five >= five_needed and no_of_one >= one_needed : \r\n        print(five_needed)\r\n        print(one_needed)\r\n    else :\r\n        print(-1)\r\n        \r\n    # Use the below given print statements to display the output \r\n    # Also, do not modify them for verification to work\r\n\r\n    #print(\"No. of Five needed :\", five_needed)\r\n    #print(\"No. of One needed  :\", one_needed)\r\n    #print(-1)\r\n    \r\n\r\n#Provide different values for rupees_to_make,no_of_five,no_of_one and test your program\r\nmake_amount(28,8,5)\r\n","asgnmtId":"16","SolutionFileName":"Assignment16.py","AsgnmtTyp":"A","TestcaseFileName":""}
2017-01-19 16:24:37,283 INFO  Successfully processed and prepared the input for the verify service
2017-01-19 16:24:37,284 INFO  Successfully set the request parameters for VerifySolution
2017-01-19 16:24:37,284 INFO  Invoking the service to verify the user solution
2017-01-19 16:24:37,285 INFO  Time before invoking service:Thu Jan 19 16:24:37 IST 2017
2017-01-19 16:24:37,286 INFO  Initialising service address for VerifySolution
2017-01-19 16:24:37,288 INFO  Time before invoking service In SUPER:Thu Jan 19 16:24:37 IST 2017
2017-01-19 16:24:40,005 INFO  Time after invoking service In SUPER:Thu Jan 19 16:24:40 IST 2017
2017-01-19 16:24:40,006 INFO  Service responded successfully with required details
2017-01-19 16:24:40,011 INFO  Time after invoking service:Thu Jan 19 16:24:40 IST 2017
2017-01-19 16:24:40,012 INFO  User solution successfully verified
2017-01-19 16:24:40,013 INFO  Processing the response from verify service
2017-01-19 16:24:40,015 INFO  Starting to parse JSON response
2017-01-19 16:24:40,017 ERROR Keys used to parse test result JSON might be incorrect
2017-01-19 16:24:40,018 ERROR Keys used to parse test result JSON might be incorrect
2017-01-19 16:24:40,018 ERROR Keys used to parse test result JSON might be incorrect
2017-01-19 16:24:40,019 ERROR Keys used to parse test result JSON might be incorrect
2017-01-19 16:24:40,020 ERROR Keys used to parse test result JSON might be incorrect
2017-01-19 16:24:40,021 ERROR Keys used to parse test result JSON might be incorrect
2017-01-19 16:24:40,021 ERROR Keys used to parse test result JSON might be incorrect
2017-01-19 16:24:40,022 ERROR Keys used to parse test result JSON might be incorrect
2017-01-19 16:24:40,023 ERROR Keys used to parse test result JSON might be incorrect
2017-01-19 16:24:40,023 ERROR Keys used to parse test result JSON might be incorrect
2017-01-19 16:24:40,024 INFO  Successfully parsed JSON response
2017-01-19 16:24:40,026 INFO  In the process of generating verify response in HTML
2017-01-19 16:24:40,110 INFO  Successfully generated verify response in HTML
2017-01-19 16:24:40,111 INFO  Successfully processed the response from service
2017-01-19 16:31:25,816 INFO  Setting request parameters for VerifySolution
2017-01-19 16:31:25,820 INFO  Initiating to process and prepare Input for the verify service
2017-01-19 16:31:25,822 INFO  Starting to parse the user solution
2017-01-19 16:31:25,823 INFO  Displaying user solution
2017-01-19 16:31:26,496 INFO  Successfully parsed the user solution{"CourseShortName":"PF","UserSolution":"#PF-Assgn-16\r\ndef make_amount(rupees_to_make,no_of_five,no_of_one):\r\n    five_needed=0\r\n    one_needed=0\r\n\r\n    #Start writing your code here\r\n    #Populate the variables: five_needed and one_needed\r\n    \r\n    five_needed = rupees_to_make // 5\r\n    one_needed = rupees_to_make % 5\r\n    \r\n    \r\n    if  no_of_five >= five_needed and no_of_one >= one_needed : \r\n        print(five_needed)\r\n        print(one_needed)\r\n    else :\r\n        print(-1)\r\n        \r\n    # Use the below given print statements to display the output \r\n    # Also, do not modify them for verification to work\r\n\r\n    #print(\"No. of Five needed :\", five_needed)\r\n    #print(\"No. of One needed  :\", one_needed)\r\n    #print(-1)\r\n    \r\n\r\n#Provide different values for rupees_to_make,no_of_five,no_of_one and test your program\r\nmake_amount(28,8,5)\r\n","asgnmtId":"16","SolutionFileName":"Assignment16.py","AsgnmtTyp":"A","TestcaseFileName":""}
2017-01-19 16:31:26,499 INFO  Successfully processed and prepared the input for the verify service
2017-01-19 16:31:26,501 INFO  Successfully set the request parameters for VerifySolution
2017-01-19 16:31:26,501 INFO  Invoking the service to verify the user solution
2017-01-19 16:31:26,504 INFO  Time before invoking service:Thu Jan 19 16:31:26 IST 2017
2017-01-19 16:31:26,505 INFO  Initialising service address for VerifySolution
2017-01-19 16:31:26,507 INFO  Time before invoking service In SUPER:Thu Jan 19 16:31:26 IST 2017
2017-01-19 16:31:28,706 INFO  Time after invoking service In SUPER:Thu Jan 19 16:31:28 IST 2017
2017-01-19 16:31:28,707 INFO  Service responded successfully with required details
2017-01-19 16:31:28,709 INFO  Time after invoking service:Thu Jan 19 16:31:28 IST 2017
2017-01-19 16:31:28,710 INFO  User solution successfully verified
2017-01-19 16:31:28,711 INFO  Processing the response from verify service
2017-01-19 16:31:28,713 INFO  Starting to parse JSON response
2017-01-19 16:31:28,714 ERROR Keys used to parse test result JSON might be incorrect
2017-01-19 16:31:28,715 ERROR Keys used to parse test result JSON might be incorrect
2017-01-19 16:31:28,716 ERROR Keys used to parse test result JSON might be incorrect
2017-01-19 16:31:28,717 ERROR Keys used to parse test result JSON might be incorrect
2017-01-19 16:31:28,717 ERROR Keys used to parse test result JSON might be incorrect
2017-01-19 16:31:28,718 ERROR Keys used to parse test result JSON might be incorrect
2017-01-19 16:31:28,719 ERROR Keys used to parse test result JSON might be incorrect
2017-01-19 16:31:28,719 ERROR Keys used to parse test result JSON might be incorrect
2017-01-19 16:31:28,720 ERROR Keys used to parse test result JSON might be incorrect
2017-01-19 16:31:28,721 ERROR Keys used to parse test result JSON might be incorrect
2017-01-19 16:31:28,721 INFO  Successfully parsed JSON response
2017-01-19 16:31:28,723 INFO  In the process of generating verify response in HTML
2017-01-19 16:31:28,810 INFO  Successfully generated verify response in HTML
2017-01-19 16:31:28,814 INFO  Successfully processed the response from service
2017-01-19 16:32:24,607 INFO  Setting request parameters for VerifySolution
2017-01-19 16:32:24,611 INFO  Initiating to process and prepare Input for the verify service
2017-01-19 16:32:24,613 INFO  Starting to parse the user solution
2017-01-19 16:32:24,616 INFO  Displaying user solution
2017-01-19 16:32:24,620 INFO   User Solution is unchanged since the last verification.
2017-01-19 16:32:24,624 INFO  Problem in processing and preparing Input for the verify service
2017-01-19 16:32:36,797 INFO  Setting request parameters for VerifySolution
2017-01-19 16:32:36,798 INFO  Initiating to process and prepare Input for the verify service
2017-01-19 16:32:36,802 INFO  Starting to parse the user solution
2017-01-19 16:32:36,804 INFO  Displaying user solution
2017-01-19 16:32:37,897 INFO  Successfully parsed the user solution{"CourseShortName":"PF","UserSolution":"#PF-Assgn-16\r\ndef make_amount(rupees_to_make,no_of_five,no_of_one):\r\n    five_needed=0\r\n    one_needed=0\r\n\r\n    #Start writing your code here\r\n    #Populate the variables: five_needed and one_needed\r\n    \r\n    five_needed = rupees_to_make // 5\r\n    one_needed = rupees_to_make % 5\r\n    \r\n    \r\n    if  no_of_five >= five_needed and no_of_one >= one_needed : \r\n        print(five_needed)\r\n        print(one_needed)\r\n    else :\r\n        print(-1)\r\n        \r\n    # Use the below given print statements to display the output \r\n    # Also, do not modify them for verification to work\r\n\r\n    #print(\"No. of Five needed :\", five_needed)\r\n    #print(\"No. of One needed  :\", one_needed)\r\n    #print(-1)\r\n    \r\n\r\n#Provide different values for rupees_to_make,no_of_five,no_of_one and test your progra\r\nmake_amount(28,8,5)\r\n","asgnmtId":"16","SolutionFileName":"Assignment16.py","AsgnmtTyp":"A","TestcaseFileName":""}
2017-01-19 16:32:37,899 INFO  Successfully processed and prepared the input for the verify service
2017-01-19 16:32:37,899 INFO  Successfully set the request parameters for VerifySolution
2017-01-19 16:32:37,900 INFO  Invoking the service to verify the user solution
2017-01-19 16:32:37,901 INFO  Time before invoking service:Thu Jan 19 16:32:37 IST 2017
2017-01-19 16:32:37,902 INFO  Initialising service address for VerifySolution
2017-01-19 16:32:37,904 INFO  Time before invoking service In SUPER:Thu Jan 19 16:32:37 IST 2017
2017-01-19 16:32:40,173 INFO  Time after invoking service In SUPER:Thu Jan 19 16:32:40 IST 2017
2017-01-19 16:32:40,174 INFO  Service responded successfully with required details
2017-01-19 16:32:40,175 INFO  Time after invoking service:Thu Jan 19 16:32:40 IST 2017
2017-01-19 16:32:40,176 INFO  User solution successfully verified
2017-01-19 16:32:40,177 INFO  Processing the response from verify service
2017-01-19 16:32:40,180 INFO  Starting to parse JSON response
2017-01-19 16:32:40,184 ERROR Keys used to parse test result JSON might be incorrect
2017-01-19 16:32:40,185 ERROR Keys used to parse test result JSON might be incorrect
2017-01-19 16:32:40,187 ERROR Keys used to parse test result JSON might be incorrect
2017-01-19 16:32:40,188 ERROR Keys used to parse test result JSON might be incorrect
2017-01-19 16:32:40,189 ERROR Keys used to parse test result JSON might be incorrect
2017-01-19 16:32:40,189 ERROR Keys used to parse test result JSON might be incorrect
2017-01-19 16:32:40,190 ERROR Keys used to parse test result JSON might be incorrect
2017-01-19 16:32:40,191 ERROR Keys used to parse test result JSON might be incorrect
2017-01-19 16:32:40,192 ERROR Keys used to parse test result JSON might be incorrect
2017-01-19 16:32:40,192 ERROR Keys used to parse test result JSON might be incorrect
2017-01-19 16:32:40,195 INFO  Successfully parsed JSON response
2017-01-19 16:32:40,198 INFO  In the process of generating verify response in HTML
2017-01-19 16:32:40,314 INFO  Successfully generated verify response in HTML
2017-01-19 16:32:40,316 INFO  Successfully processed the response from service
2017-01-19 16:40:21,618 INFO  Setting request parameters for VerifySolution
2017-01-19 16:40:21,631 INFO  Initiating to process and prepare Input for the verify service
2017-01-19 16:40:21,636 INFO  Starting to parse the user solution
2017-01-19 16:40:21,638 INFO  Displaying user solution
2017-01-19 16:40:21,646 INFO   User Solution is unchanged since the last verification.
2017-01-19 16:40:21,653 INFO  Problem in processing and preparing Input for the verify service
2017-01-19 16:43:29,699 INFO  Setting request parameters for VerifySolution
2017-01-19 16:43:29,700 INFO  Initiating to process and prepare Input for the verify service
2017-01-19 16:43:29,701 INFO  Starting to parse the user solution
2017-01-19 16:43:29,704 INFO  Displaying user solution
2017-01-19 16:43:31,638 INFO  Successfully parsed the user solution{"CourseShortName":"PF","UserSolution":"#PF-Assgn-16\r\ndef make_amount(rupees_to_make,no_of_five,no_of_one):\r\n    five_needed=0\r\n    one_needed=0\r\n\r\n    #Start writing your code here\r\n    #Populate the variables: five_needed and one_needed\r\n    \r\n    five_needed = rupees_to_make // 5\r\n    one_needed = rupees_to_make % 5\r\n    \r\n    \r\n    if  no_of_five >= five_needed and no_of_one >= one_needed : \r\n        print(five_needed)\r\n        print(one_needed)\r\n    else :\r\n        \r\n        print(-1)\r\n        return make_amount()\r\n    # Use the below given print statements to display the output \r\n    # Also, do not modify them for verification to work\r\n\r\n    #print(\"No. of Five needed :\", five_needed)\r\n    #print(\"No. of One needed  :\", one_needed)\r\n    #print(-1)\r\n    \r\n\r\n#Provide different values for rupees_to_make,no_of_five,no_of_one and test your progra\r\nmake_amount(28,8,5)\r\n","asgnmtId":"16","SolutionFileName":"Assignment16.py","AsgnmtTyp":"A","TestcaseFileName":""}
2017-01-19 16:43:31,665 INFO  Successfully processed and prepared the input for the verify service
2017-01-19 16:43:31,667 INFO  Successfully set the request parameters for VerifySolution
2017-01-19 16:43:31,674 INFO  Invoking the service to verify the user solution
2017-01-19 16:43:31,681 INFO  Time before invoking service:Thu Jan 19 16:43:31 IST 2017
2017-01-19 16:43:31,685 INFO  Initialising service address for VerifySolution
2017-01-19 16:43:31,689 INFO  Time before invoking service In SUPER:Thu Jan 19 16:43:31 IST 2017
2017-01-19 16:43:34,423 INFO  Time after invoking service In SUPER:Thu Jan 19 16:43:34 IST 2017
2017-01-19 16:43:34,425 INFO  Service responded successfully with required details
2017-01-19 16:43:34,426 INFO  Time after invoking service:Thu Jan 19 16:43:34 IST 2017
2017-01-19 16:43:34,426 INFO  User solution successfully verified
2017-01-19 16:43:34,428 INFO  Processing the response from verify service
2017-01-19 16:43:34,431 INFO  Starting to parse JSON response
2017-01-19 16:43:34,434 ERROR Keys used to parse test result JSON might be incorrect
2017-01-19 16:43:34,436 ERROR Keys used to parse test result JSON might be incorrect
2017-01-19 16:43:34,438 ERROR Keys used to parse test result JSON might be incorrect
2017-01-19 16:43:34,442 ERROR Keys used to parse test result JSON might be incorrect
2017-01-19 16:43:34,443 ERROR Keys used to parse test result JSON might be incorrect
2017-01-19 16:43:34,445 ERROR Keys used to parse test result JSON might be incorrect
2017-01-19 16:43:34,445 ERROR Keys used to parse test result JSON might be incorrect
2017-01-19 16:43:34,447 INFO  Successfully parsed JSON response
2017-01-19 16:43:34,450 INFO  In the process of generating verify response in HTML
2017-01-19 16:43:34,556 INFO  Successfully generated verify response in HTML
2017-01-19 16:43:34,557 INFO  Successfully processed the response from service
2017-01-19 16:44:13,442 INFO  Setting request parameters for VerifySolution
2017-01-19 16:44:13,443 INFO  Initiating to process and prepare Input for the verify service
2017-01-19 16:44:13,446 INFO  Starting to parse the user solution
2017-01-19 16:44:13,447 INFO  Displaying user solution
2017-01-19 16:44:14,286 INFO  Successfully parsed the user solution{"CourseShortName":"PF","UserSolution":"#PF-Assgn-16\r\ndef make_amount(rupees_to_make,no_of_five,no_of_one):\r\n    five_needed=0\r\n    one_needed=0\r\n\r\n    #Start writing your code here\r\n    #Populate the variables: five_needed and one_needed\r\n    \r\n    five_needed = rupees_to_make // 5\r\n    one_needed = rupees_to_make % 5\r\n    \r\n    \r\n    if  no_of_five >= five_needed and no_of_one >= one_needed : \r\n        print(five_needed)\r\n        print(one_needed)\r\n    else :\r\n        print(-1)\r\n        return make_amount\r\n    \r\n\r\n#Provide different values for rupees_to_make,no_of_five,no_of_one and test your progra\r\nmake_amount(28,8,5)\r\n","asgnmtId":"16","SolutionFileName":"Assignment16.py","AsgnmtTyp":"A","TestcaseFileName":""}
2017-01-19 16:44:14,289 INFO  Successfully processed and prepared the input for the verify service
2017-01-19 16:44:14,291 INFO  Successfully set the request parameters for VerifySolution
2017-01-19 16:44:14,292 INFO  Invoking the service to verify the user solution
2017-01-19 16:44:14,293 INFO  Time before invoking service:Thu Jan 19 16:44:14 IST 2017
2017-01-19 16:44:14,294 INFO  Initialising service address for VerifySolution
2017-01-19 16:44:14,295 INFO  Time before invoking service In SUPER:Thu Jan 19 16:44:14 IST 2017
2017-01-19 16:44:17,254 INFO  Time after invoking service In SUPER:Thu Jan 19 16:44:17 IST 2017
2017-01-19 16:44:17,256 INFO  Service responded successfully with required details
2017-01-19 16:44:17,257 INFO  Time after invoking service:Thu Jan 19 16:44:17 IST 2017
2017-01-19 16:44:17,258 INFO  User solution successfully verified
2017-01-19 16:44:17,259 INFO  Processing the response from verify service
2017-01-19 16:44:17,261 INFO  Starting to parse JSON response
2017-01-19 16:44:17,263 ERROR Keys used to parse test result JSON might be incorrect
2017-01-19 16:44:17,263 ERROR Keys used to parse test result JSON might be incorrect
2017-01-19 16:44:17,264 ERROR Keys used to parse test result JSON might be incorrect
2017-01-19 16:44:17,265 ERROR Keys used to parse test result JSON might be incorrect
2017-01-19 16:44:17,265 ERROR Keys used to parse test result JSON might be incorrect
2017-01-19 16:44:17,266 ERROR Keys used to parse test result JSON might be incorrect
2017-01-19 16:44:17,267 ERROR Keys used to parse test result JSON might be incorrect
2017-01-19 16:44:17,268 ERROR Keys used to parse test result JSON might be incorrect
2017-01-19 16:44:17,268 ERROR Keys used to parse test result JSON might be incorrect
2017-01-19 16:44:17,269 ERROR Keys used to parse test result JSON might be incorrect
2017-01-19 16:44:17,271 INFO  Successfully parsed JSON response
2017-01-19 16:44:17,272 INFO  In the process of generating verify response in HTML
2017-01-19 16:44:17,428 INFO  Successfully generated verify response in HTML
2017-01-19 16:44:17,429 INFO  Successfully processed the response from service
2017-01-19 16:44:43,377 INFO  Initiating to process and prepare Input for the submit service
2017-01-19 16:44:43,378 INFO  Displaying user solution
2017-01-19 16:44:43,388 INFO  Successfully processed and prepared the input for the submit service
2017-01-19 16:44:43,389 INFO  Invoking the service to submit the user solution
2017-01-19 16:44:43,390 INFO  Initialising service address for Submit
2017-01-19 16:44:43,391 INFO  Time before invoking service In SUPER:Thu Jan 19 16:44:43 IST 2017
2017-01-19 16:44:43,629 INFO  Time after invoking service In SUPER:Thu Jan 19 16:44:43 IST 2017
2017-01-19 16:44:43,630 INFO  Service responded successfully with required details
2017-01-19 16:44:43,631 INFO  User solution successfully submitted
2017-01-19 16:44:43,633 INFO  Displaying submission status
2017-01-19 16:44:43,633 INFO  Displayed submission status successfullySuccessfully Submitted!
2017-01-19 16:44:46,567 INFO  Setting request parameters for VerifySolution
2017-01-19 16:44:46,568 INFO  Initiating to process and prepare Input for the verify service
2017-01-19 16:44:46,569 INFO  Starting to parse the user solution
2017-01-19 16:44:46,570 INFO  Displaying user solution
2017-01-19 16:44:46,576 INFO   User Solution is unchanged since the last verification.
2017-01-19 16:44:46,585 INFO  Problem in processing and preparing Input for the verify service
2017-01-19 16:44:49,664 INFO  Setting request parameters for VerifySolution
2017-01-19 16:44:49,665 INFO  Initiating to process and prepare Input for the verify service
2017-01-19 16:44:49,665 INFO  Starting to parse the user solution
2017-01-19 16:44:49,666 INFO  Displaying user solution
2017-01-19 16:44:49,671 INFO   User Solution is unchanged since the last verification.
2017-01-19 16:44:49,677 INFO  Problem in processing and preparing Input for the verify service
2017-01-19 16:44:54,439 INFO  Setting request parameters for VerifySolution
2017-01-19 16:44:54,441 INFO  Initiating to process and prepare Input for the verify service
2017-01-19 16:44:54,443 INFO  Starting to parse the user solution
2017-01-19 16:44:54,446 INFO  Displaying user solution
2017-01-19 16:44:54,455 INFO   User Solution is unchanged since the last verification.
2017-01-19 16:44:54,464 INFO  Problem in processing and preparing Input for the verify service
2017-01-19 16:44:58,611 INFO  Setting request parameters for VerifySolution
2017-01-19 16:44:58,617 INFO  Initiating to process and prepare Input for the verify service
2017-01-19 16:44:58,620 INFO  Starting to parse the user solution
2017-01-19 16:44:58,626 INFO  Displaying user solution
2017-01-19 16:44:58,638 INFO   User Solution is unchanged since the last verification.
2017-01-19 16:44:58,652 INFO  Problem in processing and preparing Input for the verify service
2017-01-19 16:45:11,327 INFO  Setting request parameters for VerifySolution
2017-01-19 16:45:11,329 INFO  Initiating to process and prepare Input for the verify service
2017-01-19 16:45:11,330 INFO  Starting to parse the user solution
2017-01-19 16:45:11,331 INFO  Displaying user solution
2017-01-19 16:45:11,337 INFO   User Solution is unchanged since the last verification.
2017-01-19 16:45:11,344 INFO  Problem in processing and preparing Input for the verify service
2017-01-19 16:45:16,396 INFO  Setting request parameters for VerifySolution
2017-01-19 16:45:16,398 INFO  Initiating to process and prepare Input for the verify service
2017-01-19 16:45:16,399 INFO  Starting to parse the user solution
2017-01-19 16:45:16,400 INFO  Displaying user solution
2017-01-19 16:45:17,093 INFO  Successfully parsed the user solution{"CourseShortName":"PF","UserSolution":"#PF-Assgn-16\r\ndef make_amount(rupees_to_make,no_of_five,no_of_one):\r\n    five_needed=0\r\n    one_needed=0\r\n\r\n    #Start writing your code here\r\n    #Populate the variables: five_needed and one_needed\r\n    \r\n    five_needed = rupees_to_make // 5\r\n    one_needed = rupees_to_make % 5\r\n    \r\n    \r\n    if  no_of_five >= five_needed and no_of_one >= one_needed : \r\n        print(five_needed)\r\n        print(one_needed)\r\n    else :\r\n        print(-1)\r\n        return make_amount\r\n#Provide different values for rupees_to_make,no_of_five,no_of_one and test your progra\r\nmake_amount(138,81,51)\r\n","asgnmtId":"16","SolutionFileName":"Assignment16.py","AsgnmtTyp":"A","TestcaseFileName":""}
2017-01-19 16:45:17,095 INFO  Successfully processed and prepared the input for the verify service
2017-01-19 16:45:17,096 INFO  Successfully set the request parameters for VerifySolution
2017-01-19 16:45:17,096 INFO  Invoking the service to verify the user solution
2017-01-19 16:45:17,097 INFO  Time before invoking service:Thu Jan 19 16:45:17 IST 2017
2017-01-19 16:45:17,098 INFO  Initialising service address for VerifySolution
2017-01-19 16:45:17,099 INFO  Time before invoking service In SUPER:Thu Jan 19 16:45:17 IST 2017
2017-01-19 16:45:19,422 INFO  Time after invoking service In SUPER:Thu Jan 19 16:45:19 IST 2017
2017-01-19 16:45:19,424 INFO  Service responded successfully with required details
2017-01-19 16:45:19,424 INFO  Time after invoking service:Thu Jan 19 16:45:19 IST 2017
2017-01-19 16:45:19,425 INFO  User solution successfully verified
2017-01-19 16:45:19,426 INFO  Processing the response from verify service
2017-01-19 16:45:19,427 INFO  Starting to parse JSON response
2017-01-19 16:45:19,428 ERROR Keys used to parse test result JSON might be incorrect
2017-01-19 16:45:19,429 ERROR Keys used to parse test result JSON might be incorrect
2017-01-19 16:45:19,430 ERROR Keys used to parse test result JSON might be incorrect
2017-01-19 16:45:19,430 ERROR Keys used to parse test result JSON might be incorrect
2017-01-19 16:45:19,431 ERROR Keys used to parse test result JSON might be incorrect
2017-01-19 16:45:19,432 ERROR Keys used to parse test result JSON might be incorrect
2017-01-19 16:45:19,432 ERROR Keys used to parse test result JSON might be incorrect
2017-01-19 16:45:19,433 ERROR Keys used to parse test result JSON might be incorrect
2017-01-19 16:45:19,434 ERROR Keys used to parse test result JSON might be incorrect
2017-01-19 16:45:19,435 ERROR Keys used to parse test result JSON might be incorrect
2017-01-19 16:45:19,436 INFO  Successfully parsed JSON response
2017-01-19 16:45:19,438 INFO  In the process of generating verify response in HTML
2017-01-19 16:45:19,524 INFO  Successfully generated verify response in HTML
2017-01-19 16:45:19,525 INFO  Successfully processed the response from service
2017-01-19 16:47:53,934 INFO  Setting request parameters for VerifySolution
2017-01-19 16:47:53,935 INFO  Initiating to process and prepare Input for the verify service
2017-01-19 16:47:53,937 INFO  Starting to parse the user solution
2017-01-19 16:47:53,938 INFO  Displaying user solution
2017-01-19 16:47:54,721 INFO  Successfully parsed the user solution{"CourseShortName":"PF","UserSolution":"#PF-Assgn-16\r\ndef make_amount(rupees_to_make,no_of_five,no_of_one):\r\n    five_needed=0\r\n    one_needed=0\r\n\r\n    #Start writing your code here\r\n    #Populate the variables: five_needed and one_needed\r\n    \r\n    five_needed = rupees_to_make // 5\r\n    one_needed = rupees_to_make % 5\r\n    \r\n    \r\n    if  no_of_five >= five_needed and no_of_one >= one_needed : \r\n        print(five_needed)\r\n        print(one_needed)\r\n    else :\r\n        print(-1)\r\n        return make_amount\r\n#Provide different values for rupees_to_make,no_of_five,no_of_one and test your progra\r\nmake_amount(138,81,51)\r\nprint(\"Second input\")\r\nmake_amount(241,34,23)\r\n","asgnmtId":"16","SolutionFileName":"Assignment16.py","AsgnmtTyp":"A","TestcaseFileName":""}
2017-01-19 16:47:54,725 INFO  Successfully processed and prepared the input for the verify service
2017-01-19 16:47:54,726 INFO  Successfully set the request parameters for VerifySolution
2017-01-19 16:47:54,727 INFO  Invoking the service to verify the user solution
2017-01-19 16:47:54,728 INFO  Time before invoking service:Thu Jan 19 16:47:54 IST 2017
2017-01-19 16:47:54,729 INFO  Initialising service address for VerifySolution
2017-01-19 16:47:54,731 INFO  Time before invoking service In SUPER:Thu Jan 19 16:47:54 IST 2017
2017-01-19 16:47:57,253 INFO  Time after invoking service In SUPER:Thu Jan 19 16:47:57 IST 2017
2017-01-19 16:47:57,254 INFO  Service responded successfully with required details
2017-01-19 16:47:57,255 INFO  Time after invoking service:Thu Jan 19 16:47:57 IST 2017
2017-01-19 16:47:57,255 INFO  User solution successfully verified
2017-01-19 16:47:57,256 INFO  Processing the response from verify service
2017-01-19 16:47:57,260 INFO  Starting to parse JSON response
2017-01-19 16:47:57,262 ERROR Keys used to parse test result JSON might be incorrect
2017-01-19 16:47:57,263 ERROR Keys used to parse test result JSON might be incorrect
2017-01-19 16:47:57,264 ERROR Keys used to parse test result JSON might be incorrect
2017-01-19 16:47:57,265 ERROR Keys used to parse test result JSON might be incorrect
2017-01-19 16:47:57,265 ERROR Keys used to parse test result JSON might be incorrect
2017-01-19 16:47:57,266 ERROR Keys used to parse test result JSON might be incorrect
2017-01-19 16:47:57,266 ERROR Keys used to parse test result JSON might be incorrect
2017-01-19 16:47:57,267 ERROR Keys used to parse test result JSON might be incorrect
2017-01-19 16:47:57,268 ERROR Keys used to parse test result JSON might be incorrect
2017-01-19 16:47:57,268 ERROR Keys used to parse test result JSON might be incorrect
2017-01-19 16:47:57,269 INFO  Successfully parsed JSON response
2017-01-19 16:47:57,271 INFO  In the process of generating verify response in HTML
2017-01-19 16:47:57,369 INFO  Successfully generated verify response in HTML
2017-01-19 16:47:57,371 INFO  Successfully processed the response from service
2017-01-19 16:48:32,642 INFO  Setting request parameters for VerifySolution
2017-01-19 16:48:32,643 INFO  Initiating to process and prepare Input for the verify service
2017-01-19 16:48:32,644 INFO  Starting to parse the user solution
2017-01-19 16:48:32,645 INFO  Displaying user solution
2017-01-19 16:48:33,441 INFO  Successfully parsed the user solution{"CourseShortName":"PF","UserSolution":"#PF-Assgn-16\r\ndef make_amount(rupees_to_make,no_of_five,no_of_one):\r\n    five_needed=0\r\n    one_needed=0\r\n\r\n    #Start writing your code here\r\n    #Populate the variables: five_needed and one_needed\r\n    \r\n    five_needed = rupees_to_make // 5\r\n    one_needed = rupees_to_make % 5\r\n    \r\n    \r\n    if  no_of_five >= five_needed and no_of_one >= one_needed : \r\n        print(five_needed)\r\n        print(one_needed)\r\n    else :\r\n        print(-1)\r\n        return make_amount\r\n#Provide different values for rupees_to_make,no_of_five,no_of_one and test your progra\r\nmake_amount(138,81,51)\r\nprint(\"Second input\")\r\nmake_amount(241,343,23)\r\n","asgnmtId":"16","SolutionFileName":"Assignment16.py","AsgnmtTyp":"A","TestcaseFileName":""}
2017-01-19 16:48:33,444 INFO  Successfully processed and prepared the input for the verify service
2017-01-19 16:48:33,445 INFO  Successfully set the request parameters for VerifySolution
2017-01-19 16:48:33,446 INFO  Invoking the service to verify the user solution
2017-01-19 16:48:33,448 INFO  Time before invoking service:Thu Jan 19 16:48:33 IST 2017
2017-01-19 16:48:33,449 INFO  Initialising service address for VerifySolution
2017-01-19 16:48:33,450 INFO  Time before invoking service In SUPER:Thu Jan 19 16:48:33 IST 2017
2017-01-19 16:48:35,857 INFO  Time after invoking service In SUPER:Thu Jan 19 16:48:35 IST 2017
2017-01-19 16:48:35,859 INFO  Service responded successfully with required details
2017-01-19 16:48:35,860 INFO  Time after invoking service:Thu Jan 19 16:48:35 IST 2017
2017-01-19 16:48:35,862 INFO  User solution successfully verified
2017-01-19 16:48:35,865 INFO  Processing the response from verify service
2017-01-19 16:48:35,869 INFO  Starting to parse JSON response
2017-01-19 16:48:35,873 ERROR Keys used to parse test result JSON might be incorrect
2017-01-19 16:48:35,874 ERROR Keys used to parse test result JSON might be incorrect
2017-01-19 16:48:35,874 ERROR Keys used to parse test result JSON might be incorrect
2017-01-19 16:48:35,876 ERROR Keys used to parse test result JSON might be incorrect
2017-01-19 16:48:35,878 ERROR Keys used to parse test result JSON might be incorrect
2017-01-19 16:48:35,879 ERROR Keys used to parse test result JSON might be incorrect
2017-01-19 16:48:35,880 ERROR Keys used to parse test result JSON might be incorrect
2017-01-19 16:48:35,881 ERROR Keys used to parse test result JSON might be incorrect
2017-01-19 16:48:35,882 ERROR Keys used to parse test result JSON might be incorrect
2017-01-19 16:48:35,882 ERROR Keys used to parse test result JSON might be incorrect
2017-01-19 16:48:35,883 INFO  Successfully parsed JSON response
2017-01-19 16:48:35,885 INFO  In the process of generating verify response in HTML
2017-01-19 16:48:35,976 INFO  Successfully generated verify response in HTML
2017-01-19 16:48:35,977 INFO  Successfully processed the response from service
2017-01-19 16:55:14,466 INFO  Setting request parameters for VerifySolution
2017-01-19 16:55:14,468 INFO  Initiating to process and prepare Input for the verify service
2017-01-19 16:55:14,469 INFO  Starting to parse the user solution
2017-01-19 16:55:14,471 INFO  Displaying user solution
2017-01-19 16:55:15,193 INFO  Successfully parsed the user solution{"CourseShortName":"PF","UserSolution":"#PF-Assgn-16\r\ndef make_amount(rupees_to_make,no_of_five,no_of_one):\r\n    five_needed=0\r\n    one_needed=0\r\n\r\n    #Start writing your code here\r\n    #Populate the variables: five_needed and one_needed\r\n    \r\n    \r\n    if rupees_to_make >= 5 :\r\n        five_needed = rupees_to_make // 5\r\n        one_needed = rupees_to_make % 5\r\n    else :\r\n        five_needed = 0\r\n    one_needed = rupees_to_make % 5\r\n    \r\n    \r\n    if  no_of_five >= five_needed and no_of_one >= one_needed : \r\n        print(five_needed)\r\n        print(one_needed)\r\n    elif five_needed == 0 and no_of_one >= one_needed :\r\n        print(one_needed)\r\n           \r\n    else :\r\n        print(-1)\r\n        return make_amount\r\n#Provide different values for rupees_to_make,no_of_five,no_of_one and test your progra\r\nmake_amount(138,81,51)\r\nprint(\"Second input\")\r\nmake_amount(241,343,23)\r\nprint(\"Third input\")\r\nmake_amount(4,3,23)\r\n\r\n","asgnmtId":"16","SolutionFileName":"Assignment16.py","AsgnmtTyp":"A","TestcaseFileName":""}
2017-01-19 16:55:15,196 INFO  Successfully processed and prepared the input for the verify service
2017-01-19 16:55:15,200 INFO  Successfully set the request parameters for VerifySolution
2017-01-19 16:55:15,201 INFO  Invoking the service to verify the user solution
2017-01-19 16:55:15,207 INFO  Time before invoking service:Thu Jan 19 16:55:15 IST 2017
2017-01-19 16:55:15,208 INFO  Initialising service address for VerifySolution
2017-01-19 16:55:15,213 INFO  Time before invoking service In SUPER:Thu Jan 19 16:55:15 IST 2017
2017-01-19 16:55:17,331 INFO  Time after invoking service In SUPER:Thu Jan 19 16:55:17 IST 2017
2017-01-19 16:55:17,333 INFO  Service responded successfully with required details
2017-01-19 16:55:17,335 INFO  Time after invoking service:Thu Jan 19 16:55:17 IST 2017
2017-01-19 16:55:17,336 INFO  User solution successfully verified
2017-01-19 16:55:17,337 INFO  Processing the response from verify service
2017-01-19 16:55:17,349 INFO  Starting to parse JSON response
2017-01-19 16:55:17,352 ERROR Keys used to parse test result JSON might be incorrect
2017-01-19 16:55:17,354 ERROR Keys used to parse test result JSON might be incorrect
2017-01-19 16:55:17,356 ERROR Keys used to parse test result JSON might be incorrect
2017-01-19 16:55:17,360 ERROR Keys used to parse test result JSON might be incorrect
2017-01-19 16:55:17,361 ERROR Keys used to parse test result JSON might be incorrect
2017-01-19 16:55:17,363 ERROR Keys used to parse test result JSON might be incorrect
2017-01-19 16:55:17,364 ERROR Keys used to parse test result JSON might be incorrect
2017-01-19 16:55:17,365 ERROR Keys used to parse test result JSON might be incorrect
2017-01-19 16:55:17,366 ERROR Keys used to parse test result JSON might be incorrect
2017-01-19 16:55:17,367 ERROR Keys used to parse test result JSON might be incorrect
2017-01-19 16:55:17,369 INFO  Successfully parsed JSON response
2017-01-19 16:55:17,374 INFO  In the process of generating verify response in HTML
2017-01-19 16:55:17,558 INFO  Successfully generated verify response in HTML
2017-01-19 16:55:17,560 INFO  Successfully processed the response from service
2017-01-19 16:55:57,778 INFO  Setting request parameters for VerifySolution
2017-01-19 16:55:57,779 INFO  Initiating to process and prepare Input for the verify service
2017-01-19 16:55:57,782 INFO  Starting to parse the user solution
2017-01-19 16:55:57,783 INFO  Displaying user solution
2017-01-19 16:55:58,566 INFO  Successfully parsed the user solution{"CourseShortName":"PF","UserSolution":"#PF-Assgn-16\r\ndef make_amount(rupees_to_make,no_of_five,no_of_one):\r\n    five_needed=0\r\n    one_needed=0\r\n\r\n    #Start writing your code here\r\n    #Populate the variables: five_needed and one_needed\r\n    \r\n    \r\n    if rupees_to_make >= 5 :\r\n        five_needed = rupees_to_make // 5\r\n        one_needed = rupees_to_make % 5\r\n    else :\r\n        five_needed = 0\r\n    one_needed = rupees_to_make % 5\r\n    \r\n    \r\n    if  no_of_five >= five_needed and no_of_one >= one_needed : \r\n        print(five_needed)\r\n        print(one_needed)\r\n    elif five_needed == 0 and no_of_one >= one_needed :\r\n        print(one_needed)\r\n        print(five_needed)\r\n           \r\n    else :\r\n        print(-1)\r\n        return make_amount\r\n#Provide different values for rupees_to_make,no_of_five,no_of_one and test your progra\r\nmake_amount(138,81,51)\r\nprint(\"Second input\")\r\nmake_amount(241,343,23)\r\nprint(\"Third input\")\r\nmake_amount(4,3,23)\r\n\r\n","asgnmtId":"16","SolutionFileName":"Assignment16.py","AsgnmtTyp":"A","TestcaseFileName":""}
2017-01-19 16:55:58,568 INFO  Successfully processed and prepared the input for the verify service
2017-01-19 16:55:58,569 INFO  Successfully set the request parameters for VerifySolution
2017-01-19 16:55:58,570 INFO  Invoking the service to verify the user solution
2017-01-19 16:55:58,571 INFO  Time before invoking service:Thu Jan 19 16:55:58 IST 2017
2017-01-19 16:55:58,572 INFO  Initialising service address for VerifySolution
2017-01-19 16:55:58,573 INFO  Time before invoking service In SUPER:Thu Jan 19 16:55:58 IST 2017
2017-01-19 16:56:01,404 INFO  Time after invoking service In SUPER:Thu Jan 19 16:56:01 IST 2017
2017-01-19 16:56:01,408 INFO  Service responded successfully with required details
2017-01-19 16:56:01,410 INFO  Time after invoking service:Thu Jan 19 16:56:01 IST 2017
2017-01-19 16:56:01,412 INFO  User solution successfully verified
2017-01-19 16:56:01,413 INFO  Processing the response from verify service
2017-01-19 16:56:01,416 INFO  Starting to parse JSON response
2017-01-19 16:56:01,418 ERROR Keys used to parse test result JSON might be incorrect
2017-01-19 16:56:01,419 ERROR Keys used to parse test result JSON might be incorrect
2017-01-19 16:56:01,420 ERROR Keys used to parse test result JSON might be incorrect
2017-01-19 16:56:01,421 ERROR Keys used to parse test result JSON might be incorrect
2017-01-19 16:56:01,422 ERROR Keys used to parse test result JSON might be incorrect
2017-01-19 16:56:01,423 ERROR Keys used to parse test result JSON might be incorrect
2017-01-19 16:56:01,424 ERROR Keys used to parse test result JSON might be incorrect
2017-01-19 16:56:01,424 ERROR Keys used to parse test result JSON might be incorrect
2017-01-19 16:56:01,425 ERROR Keys used to parse test result JSON might be incorrect
2017-01-19 16:56:01,426 ERROR Keys used to parse test result JSON might be incorrect
2017-01-19 16:56:01,427 INFO  Successfully parsed JSON response
2017-01-19 16:56:01,430 INFO  In the process of generating verify response in HTML
2017-01-19 16:56:01,572 INFO  Successfully generated verify response in HTML
2017-01-19 16:56:01,577 INFO  Successfully processed the response from service
2017-01-19 16:56:15,772 INFO  Setting request parameters for VerifySolution
2017-01-19 16:56:15,773 INFO  Initiating to process and prepare Input for the verify service
2017-01-19 16:56:15,774 INFO  Starting to parse the user solution
2017-01-19 16:56:15,777 INFO  Displaying user solution
2017-01-19 16:56:15,782 INFO   User Solution is unchanged since the last verification.
2017-01-19 16:56:15,790 INFO  Problem in processing and preparing Input for the verify service
2017-01-19 16:57:04,402 INFO  Setting request parameters for VerifySolution
2017-01-19 16:57:04,406 INFO  Initiating to process and prepare Input for the verify service
2017-01-19 16:57:04,411 INFO  Starting to parse the user solution
2017-01-19 16:57:04,412 INFO  Displaying user solution
2017-01-19 16:57:05,222 INFO  Successfully parsed the user solution{"CourseShortName":"PF","UserSolution":"#PF-Assgn-16\r\ndef make_amount(rupees_to_make,no_of_five,no_of_one):\r\n    five_needed=0\r\n    one_needed=0\r\n\r\n    #Start writing your code here\r\n    #Populate the variables: five_needed and one_needed\r\n    \r\n    \r\n    if rupees_to_make >= 5 :\r\n        five_needed = rupees_to_make // 5\r\n        one_needed = rupees_to_make % 5\r\n    else :\r\n        five_needed = 0\r\n    one_needed = rupees_to_make % 5\r\n    \r\n    \r\n    if  no_of_five >= five_needed and no_of_one >= one_needed : \r\n        print(five_needed)\r\n        print(one_needed)\r\n    elif five_needed == 0 and no_of_one >= one_needed :\r\n        print(one_needed)\r\n        print(five_needed)\r\n    elif five_needed < no_of_five and no_of_one >= one_needed :\r\n        print(one_needed)\r\n        print(five_needed)\r\n        \r\n    else :\r\n        print(-1)\r\n        return make_amount\r\n#Provide different values for rupees_to_make,no_of_five,no_of_one and test your progra\r\nmake_amount(138,81,51)\r\nprint(\"Second input\")\r\nmake_amount(241,343,23)\r\nprint(\"Third input\")\r\nmake_amount(4,3,23)\r\n\r\n","asgnmtId":"16","SolutionFileName":"Assignment16.py","AsgnmtTyp":"A","TestcaseFileName":""}
2017-01-19 16:57:05,224 INFO  Successfully processed and prepared the input for the verify service
2017-01-19 16:57:05,225 INFO  Successfully set the request parameters for VerifySolution
2017-01-19 16:57:05,226 INFO  Invoking the service to verify the user solution
2017-01-19 16:57:05,227 INFO  Time before invoking service:Thu Jan 19 16:57:05 IST 2017
2017-01-19 16:57:05,228 INFO  Initialising service address for VerifySolution
2017-01-19 16:57:05,229 INFO  Time before invoking service In SUPER:Thu Jan 19 16:57:05 IST 2017
2017-01-19 16:57:08,148 INFO  Time after invoking service In SUPER:Thu Jan 19 16:57:08 IST 2017
2017-01-19 16:57:08,150 INFO  Service responded successfully with required details
2017-01-19 16:57:08,151 INFO  Time after invoking service:Thu Jan 19 16:57:08 IST 2017
2017-01-19 16:57:08,153 INFO  User solution successfully verified
2017-01-19 16:57:08,154 INFO  Processing the response from verify service
2017-01-19 16:57:08,158 INFO  Starting to parse JSON response
2017-01-19 16:57:08,161 ERROR Keys used to parse test result JSON might be incorrect
2017-01-19 16:57:08,164 ERROR Keys used to parse test result JSON might be incorrect
2017-01-19 16:57:08,165 ERROR Keys used to parse test result JSON might be incorrect
2017-01-19 16:57:08,166 ERROR Keys used to parse test result JSON might be incorrect
2017-01-19 16:57:08,167 ERROR Keys used to parse test result JSON might be incorrect
2017-01-19 16:57:08,168 ERROR Keys used to parse test result JSON might be incorrect
2017-01-19 16:57:08,168 ERROR Keys used to parse test result JSON might be incorrect
2017-01-19 16:57:08,169 ERROR Keys used to parse test result JSON might be incorrect
2017-01-19 16:57:08,171 ERROR Keys used to parse test result JSON might be incorrect
2017-01-19 16:57:08,172 ERROR Keys used to parse test result JSON might be incorrect
2017-01-19 16:57:08,174 INFO  Successfully parsed JSON response
2017-01-19 16:57:08,176 INFO  In the process of generating verify response in HTML
2017-01-19 16:57:08,275 INFO  Successfully generated verify response in HTML
2017-01-19 16:57:08,279 INFO  Successfully processed the response from service
2017-01-19 16:58:00,574 INFO  Setting request parameters for VerifySolution
2017-01-19 16:58:00,577 INFO  Initiating to process and prepare Input for the verify service
2017-01-19 16:58:00,578 INFO  Starting to parse the user solution
2017-01-19 16:58:00,580 INFO  Displaying user solution
2017-01-19 16:58:01,405 INFO  Successfully parsed the user solution{"CourseShortName":"PF","UserSolution":"#PF-Assgn-16\r\ndef make_amount(rupees_to_make,no_of_five,no_of_one):\r\n    five_needed=0\r\n    one_needed=0\r\n\r\n    #Start writing your code here\r\n    #Populate the variables: five_needed and one_needed\r\n    \r\n    \r\n    if rupees_to_make >= 5 :\r\n        five_needed = rupees_to_make // 5\r\n        one_needed = rupees_to_make % 5\r\n    else :\r\n        five_needed = 0\r\n    one_needed = rupees_to_make % 5\r\n    \r\n    \r\n    if  no_of_five >= five_needed and no_of_one >= one_needed : \r\n        print(five_needed)\r\n        print(one_needed)\r\n        return make_amount\r\n    elif five_needed == 0 and no_of_one >= one_needed :\r\n        print(one_needed)\r\n        print(five_needed)\r\n        return make_amount\r\n    elif five_needed < no_of_five and no_of_one >= one_needed :\r\n        print(one_needed)\r\n        print(five_needed)\r\n        return make_amount\r\n    else :\r\n        print(-1)\r\n        return make_amount\r\n#Provide different values for rupees_to_make,no_of_five,no_of_one and test your progra\r\nmake_amount(138,81,51)\r\nprint(\"Second input\")\r\nmake_amount(241,343,23)\r\nprint(\"Third input\")\r\nmake_amount(4,3,23)\r\n\r\n","asgnmtId":"16","SolutionFileName":"Assignment16.py","AsgnmtTyp":"A","TestcaseFileName":""}
2017-01-19 16:58:01,407 INFO  Successfully processed and prepared the input for the verify service
2017-01-19 16:58:01,408 INFO  Successfully set the request parameters for VerifySolution
2017-01-19 16:58:01,409 INFO  Invoking the service to verify the user solution
2017-01-19 16:58:01,411 INFO  Time before invoking service:Thu Jan 19 16:58:01 IST 2017
2017-01-19 16:58:01,412 INFO  Initialising service address for VerifySolution
2017-01-19 16:58:01,416 INFO  Time before invoking service In SUPER:Thu Jan 19 16:58:01 IST 2017
2017-01-19 16:58:03,606 INFO  Time after invoking service In SUPER:Thu Jan 19 16:58:03 IST 2017
2017-01-19 16:58:03,608 INFO  Service responded successfully with required details
2017-01-19 16:58:03,609 INFO  Time after invoking service:Thu Jan 19 16:58:03 IST 2017
2017-01-19 16:58:03,610 INFO  User solution successfully verified
2017-01-19 16:58:03,611 INFO  Processing the response from verify service
2017-01-19 16:58:03,616 INFO  Starting to parse JSON response
2017-01-19 16:58:03,617 ERROR Keys used to parse test result JSON might be incorrect
2017-01-19 16:58:03,618 ERROR Keys used to parse test result JSON might be incorrect
2017-01-19 16:58:03,618 ERROR Keys used to parse test result JSON might be incorrect
2017-01-19 16:58:03,619 ERROR Keys used to parse test result JSON might be incorrect
2017-01-19 16:58:03,620 ERROR Keys used to parse test result JSON might be incorrect
2017-01-19 16:58:03,620 ERROR Keys used to parse test result JSON might be incorrect
2017-01-19 16:58:03,625 ERROR Keys used to parse test result JSON might be incorrect
2017-01-19 16:58:03,626 ERROR Keys used to parse test result JSON might be incorrect
2017-01-19 16:58:03,627 ERROR Keys used to parse test result JSON might be incorrect
2017-01-19 16:58:03,631 ERROR Keys used to parse test result JSON might be incorrect
2017-01-19 16:58:03,633 INFO  Successfully parsed JSON response
2017-01-19 16:58:03,634 INFO  In the process of generating verify response in HTML
2017-01-19 16:58:03,768 INFO  Successfully generated verify response in HTML
2017-01-19 16:58:03,770 INFO  Successfully processed the response from service
2017-01-19 17:00:10,763 INFO  Setting request parameters for VerifySolution
2017-01-19 17:00:10,768 INFO  Initiating to process and prepare Input for the verify service
2017-01-19 17:00:10,772 INFO  Starting to parse the user solution
2017-01-19 17:00:10,776 INFO  Displaying user solution
2017-01-19 17:00:12,024 INFO  Successfully parsed the user solution{"CourseShortName":"PF","UserSolution":"#PF-Assgn-16\r\ndef make_amount(rupees_to_make,no_of_five,no_of_one):\r\n    five_needed=0\r\n    one_needed=0\r\n\r\n    #Start writing your code here\r\n    #Populate the variables: five_needed and one_needed\r\n    \r\n    \r\n    if rupees_to_make >= 5 :\r\n        five_needed = rupees_to_make // 5\r\n        one_needed = rupees_to_make % 5\r\n    else :\r\n        five_needed = 0\r\n    one_needed = rupees_to_make % 5\r\n    \r\n    \r\n    if  no_of_five >= five_needed and no_of_one >= one_needed : \r\n        print(five_needed)\r\n        print(one_needed)\r\n        return make_amount\r\n    elif five_needed == 0 and no_of_one >= one_needed :\r\n        print(one_needed)\r\n        print(five_needed)\r\n        return make_amount\r\n    elif five_needed < no_of_five and no_of_one >= one_needed :\r\n        print(one_needed)\r\n        print(five_needed)\r\n        print(\" No. of Five needed :\" , five_needed , \"No. of One needed :\" , one_needed)\r\n        return make_amount\r\n    else :\r\n        print(-1)\r\n        return make_amount\r\n#Provide different values for rupees_to_make,no_of_five,no_of_one and test your progra\r\nmake_amount(138,81,51)\r\nprint(\"Second input\")\r\nmake_amount(241,343,23)\r\nprint(\"Third input\")\r\nmake_amount(4,3,23)\r\n\r\n","asgnmtId":"16","SolutionFileName":"Assignment16.py","AsgnmtTyp":"A","TestcaseFileName":""}
2017-01-19 17:00:12,026 INFO  Successfully processed and prepared the input for the verify service
2017-01-19 17:00:12,027 INFO  Successfully set the request parameters for VerifySolution
2017-01-19 17:00:12,027 INFO  Invoking the service to verify the user solution
2017-01-19 17:00:12,029 INFO  Time before invoking service:Thu Jan 19 17:00:12 IST 2017
2017-01-19 17:00:12,031 INFO  Initialising service address for VerifySolution
2017-01-19 17:00:12,033 INFO  Time before invoking service In SUPER:Thu Jan 19 17:00:12 IST 2017
2017-01-19 17:00:14,238 INFO  Time after invoking service In SUPER:Thu Jan 19 17:00:14 IST 2017
2017-01-19 17:00:14,241 INFO  Service responded successfully with required details
2017-01-19 17:00:14,242 INFO  Time after invoking service:Thu Jan 19 17:00:14 IST 2017
2017-01-19 17:00:14,243 INFO  User solution successfully verified
2017-01-19 17:00:14,246 INFO  Processing the response from verify service
2017-01-19 17:00:14,249 INFO  Starting to parse JSON response
2017-01-19 17:00:14,252 ERROR Keys used to parse test result JSON might be incorrect
2017-01-19 17:00:14,253 ERROR Keys used to parse test result JSON might be incorrect
2017-01-19 17:00:14,254 ERROR Keys used to parse test result JSON might be incorrect
2017-01-19 17:00:14,254 ERROR Keys used to parse test result JSON might be incorrect
2017-01-19 17:00:14,255 ERROR Keys used to parse test result JSON might be incorrect
2017-01-19 17:00:14,256 ERROR Keys used to parse test result JSON might be incorrect
2017-01-19 17:00:14,257 ERROR Keys used to parse test result JSON might be incorrect
2017-01-19 17:00:14,257 ERROR Keys used to parse test result JSON might be incorrect
2017-01-19 17:00:14,258 ERROR Keys used to parse test result JSON might be incorrect
2017-01-19 17:00:14,261 ERROR Keys used to parse test result JSON might be incorrect
2017-01-19 17:00:14,263 INFO  Successfully parsed JSON response
2017-01-19 17:00:14,265 INFO  In the process of generating verify response in HTML
2017-01-19 17:00:14,401 INFO  Successfully generated verify response in HTML
2017-01-19 17:00:14,403 INFO  Successfully processed the response from service
2017-01-19 17:03:53,014 INFO  Setting request parameters for VerifySolution
2017-01-19 17:03:53,017 INFO  Initiating to process and prepare Input for the verify service
2017-01-19 17:03:53,017 INFO  Starting to parse the user solution
2017-01-19 17:03:53,020 INFO  Displaying user solution
2017-01-19 17:03:53,822 INFO  Successfully parsed the user solution{"CourseShortName":"PF","UserSolution":"#PF-Assgn-16\r\ndef make_amount(rupees_to_make,no_of_five,no_of_one):\r\n    five_needed=0\r\n    one_needed=0\r\n\r\n    #Start writing your code here\r\n    #Populate the variables: five_needed and one_needed\r\n    \r\n    \r\n    if rupees_to_make >= 5 :\r\n        five_needed = rupees_to_make // 5\r\n        one_needed = rupees_to_make % 5\r\n    else :\r\n        five_needed = 0\r\n    one_needed = rupees_to_make % 5\r\n    \r\n    \r\n    if  no_of_five >= five_needed and no_of_one >= one_needed : \r\n        print(five_needed)\r\n        print(one_needed)\r\n        return make_amount\r\n    elif five_needed == 0 and no_of_one >= one_needed :\r\n        print(one_needed)\r\n        print(five_needed)\r\n        return make_amount\r\n    elif five_needed < no_of_five and no_of_one >= one_needed :\r\n        print(one_needed)\r\n        print(five_needed)\r\n        print(\" No. of Five needed :\" , five_needed , \"No. of One needed :\" , one_needed)\r\n        return make_amount\r\n    else :\r\n        print(-1)\r\n        return make_amount\r\n#Provide different values for rupees_to_make,no_of_five,no_of_one and test your progra\r\nmake_amount(138,81,51)\r\nprint(\"Second input\")\r\nmake_amount(118,24,4)\r\nprint(\"Third input\")\r\nmake_amount(4,3,23)\r\n\r\n","asgnmtId":"16","SolutionFileName":"Assignment16.py","AsgnmtTyp":"A","TestcaseFileName":""}
2017-01-19 17:03:53,826 INFO  Successfully processed and prepared the input for the verify service
2017-01-19 17:03:53,827 INFO  Successfully set the request parameters for VerifySolution
2017-01-19 17:03:53,828 INFO  Invoking the service to verify the user solution
2017-01-19 17:03:53,830 INFO  Time before invoking service:Thu Jan 19 17:03:53 IST 2017
2017-01-19 17:03:53,831 INFO  Initialising service address for VerifySolution
2017-01-19 17:03:53,832 INFO  Time before invoking service In SUPER:Thu Jan 19 17:03:53 IST 2017
2017-01-19 17:03:59,152 INFO  Time after invoking service In SUPER:Thu Jan 19 17:03:59 IST 2017
2017-01-19 17:03:59,154 INFO  Service responded successfully with required details
2017-01-19 17:03:59,155 INFO  Time after invoking service:Thu Jan 19 17:03:59 IST 2017
2017-01-19 17:03:59,156 INFO  User solution successfully verified
2017-01-19 17:03:59,157 INFO  Processing the response from verify service
2017-01-19 17:03:59,161 INFO  Starting to parse JSON response
2017-01-19 17:03:59,165 ERROR Keys used to parse test result JSON might be incorrect
2017-01-19 17:03:59,166 ERROR Keys used to parse test result JSON might be incorrect
2017-01-19 17:03:59,167 ERROR Keys used to parse test result JSON might be incorrect
2017-01-19 17:03:59,168 ERROR Keys used to parse test result JSON might be incorrect
2017-01-19 17:03:59,169 ERROR Keys used to parse test result JSON might be incorrect
2017-01-19 17:03:59,170 ERROR Keys used to parse test result JSON might be incorrect
2017-01-19 17:03:59,170 ERROR Keys used to parse test result JSON might be incorrect
2017-01-19 17:03:59,171 ERROR Keys used to parse test result JSON might be incorrect
2017-01-19 17:03:59,172 ERROR Keys used to parse test result JSON might be incorrect
2017-01-19 17:03:59,173 ERROR Keys used to parse test result JSON might be incorrect
2017-01-19 17:03:59,174 INFO  Successfully parsed JSON response
2017-01-19 17:03:59,175 INFO  In the process of generating verify response in HTML
2017-01-19 17:03:59,246 INFO  Successfully generated verify response in HTML
2017-01-19 17:03:59,247 INFO  Successfully processed the response from service
2017-01-19 17:05:22,733 INFO  Setting request parameters for VerifySolution
2017-01-19 17:05:22,734 INFO  Initiating to process and prepare Input for the verify service
2017-01-19 17:05:22,735 INFO  Starting to parse the user solution
2017-01-19 17:05:22,737 INFO  Displaying user solution
2017-01-19 17:05:23,902 INFO  Successfully parsed the user solution{"CourseShortName":"PF","UserSolution":"#PF-Assgn-16\r\ndef make_amount(rupees_to_make,no_of_five,no_of_one):\r\n    five_needed=0\r\n    one_needed=0\r\n\r\n    #Start writing your code here\r\n    #Populate the variables: five_needed and one_needed\r\n    \r\n    \r\n    if rupees_to_make >= 5 :\r\n        five_needed = rupees_to_make // 5\r\n        one_needed = rupees_to_make % 5\r\n    else :\r\n        five_needed = 0\r\n    one_needed = rupees_to_make % 5\r\n    \r\n    \r\n    if  no_of_five >= five_needed and no_of_one >= one_needed : \r\n        #print(five_needed)\r\n        #print(one_needed)\r\n        print(\" No. of Five needed :\" , five_needed , \"No. of One needed :\" , one_needed)\r\n        return make_amount\r\n    elif five_needed == 0 and no_of_one >= one_needed :\r\n        #print(one_needed)\r\n        #print(five_needed)\r\n        print(\" No. of Five needed :\" , five_needed , \"No. of One needed :\" , one_needed)\r\n        return make_amount\r\n    elif five_needed < no_of_five and no_of_one >= one_needed :\r\n       #print(one_needed)\r\n        #print(five_needed)\r\n        print(\" No. of Five needed :\" , five_needed , \"No. of One needed :\" , one_needed)\r\n        return make_amount\r\n    else :\r\n        print(-1)\r\n        return make_amount\r\n#Provide different values for rupees_to_make,no_of_five,no_of_one and test your progra\r\nmake_amount(138,81,51)\r\nprint(\"Second input\")\r\nmake_amount(118,24,4)\r\nprint(\"Third input\")\r\nmake_amount(4,3,23)\r\n\r\n","asgnmtId":"16","SolutionFileName":"Assignment16.py","AsgnmtTyp":"A","TestcaseFileName":""}
2017-01-19 17:05:23,903 INFO  Successfully processed and prepared the input for the verify service
2017-01-19 17:05:23,904 INFO  Successfully set the request parameters for VerifySolution
2017-01-19 17:05:23,905 INFO  Invoking the service to verify the user solution
2017-01-19 17:05:23,906 INFO  Time before invoking service:Thu Jan 19 17:05:23 IST 2017
2017-01-19 17:05:23,908 INFO  Initialising service address for VerifySolution
2017-01-19 17:05:23,909 INFO  Time before invoking service In SUPER:Thu Jan 19 17:05:23 IST 2017
2017-01-19 17:05:26,086 INFO  Time after invoking service In SUPER:Thu Jan 19 17:05:26 IST 2017
2017-01-19 17:05:26,087 INFO  Service responded successfully with required details
2017-01-19 17:05:26,088 INFO  Time after invoking service:Thu Jan 19 17:05:26 IST 2017
2017-01-19 17:05:26,089 INFO  User solution successfully verified
2017-01-19 17:05:26,090 INFO  Processing the response from verify service
2017-01-19 17:05:26,091 INFO  Starting to parse JSON response
2017-01-19 17:05:26,093 ERROR Keys used to parse test result JSON might be incorrect
2017-01-19 17:05:26,094 ERROR Keys used to parse test result JSON might be incorrect
2017-01-19 17:05:26,094 ERROR Keys used to parse test result JSON might be incorrect
2017-01-19 17:05:26,094 ERROR Keys used to parse test result JSON might be incorrect
2017-01-19 17:05:26,095 ERROR Keys used to parse test result JSON might be incorrect
2017-01-19 17:05:26,096 ERROR Keys used to parse test result JSON might be incorrect
2017-01-19 17:05:26,097 ERROR Keys used to parse test result JSON might be incorrect
2017-01-19 17:05:26,097 ERROR Keys used to parse test result JSON might be incorrect
2017-01-19 17:05:26,098 ERROR Keys used to parse test result JSON might be incorrect
2017-01-19 17:05:26,099 ERROR Keys used to parse test result JSON might be incorrect
2017-01-19 17:05:26,099 INFO  Successfully parsed JSON response
2017-01-19 17:05:26,101 INFO  In the process of generating verify response in HTML
2017-01-19 17:05:26,180 INFO  Successfully generated verify response in HTML
2017-01-19 17:05:26,181 INFO  Successfully processed the response from service
2017-01-19 17:26:09,117 INFO  Setting request parameters for VerifySolution
2017-01-19 17:26:09,119 INFO  Initiating to process and prepare Input for the verify service
2017-01-19 17:26:09,119 INFO  Starting to parse the user solution
2017-01-19 17:26:09,121 INFO  Displaying user solution
2017-01-19 17:26:09,880 INFO  Successfully parsed the user solution{"CourseShortName":"PF","UserSolution":"#PF-Assgn-16\r\ndef make_amount(rupees_to_make,no_of_five,no_of_one):\r\n    five_needed=0\r\n    one_needed=0\r\n    five_ones =  no_of_one // 5 \r\n    no_of_five = five_ones + no_of_five\r\n\r\n    #Start writing your code here\r\n    #Populate the variables: five_needed and one_needed\r\n    five_needed = rupees_to_make // 5\r\n    one_needed = rupees_to_make % 5\r\n    if no_of_five < five_needed :\r\n        five_required = five_needed - no_of_five\r\n        five_converted_one = no_of_one // 5\r\n        if five_converted_one > five_required :\r\n            print(\"Hello\")\r\n            \r\n            \r\n\r\n\r\n    elif no_of_five >= five_needed and no_of_one >= one_needed : \r\n        print(\"1st Statement\")\r\n        print(\" No. of Five needed :\", five_needed,\"No. of One needed :\" , one_needed)\r\n        \r\n    elif five_needed == 0 and no_of_one >= one_needed :\r\n       \r\n        print(\" No. of Five needed :\", five_needed,\"No. of One needed :\" , one_needed)\r\n        \r\n    elif five_needed < no_of_five and no_of_one >= one_needed :\r\n        print(\" No. of Five needed :\", five_needed, \"No. of One needed :\" , one_needed)\r\n        \r\n    else :\r\n        print(-1)\r\n        \r\n#Provide different values for rupees_to_make,no_of_five,no_of_one and test your progra\r\nmake_amount(138,81,51)\r\nprint(\"Second input\")\r\nmake_amount(118,24,4)\r\nprint(\"Third input\")\r\nmake_amount(4,3,23)\r\nprint(\"Fourth input\")\r\nmake_amount(110,21,8)\r\n\r\n","asgnmtId":"16","SolutionFileName":"Assignment16.py","AsgnmtTyp":"A","TestcaseFileName":""}
2017-01-19 17:26:09,883 INFO  Successfully processed and prepared the input for the verify service
2017-01-19 17:26:09,885 INFO  Successfully set the request parameters for VerifySolution
2017-01-19 17:26:09,886 INFO  Invoking the service to verify the user solution
2017-01-19 17:26:09,887 INFO  Time before invoking service:Thu Jan 19 17:26:09 IST 2017
2017-01-19 17:26:09,888 INFO  Initialising service address for VerifySolution
2017-01-19 17:26:09,889 INFO  Time before invoking service In SUPER:Thu Jan 19 17:26:09 IST 2017
2017-01-19 17:26:12,439 INFO  Time after invoking service In SUPER:Thu Jan 19 17:26:12 IST 2017
2017-01-19 17:26:12,441 INFO  Service responded successfully with required details
2017-01-19 17:26:12,442 INFO  Time after invoking service:Thu Jan 19 17:26:12 IST 2017
2017-01-19 17:26:12,442 INFO  User solution successfully verified
2017-01-19 17:26:12,442 INFO  Processing the response from verify service
2017-01-19 17:26:12,446 INFO  Starting to parse JSON response
2017-01-19 17:26:12,447 ERROR Keys used to parse test result JSON might be incorrect
2017-01-19 17:26:12,448 ERROR Keys used to parse test result JSON might be incorrect
2017-01-19 17:26:12,448 ERROR Keys used to parse test result JSON might be incorrect
2017-01-19 17:26:12,449 ERROR Keys used to parse test result JSON might be incorrect
2017-01-19 17:26:12,450 ERROR Keys used to parse test result JSON might be incorrect
2017-01-19 17:26:12,450 ERROR Keys used to parse test result JSON might be incorrect
2017-01-19 17:26:12,451 ERROR Keys used to parse test result JSON might be incorrect
2017-01-19 17:26:12,452 ERROR Keys used to parse test result JSON might be incorrect
2017-01-19 17:26:12,452 ERROR Keys used to parse test result JSON might be incorrect
2017-01-19 17:26:12,453 ERROR Keys used to parse test result JSON might be incorrect
2017-01-19 17:26:12,454 INFO  Successfully parsed JSON response
2017-01-19 17:26:12,455 INFO  In the process of generating verify response in HTML
2017-01-19 17:26:12,529 INFO  Successfully generated verify response in HTML
2017-01-19 17:26:12,532 INFO  Successfully processed the response from service
2017-01-19 17:39:59,057 INFO  Setting request parameters for VerifySolution
2017-01-19 17:39:59,064 INFO  Initiating to process and prepare Input for the verify service
2017-01-19 17:39:59,065 INFO  Starting to parse the user solution
2017-01-19 17:39:59,067 INFO  Displaying user solution
2017-01-19 17:40:00,563 INFO  Successfully parsed the user solution{"CourseShortName":"PF","UserSolution":"#PF-Assgn-16\r\ndef make_amount(rupees_to_make,no_of_five,no_of_one):\r\n    five_needed=0\r\n    one_needed=0\r\n     \r\n\r\n    #Start writing your code here\r\n    #Populate the variables: five_needed and one_needed\r\n    print(no_of_five)\r\n    print(no_of_one)\r\n    five_needed = rupees_to_make // 5\r\n    print(five_needed)\r\n    print(one_needed)\r\n    one_needed = rupees_to_make % 5\r\n    \r\n    if no_of_five < five_needed :\r\n        print(\"if no_of_five < five_needed :\")\r\n        print(five_needed)\r\n        print(one_needed)\r\n        \r\n        five_required = five_needed - no_of_five\r\n        print(\"five Required\")\r\n        print(five_required)\r\n        five_converted_one = no_of_one // 5\r\n        print(\"five_converted_one\")\r\n        print(five_converted_one)\r\n        if five_converted_one >= five_required :\r\n            no_of_one = five_required * 5\r\n            print(no_of_one)\r\n            print(\" No. of Five needed :\", no_of_five,\"No. of One needed :\" , no_of_one)\r\n\r\n\r\n    elif no_of_five >= five_needed and no_of_one >= one_needed : \r\n        print(\"1st Statement\")\r\n        print(\" No. of Five needed :\", five_needed,\"No. of One needed :\" , one_needed)\r\n        \r\n    elif five_needed == 0 and no_of_one >= one_needed :\r\n       \r\n        print(\" No. of Five needed :\", five_needed,\"No. of One needed :\" , one_needed)\r\n        \r\n    elif five_needed < no_of_five and no_of_one >= one_needed :\r\n        print(\" No. of Five needed :\", five_needed, \"No. of One needed :\" , one_needed)\r\n        \r\n    else :\r\n        print(-1)\r\n        \r\n#Provide different values for rupees_to_make,no_of_five,no_of_one and test your progra\r\n\r\nmake_amount(138,81,51)\r\nprint(\"Second input\")\r\nmake_amount(118,24,4)\r\nprint(\"Third input\")\r\nmake_amount(4,3,23)\r\nprint(\"Fourth input\")\r\nmake_amount(110,21,8)\r\n\r\n","asgnmtId":"16","SolutionFileName":"Assignment16.py","AsgnmtTyp":"A","TestcaseFileName":""}
2017-01-19 17:40:00,565 INFO  Successfully processed and prepared the input for the verify service
2017-01-19 17:40:00,565 INFO  Successfully set the request parameters for VerifySolution
2017-01-19 17:40:00,568 INFO  Invoking the service to verify the user solution
2017-01-19 17:40:00,570 INFO  Time before invoking service:Thu Jan 19 17:40:00 IST 2017
2017-01-19 17:40:00,570 INFO  Initialising service address for VerifySolution
2017-01-19 17:40:00,572 INFO  Time before invoking service In SUPER:Thu Jan 19 17:40:00 IST 2017
2017-01-19 17:40:03,259 INFO  Time after invoking service In SUPER:Thu Jan 19 17:40:03 IST 2017
2017-01-19 17:40:03,260 INFO  Service responded successfully with required details
2017-01-19 17:40:03,261 INFO  Time after invoking service:Thu Jan 19 17:40:03 IST 2017
2017-01-19 17:40:03,262 INFO  User solution successfully verified
2017-01-19 17:40:03,262 INFO  Processing the response from verify service
2017-01-19 17:40:03,265 INFO  Starting to parse JSON response
2017-01-19 17:40:03,266 ERROR Keys used to parse test result JSON might be incorrect
2017-01-19 17:40:03,268 ERROR Keys used to parse test result JSON might be incorrect
2017-01-19 17:40:03,269 ERROR Keys used to parse test result JSON might be incorrect
2017-01-19 17:40:03,270 ERROR Keys used to parse test result JSON might be incorrect
2017-01-19 17:40:03,271 ERROR Keys used to parse test result JSON might be incorrect
2017-01-19 17:40:03,271 ERROR Keys used to parse test result JSON might be incorrect
2017-01-19 17:40:03,272 ERROR Keys used to parse test result JSON might be incorrect
2017-01-19 17:40:03,273 INFO  Successfully parsed JSON response
2017-01-19 17:40:03,275 INFO  In the process of generating verify response in HTML
2017-01-19 17:40:03,369 INFO  Successfully generated verify response in HTML
2017-01-19 17:40:03,371 INFO  Successfully processed the response from service
2017-01-19 17:45:45,676 INFO  Verification is not available for tryouts!!!
2017-01-19 17:46:24,885 INFO  Initiating to process and prepare Input for the submit service
2017-01-19 17:46:24,890 INFO  Displaying user solution
2017-01-19 17:46:24,892 INFO  Verify the solution before submitting
2017-01-19 17:46:24,895 ERROR Exception occured while submitting the user solution
2017-01-19 17:54:54,146 INFO  Verification is not available for tryouts!!!
2017-01-19 17:54:57,777 INFO  Initiating to process and prepare Input for the submit service
2017-01-19 17:54:57,783 INFO  Displaying user solution
2017-01-19 17:54:57,786 INFO  Verify the solution before submitting
2017-01-19 17:54:57,794 ERROR Exception occured while submitting the user solution
2017-01-19 18:48:07,976 INFO  Setting request parameters for VerifySolution
2017-01-19 18:48:07,980 INFO  Initiating to process and prepare Input for the verify service
2017-01-19 18:48:07,980 INFO  Starting to parse the user solution
2017-01-19 18:48:07,982 INFO  Displaying user solution
2017-01-19 18:48:10,434 INFO  Successfully parsed the user solution{"CourseShortName":"PF","UserSolution":"#PF-Assgn-19\r\n\r\ndef calculate_bill_amount(food_type,quantity_ordered,distance_in_kms):\r\n    bill_amount=0\r\n    food_plate = 0\r\n    overall_charge = 0\r\n    delivery_charge = 0\r\n    #write your logic here\r\n    \r\n    \r\n    \r\n    if food_type != \"N\" or food_type != \"V\" or quantity_ordered < 1 or distance_in_kms < 1 :\r\n        bill_amount = -1\r\n        \r\n    if distance_in_kms <= 3 :\r\n        delivery_charge = 0\r\n        overall_charge = delivery_charge\r\n        \r\n    elif distance_in_kms > 3 and distance_in_kms <= 6 :\r\n        delivery_charge = 3\r\n        distance_in_kms = distance_in_kms - 3\r\n        overall_charge = distance_in_kms * 3\r\n    \r\n    else :\r\n        \r\n        distance_in_kms = distance_in_kms - 3\r\n        remaining_lastDistance = 0\r\n        first_delivery_charge = 0\r\n        remaining_delivery_charge = 0\r\n        \r\n        extra_distance = distance_in_kms\r\n        \r\n        if distance_in_kms > 3 :\r\n            #first_distance_cut = distance_in_kms\r\n            first_delivery_charge = 3 * 3\r\n            remaining_lastDistance = distance_in_kms - 3\r\n            remaining_delivery_charge = remaining_lastDistance * 6\r\n        \r\n        else :\r\n            remaining_delivery_charge = distance_in_kms * 3\r\n        #first_delivery_charge = 6 * 3\r\n        #remaining_distance = distance_in_kms - 6\r\n            \r\n        overall_charge = first_delivery_charge + remaining_delivery_charge\r\n        \r\n        \r\n        \r\n    if food_type == \"N\" :\r\n        food_plate = 150\r\n        bill_amount = food_plate * quantity_ordered + overall_charge\r\n        \r\n    else :\r\n        food_plate = 120\r\n        bill_amount = food_plate * quantity_ordered + overall_charge\r\n\r\n\r\n    return bill_amount\r\n\r\n#Provide different values for food_type,quantity_ordered,distance_in_kms and test your program\r\nbill_amount=calculate_bill_amount(\"N\",2,7)\r\nprint(bill_amount)\r\n","asgnmtId":"19","SolutionFileName":"Assignment19.py","AsgnmtTyp":"A","TestcaseFileName":""}
2017-01-19 18:48:10,436 INFO  Successfully processed and prepared the input for the verify service
2017-01-19 18:48:10,439 INFO  Successfully set the request parameters for VerifySolution
2017-01-19 18:48:10,440 INFO  Invoking the service to verify the user solution
2017-01-19 18:48:10,441 INFO  Time before invoking service:Thu Jan 19 18:48:10 IST 2017
2017-01-19 18:48:10,441 INFO  Initialising service address for VerifySolution
2017-01-19 18:48:10,443 INFO  Time before invoking service In SUPER:Thu Jan 19 18:48:10 IST 2017
2017-01-19 18:48:12,761 INFO  Time after invoking service In SUPER:Thu Jan 19 18:48:12 IST 2017
2017-01-19 18:48:12,762 INFO  Service responded successfully with required details
2017-01-19 18:48:12,763 INFO  Time after invoking service:Thu Jan 19 18:48:12 IST 2017
2017-01-19 18:48:12,763 INFO  User solution successfully verified
2017-01-19 18:48:12,764 INFO  Processing the response from verify service
2017-01-19 18:48:12,767 INFO  Starting to parse JSON response
2017-01-19 18:48:12,768 ERROR Keys used to parse test result JSON might be incorrect
2017-01-19 18:48:12,769 ERROR Keys used to parse test result JSON might be incorrect
2017-01-19 18:48:12,769 ERROR Keys used to parse test result JSON might be incorrect
2017-01-19 18:48:12,770 ERROR Keys used to parse test result JSON might be incorrect
2017-01-19 18:48:12,770 ERROR Keys used to parse test result JSON might be incorrect
2017-01-19 18:48:12,771 ERROR Keys used to parse test result JSON might be incorrect
2017-01-19 18:48:12,771 ERROR Keys used to parse test result JSON might be incorrect
2017-01-19 18:48:12,772 ERROR Keys used to parse test result JSON might be incorrect
2017-01-19 18:48:12,773 INFO  Successfully parsed JSON response
2017-01-19 18:48:12,774 INFO  In the process of generating verify response in HTML
2017-01-19 18:48:12,877 INFO  Successfully generated verify response in HTML
2017-01-19 18:48:12,878 INFO  Successfully processed the response from service
2017-01-19 18:48:49,929 INFO  Setting request parameters for VerifySolution
2017-01-19 18:48:49,932 INFO  Initiating to process and prepare Input for the verify service
2017-01-19 18:48:49,933 INFO  Starting to parse the user solution
2017-01-19 18:48:49,934 INFO  Displaying user solution
2017-01-19 18:48:51,505 INFO  Successfully parsed the user solution{"CourseShortName":"PF","UserSolution":"#PF-Assgn-19\r\n\r\ndef calculate_bill_amount(food_type,quantity_ordered,distance_in_kms):\r\n    bill_amount=0\r\n    food_plate = 0\r\n    overall_charge = 0\r\n    delivery_charge = 0\r\n    #write your logic here\r\n    \r\n    \r\n    \r\n    if food_type != \"N\" and food_type != \"V\" or quantity_ordered < 1 or distance_in_kms < 1 :\r\n        bill_amount = -1\r\n        \r\n    if distance_in_kms <= 3 :\r\n        delivery_charge = 0\r\n        overall_charge = delivery_charge\r\n        \r\n    elif distance_in_kms > 3 and distance_in_kms <= 6 :\r\n        delivery_charge = 3\r\n        distance_in_kms = distance_in_kms - 3\r\n        overall_charge = distance_in_kms * 3\r\n    \r\n    else :\r\n        \r\n        distance_in_kms = distance_in_kms - 3\r\n        remaining_lastDistance = 0\r\n        first_delivery_charge = 0\r\n        remaining_delivery_charge = 0\r\n        \r\n        extra_distance = distance_in_kms\r\n        \r\n        if distance_in_kms > 3 :\r\n            #first_distance_cut = distance_in_kms\r\n            first_delivery_charge = 3 * 3\r\n            remaining_lastDistance = distance_in_kms - 3\r\n            remaining_delivery_charge = remaining_lastDistance * 6\r\n        \r\n        else :\r\n            remaining_delivery_charge = distance_in_kms * 3\r\n        #first_delivery_charge = 6 * 3\r\n        #remaining_distance = distance_in_kms - 6\r\n            \r\n        overall_charge = first_delivery_charge + remaining_delivery_charge\r\n        \r\n        \r\n        \r\n    if food_type == \"N\" :\r\n        food_plate = 150\r\n        bill_amount = food_plate * quantity_ordered + overall_charge\r\n        \r\n    else :\r\n        food_plate = 120\r\n        bill_amount = food_plate * quantity_ordered + overall_charge\r\n\r\n\r\n    return bill_amount\r\n\r\n#Provide different values for food_type,quantity_ordered,distance_in_kms and test your program\r\nbill_amount=calculate_bill_amount(\"N\",2,7)\r\nprint(bill_amount)\r\n","asgnmtId":"19","SolutionFileName":"Assignment19.py","AsgnmtTyp":"A","TestcaseFileName":""}
2017-01-19 18:48:51,507 INFO  Successfully processed and prepared the input for the verify service
2017-01-19 18:48:51,507 INFO  Successfully set the request parameters for VerifySolution
2017-01-19 18:48:51,507 INFO  Invoking the service to verify the user solution
2017-01-19 18:48:51,508 INFO  Time before invoking service:Thu Jan 19 18:48:51 IST 2017
2017-01-19 18:48:51,509 INFO  Initialising service address for VerifySolution
2017-01-19 18:48:51,509 INFO  Time before invoking service In SUPER:Thu Jan 19 18:48:51 IST 2017
2017-01-19 18:48:53,576 INFO  Time after invoking service In SUPER:Thu Jan 19 18:48:53 IST 2017
2017-01-19 18:48:53,577 INFO  Service responded successfully with required details
2017-01-19 18:48:53,578 INFO  Time after invoking service:Thu Jan 19 18:48:53 IST 2017
2017-01-19 18:48:53,579 INFO  User solution successfully verified
2017-01-19 18:48:53,580 INFO  Processing the response from verify service
2017-01-19 18:48:53,581 INFO  Starting to parse JSON response
2017-01-19 18:48:53,582 ERROR Keys used to parse test result JSON might be incorrect
2017-01-19 18:48:53,582 ERROR Keys used to parse test result JSON might be incorrect
2017-01-19 18:48:53,583 ERROR Keys used to parse test result JSON might be incorrect
2017-01-19 18:48:53,584 ERROR Keys used to parse test result JSON might be incorrect
2017-01-19 18:48:53,584 ERROR Keys used to parse test result JSON might be incorrect
2017-01-19 18:48:53,585 ERROR Keys used to parse test result JSON might be incorrect
2017-01-19 18:48:53,585 ERROR Keys used to parse test result JSON might be incorrect
2017-01-19 18:48:53,586 ERROR Keys used to parse test result JSON might be incorrect
2017-01-19 18:48:53,587 INFO  Successfully parsed JSON response
2017-01-19 18:48:53,589 INFO  In the process of generating verify response in HTML
2017-01-19 18:48:53,665 INFO  Successfully generated verify response in HTML
2017-01-19 18:48:53,666 INFO  Successfully processed the response from service
2017-01-19 18:49:37,465 INFO  Setting request parameters for VerifySolution
2017-01-19 18:49:37,467 INFO  Initiating to process and prepare Input for the verify service
2017-01-19 18:49:37,469 INFO  Starting to parse the user solution
2017-01-19 18:49:37,470 INFO  Displaying user solution
2017-01-19 18:49:38,797 INFO  Successfully parsed the user solution{"CourseShortName":"PF","UserSolution":"#PF-Assgn-19\r\n\r\ndef calculate_bill_amount(food_type,quantity_ordered,distance_in_kms):\r\n    bill_amount=0\r\n    food_plate = 0\r\n    overall_charge = 0\r\n    delivery_charge = 0\r\n    #write your logic here\r\n    \r\n    \r\n    \r\n    if food_type != \"N\" and food_type != \"V\" or quantity_ordered < 1 or distance_in_kms < 1 :\r\n        bill_amount = -1\r\n        \r\n    if quantity_ordered < 1 or distance_in_kms < 1 :\r\n        bill_amount = -1    \r\n    \r\n    if distance_in_kms <= 3 :\r\n        delivery_charge = 0\r\n        overall_charge = delivery_charge\r\n        \r\n    elif distance_in_kms > 3 and distance_in_kms <= 6 :\r\n        delivery_charge = 3\r\n        distance_in_kms = distance_in_kms - 3\r\n        overall_charge = distance_in_kms * 3\r\n    \r\n    else :\r\n        \r\n        distance_in_kms = distance_in_kms - 3\r\n        remaining_lastDistance = 0\r\n        first_delivery_charge = 0\r\n        remaining_delivery_charge = 0\r\n        \r\n        extra_distance = distance_in_kms\r\n        \r\n        if distance_in_kms > 3 :\r\n            #first_distance_cut = distance_in_kms\r\n            first_delivery_charge = 3 * 3\r\n            remaining_lastDistance = distance_in_kms - 3\r\n            remaining_delivery_charge = remaining_lastDistance * 6\r\n        \r\n        else :\r\n            remaining_delivery_charge = distance_in_kms * 3\r\n        #first_delivery_charge = 6 * 3\r\n        #remaining_distance = distance_in_kms - 6\r\n            \r\n        overall_charge = first_delivery_charge + remaining_delivery_charge\r\n        \r\n        \r\n        \r\n    if food_type == \"N\" :\r\n        food_plate = 150\r\n        bill_amount = food_plate * quantity_ordered + overall_charge\r\n        \r\n    else :\r\n        food_plate = 120\r\n        bill_amount = food_plate * quantity_ordered + overall_charge\r\n\r\n\r\n    return bill_amount\r\n\r\n#Provide different values for food_type,quantity_ordered,distance_in_kms and test your program\r\nbill_amount=calculate_bill_amount(\"N\",2,7)\r\nprint(bill_amount)\r\n","asgnmtId":"19","SolutionFileName":"Assignment19.py","AsgnmtTyp":"A","TestcaseFileName":""}
2017-01-19 18:49:38,799 INFO  Successfully processed and prepared the input for the verify service
2017-01-19 18:49:38,800 INFO  Successfully set the request parameters for VerifySolution
2017-01-19 18:49:38,801 INFO  Invoking the service to verify the user solution
2017-01-19 18:49:38,802 INFO  Time before invoking service:Thu Jan 19 18:49:38 IST 2017
2017-01-19 18:49:38,802 INFO  Initialising service address for VerifySolution
2017-01-19 18:49:38,802 INFO  Time before invoking service In SUPER:Thu Jan 19 18:49:38 IST 2017
2017-01-19 18:49:40,944 INFO  Time after invoking service In SUPER:Thu Jan 19 18:49:40 IST 2017
2017-01-19 18:49:40,945 INFO  Service responded successfully with required details
2017-01-19 18:49:40,948 INFO  Time after invoking service:Thu Jan 19 18:49:40 IST 2017
2017-01-19 18:49:40,949 INFO  User solution successfully verified
2017-01-19 18:49:40,950 INFO  Processing the response from verify service
2017-01-19 18:49:40,951 INFO  Starting to parse JSON response
2017-01-19 18:49:40,952 ERROR Keys used to parse test result JSON might be incorrect
2017-01-19 18:49:40,953 ERROR Keys used to parse test result JSON might be incorrect
2017-01-19 18:49:40,953 ERROR Keys used to parse test result JSON might be incorrect
2017-01-19 18:49:40,954 ERROR Keys used to parse test result JSON might be incorrect
2017-01-19 18:49:40,954 ERROR Keys used to parse test result JSON might be incorrect
2017-01-19 18:49:40,955 ERROR Keys used to parse test result JSON might be incorrect
2017-01-19 18:49:40,955 ERROR Keys used to parse test result JSON might be incorrect
2017-01-19 18:49:40,956 ERROR Keys used to parse test result JSON might be incorrect
2017-01-19 18:49:40,956 INFO  Successfully parsed JSON response
2017-01-19 18:49:40,958 INFO  In the process of generating verify response in HTML
2017-01-19 18:49:41,047 INFO  Successfully generated verify response in HTML
2017-01-19 18:49:41,048 INFO  Successfully processed the response from service
2017-01-19 18:49:51,711 INFO  Setting request parameters for VerifySolution
2017-01-19 18:49:51,712 INFO  Initiating to process and prepare Input for the verify service
2017-01-19 18:49:51,713 INFO  Starting to parse the user solution
2017-01-19 18:49:51,715 INFO  Displaying user solution
2017-01-19 18:49:51,719 INFO   User Solution is unchanged since the last verification.
2017-01-19 18:49:51,725 INFO  Problem in processing and preparing Input for the verify service
2017-01-19 18:50:37,290 INFO  Setting request parameters for VerifySolution
2017-01-19 18:50:37,295 INFO  Initiating to process and prepare Input for the verify service
2017-01-19 18:50:37,296 INFO  Starting to parse the user solution
2017-01-19 18:50:37,297 INFO  Displaying user solution
2017-01-19 18:50:37,936 INFO  Successfully parsed the user solution{"CourseShortName":"PF","UserSolution":"#PF-Assgn-19\r\n\r\ndef calculate_bill_amount(food_type,quantity_ordered,distance_in_kms):\r\n    bill_amount=0\r\n    food_plate = 0\r\n    overall_charge = 0\r\n    delivery_charge = 0\r\n    #write your logic here\r\n    \r\n    \r\n    \r\n    if food_type != \"N\" and food_type != \"V\" or quantity_ordered < 1 or distance_in_kms < 1 :\r\n        bill_amount = -1\r\n        \r\n        \r\n    if quantity_ordered < 1 or distance_in_kms < 1 :\r\n        bill_amount = -1 \r\n         \r\n         \r\n    if distance_in_kms <= 3 :\r\n        delivery_charge = 0\r\n        overall_charge = delivery_charge\r\n        \r\n    elif distance_in_kms > 3 and distance_in_kms <= 6 :\r\n        delivery_charge = 3\r\n        distance_in_kms = distance_in_kms - 3\r\n        overall_charge = distance_in_kms * 3\r\n    \r\n    else :\r\n        \r\n        distance_in_kms = distance_in_kms - 3\r\n        remaining_lastDistance = 0\r\n        first_delivery_charge = 0\r\n        remaining_delivery_charge = 0\r\n        \r\n        extra_distance = distance_in_kms\r\n        \r\n        if distance_in_kms > 3 :\r\n            #first_distance_cut = distance_in_kms\r\n            first_delivery_charge = 3 * 3\r\n            remaining_lastDistance = distance_in_kms - 3\r\n            remaining_delivery_charge = remaining_lastDistance * 6\r\n        \r\n        else :\r\n            remaining_delivery_charge = distance_in_kms * 3\r\n        #first_delivery_charge = 6 * 3\r\n        #remaining_distance = distance_in_kms - 6\r\n            \r\n        overall_charge = first_delivery_charge + remaining_delivery_charge\r\n        \r\n        \r\n        \r\n    if food_type == \"N\" :\r\n        food_plate = 150\r\n        bill_amount = food_plate * quantity_ordered + overall_charge\r\n        \r\n    else :\r\n        food_plate = 120\r\n        bill_amount = food_plate * quantity_ordered + overall_charge\r\n\r\n\r\n    return bill_amount\r\n\r\n#Provide different values for food_type,quantity_ordered,distance_in_kms and test your program\r\nbill_amount=calculate_bill_amount(\"N\",2,7)\r\nprint(bill_amount)\r\n","asgnmtId":"19","SolutionFileName":"Assignment19.py","AsgnmtTyp":"A","TestcaseFileName":""}
2017-01-19 18:50:37,938 INFO  Successfully processed and prepared the input for the verify service
2017-01-19 18:50:37,938 INFO  Successfully set the request parameters for VerifySolution
2017-01-19 18:50:37,939 INFO  Invoking the service to verify the user solution
2017-01-19 18:50:37,940 INFO  Time before invoking service:Thu Jan 19 18:50:37 IST 2017
2017-01-19 18:50:37,940 INFO  Initialising service address for VerifySolution
2017-01-19 18:50:37,941 INFO  Time before invoking service In SUPER:Thu Jan 19 18:50:37 IST 2017
2017-01-19 18:50:39,745 INFO  Time after invoking service In SUPER:Thu Jan 19 18:50:39 IST 2017
2017-01-19 18:50:39,746 INFO  Service responded successfully with required details
2017-01-19 18:50:39,747 INFO  Time after invoking service:Thu Jan 19 18:50:39 IST 2017
2017-01-19 18:50:39,747 INFO  User solution successfully verified
2017-01-19 18:50:39,748 INFO  Processing the response from verify service
2017-01-19 18:50:39,751 INFO  Starting to parse JSON response
2017-01-19 18:50:39,752 ERROR Keys used to parse test result JSON might be incorrect
2017-01-19 18:50:39,753 ERROR Keys used to parse test result JSON might be incorrect
2017-01-19 18:50:39,753 ERROR Keys used to parse test result JSON might be incorrect
2017-01-19 18:50:39,754 ERROR Keys used to parse test result JSON might be incorrect
2017-01-19 18:50:39,754 ERROR Keys used to parse test result JSON might be incorrect
2017-01-19 18:50:39,755 ERROR Keys used to parse test result JSON might be incorrect
2017-01-19 18:50:39,756 ERROR Keys used to parse test result JSON might be incorrect
2017-01-19 18:50:39,756 ERROR Keys used to parse test result JSON might be incorrect
2017-01-19 18:50:39,757 INFO  Successfully parsed JSON response
2017-01-19 18:50:39,758 INFO  In the process of generating verify response in HTML
2017-01-19 18:50:39,835 INFO  Successfully generated verify response in HTML
2017-01-19 18:50:39,836 INFO  Successfully processed the response from service
2017-01-19 18:51:18,684 INFO  Setting request parameters for VerifySolution
2017-01-19 18:51:18,687 INFO  Initiating to process and prepare Input for the verify service
2017-01-19 18:51:18,690 INFO  Starting to parse the user solution
2017-01-19 18:51:18,692 INFO  Displaying user solution
2017-01-19 18:51:19,301 INFO  Successfully parsed the user solution{"CourseShortName":"PF","UserSolution":"#PF-Assgn-19\r\n\r\ndef calculate_bill_amount(food_type,quantity_ordered,distance_in_kms):\r\n    bill_amount=0\r\n    food_plate = 0\r\n    overall_charge = 0\r\n    delivery_charge = 0\r\n    #write your logic here\r\n    \r\n    \r\n    \r\n    if food_type != \"N\" and food_type != \"V\" :\r\n        bill_amount = -1\r\n        \r\n        \r\n    if quantity_ordered < 1 or distance_in_kms <= 0 :\r\n        bill_amount = -1 \r\n         \r\n         \r\n    if distance_in_kms <= 3 :\r\n        delivery_charge = 0\r\n        overall_charge = delivery_charge\r\n        \r\n    elif distance_in_kms > 3 and distance_in_kms <= 6 :\r\n        delivery_charge = 3\r\n        distance_in_kms = distance_in_kms - 3\r\n        overall_charge = distance_in_kms * 3\r\n    \r\n    else :\r\n        \r\n        distance_in_kms = distance_in_kms - 3\r\n        remaining_lastDistance = 0\r\n        first_delivery_charge = 0\r\n        remaining_delivery_charge = 0\r\n        \r\n        extra_distance = distance_in_kms\r\n        \r\n        if distance_in_kms > 3 :\r\n            #first_distance_cut = distance_in_kms\r\n            first_delivery_charge = 3 * 3\r\n            remaining_lastDistance = distance_in_kms - 3\r\n            remaining_delivery_charge = remaining_lastDistance * 6\r\n        \r\n        else :\r\n            remaining_delivery_charge = distance_in_kms * 3\r\n        #first_delivery_charge = 6 * 3\r\n        #remaining_distance = distance_in_kms - 6\r\n            \r\n        overall_charge = first_delivery_charge + remaining_delivery_charge\r\n        \r\n        \r\n        \r\n    if food_type == \"N\" :\r\n        food_plate = 150\r\n        bill_amount = food_plate * quantity_ordered + overall_charge\r\n        \r\n    else :\r\n        food_plate = 120\r\n        bill_amount = food_plate * quantity_ordered + overall_charge\r\n\r\n\r\n    return bill_amount\r\n\r\n#Provide different values for food_type,quantity_ordered,distance_in_kms and test your program\r\nbill_amount=calculate_bill_amount(\"N\",2,7)\r\nprint(bill_amount)\r\n","asgnmtId":"19","SolutionFileName":"Assignment19.py","AsgnmtTyp":"A","TestcaseFileName":""}
2017-01-19 18:51:19,302 INFO  Successfully processed and prepared the input for the verify service
2017-01-19 18:51:19,304 INFO  Successfully set the request parameters for VerifySolution
2017-01-19 18:51:19,305 INFO  Invoking the service to verify the user solution
2017-01-19 18:51:19,306 INFO  Time before invoking service:Thu Jan 19 18:51:19 IST 2017
2017-01-19 18:51:19,307 INFO  Initialising service address for VerifySolution
2017-01-19 18:51:19,308 INFO  Time before invoking service In SUPER:Thu Jan 19 18:51:19 IST 2017
2017-01-19 18:51:21,103 INFO  Time after invoking service In SUPER:Thu Jan 19 18:51:21 IST 2017
2017-01-19 18:51:21,104 INFO  Service responded successfully with required details
2017-01-19 18:51:21,104 INFO  Time after invoking service:Thu Jan 19 18:51:21 IST 2017
2017-01-19 18:51:21,105 INFO  User solution successfully verified
2017-01-19 18:51:21,106 INFO  Processing the response from verify service
2017-01-19 18:51:21,108 INFO  Starting to parse JSON response
2017-01-19 18:51:21,112 ERROR Keys used to parse test result JSON might be incorrect
2017-01-19 18:51:21,113 ERROR Keys used to parse test result JSON might be incorrect
2017-01-19 18:51:21,114 ERROR Keys used to parse test result JSON might be incorrect
2017-01-19 18:51:21,114 ERROR Keys used to parse test result JSON might be incorrect
2017-01-19 18:51:21,115 ERROR Keys used to parse test result JSON might be incorrect
2017-01-19 18:51:21,116 ERROR Keys used to parse test result JSON might be incorrect
2017-01-19 18:51:21,116 ERROR Keys used to parse test result JSON might be incorrect
2017-01-19 18:51:21,117 ERROR Keys used to parse test result JSON might be incorrect
2017-01-19 18:51:21,117 INFO  Successfully parsed JSON response
2017-01-19 18:51:21,120 INFO  In the process of generating verify response in HTML
2017-01-19 18:51:21,192 INFO  Successfully generated verify response in HTML
2017-01-19 18:51:21,193 INFO  Successfully processed the response from service
2017-01-19 19:03:54,663 INFO  Setting request parameters for VerifySolution
2017-01-19 19:03:54,668 INFO  Initiating to process and prepare Input for the verify service
2017-01-19 19:03:54,669 INFO  Starting to parse the user solution
2017-01-19 19:03:54,670 INFO  Displaying user solution
2017-01-19 19:03:55,770 INFO  Successfully parsed the user solution{"CourseShortName":"PF","UserSolution":"#PF-Assgn-19\r\n\r\ndef calculate_bill_amount(food_type,quantity_ordered,distance_in_kms):\r\n    bill_amount=0\r\n    food_plate = 0\r\n    overall_charge = 0\r\n    delivery_charge = 0\r\n    #write your logic here\r\n    \r\n    print(\"hello3\")\r\n    if food_type != \"N\" and food_type != \"V\" or quantity_ordered < 1 or distance_in_kms <= 0 :\r\n        print(\"hello2\")\r\n        bill_amount = -1\r\n        return bill_amount\r\n        \r\n    else :\r\n        print(\"hello\")\r\n        if distance_in_kms <= 3 :\r\n            print(\"hello\")\r\n            delivery_charge = 0\r\n            overall_charge = delivery_charge\r\n        \r\n        elif distance_in_kms > 3 and distance_in_kms <= 6 :\r\n            \r\n            delivery_charge = 3\r\n            distance_in_kms = distance_in_kms - 3\r\n            overall_charge = distance_in_kms * 3\r\n    \r\n        else :\r\n            print(\"hello5\")\r\n            distance_in_kms = distance_in_kms - 3\r\n            remaining_lastDistance = 0\r\n            first_delivery_charge = 0\r\n            remaining_delivery_charge = 0\r\n        \r\n            extra_distance = distance_in_kms\r\n        \r\n            if distance_in_kms > 3 :\r\n                print(\"hello6\")\r\n                #first_distance_cut = distance_in_kms\r\n                first_delivery_charge = 3 * 3\r\n                remaining_lastDistance = distance_in_kms - 3\r\n                remaining_delivery_charge = remaining_lastDistance * 6\r\n                \r\n        \r\n            else :\r\n                    \r\n                    remaining_delivery_charge = distance_in_kms * 3\r\n                    #first_delivery_charge = 6 * 3\r\n                    #remaining_distance = distance_in_kms - 6\r\n            \r\n            print(\"Overall Charge\")\r\n            overall_charge = first_delivery_charge + remaining_delivery_charge\r\n            print(overall_charge)\r\n        \r\n        \r\n        \r\n        if food_type == \"N\" :\r\n            food_plate = 150\r\n            bill_amount = food_plate * quantity_ordered + overall_charge\r\n        \r\n        else :           \r\n            food_plate = 120\r\n            bill_amount = food_plate * quantity_ordered + overall_charge\r\n\r\n                        \r\n                        \r\n                        \r\n    return bill_amount\r\n\r\n#Provide different values for food_type,quantity_ordered,distance_in_kms and test your program\r\nbill_amount=calculate_bill_amount(\"N\",2,7)\r\nprint(bill_amount)\r\n","asgnmtId":"19","SolutionFileName":"Assignment19.py","AsgnmtTyp":"A","TestcaseFileName":""}
2017-01-19 19:03:55,771 INFO  Successfully processed and prepared the input for the verify service
2017-01-19 19:03:55,772 INFO  Successfully set the request parameters for VerifySolution
2017-01-19 19:03:55,772 INFO  Invoking the service to verify the user solution
2017-01-19 19:03:55,773 INFO  Time before invoking service:Thu Jan 19 19:03:55 IST 2017
2017-01-19 19:03:55,774 INFO  Initialising service address for VerifySolution
2017-01-19 19:03:55,775 INFO  Time before invoking service In SUPER:Thu Jan 19 19:03:55 IST 2017
2017-01-19 19:03:57,736 INFO  Time after invoking service In SUPER:Thu Jan 19 19:03:57 IST 2017
2017-01-19 19:03:57,741 INFO  Service responded successfully with required details
2017-01-19 19:03:57,742 INFO  Time after invoking service:Thu Jan 19 19:03:57 IST 2017
2017-01-19 19:03:57,743 INFO  User solution successfully verified
2017-01-19 19:03:57,743 INFO  Processing the response from verify service
2017-01-19 19:03:57,751 INFO  Starting to parse JSON response
2017-01-19 19:03:57,752 ERROR Keys used to parse test result JSON might be incorrect
2017-01-19 19:03:57,753 ERROR Keys used to parse test result JSON might be incorrect
2017-01-19 19:03:57,754 ERROR Keys used to parse test result JSON might be incorrect
2017-01-19 19:03:57,754 ERROR Keys used to parse test result JSON might be incorrect
2017-01-19 19:03:57,755 ERROR Keys used to parse test result JSON might be incorrect
2017-01-19 19:03:57,755 ERROR Keys used to parse test result JSON might be incorrect
2017-01-19 19:03:57,756 ERROR Keys used to parse test result JSON might be incorrect
2017-01-19 19:03:57,756 ERROR Keys used to parse test result JSON might be incorrect
2017-01-19 19:03:57,757 ERROR Keys used to parse test result JSON might be incorrect
2017-01-19 19:03:57,757 ERROR Keys used to parse test result JSON might be incorrect
2017-01-19 19:03:57,758 INFO  Successfully parsed JSON response
2017-01-19 19:03:57,759 INFO  In the process of generating verify response in HTML
2017-01-19 19:03:57,863 INFO  Successfully generated verify response in HTML
2017-01-19 19:03:57,864 INFO  Successfully processed the response from service
2017-01-19 19:47:09,140 INFO  Initiating to process and prepare Input for the submit service
2017-01-19 19:47:09,146 INFO  Displaying user solution
2017-01-19 19:47:09,171 INFO  Successfully processed and prepared the input for the submit service
2017-01-19 19:47:09,172 INFO  Invoking the service to submit the user solution
2017-01-19 19:47:09,172 INFO  Initialising service address for Submit
2017-01-19 19:47:09,173 INFO  Time before invoking service In SUPER:Thu Jan 19 19:47:09 IST 2017
2017-01-19 19:47:09,419 INFO  Time after invoking service In SUPER:Thu Jan 19 19:47:09 IST 2017
2017-01-19 19:47:09,420 INFO  Service responded successfully with required details
2017-01-19 19:47:09,421 INFO  User solution successfully submitted
2017-01-19 19:47:09,422 INFO  Displaying submission status
2017-01-19 19:47:09,422 INFO  Displayed submission status successfullySuccessfully Submitted!
2017-01-19 21:20:30,053 INFO  Loading Baseframework Plugin
2017-01-19 21:20:30,364 INFO  Initializing the platform to load the Menu - HandsOn
2017-01-19 21:20:31,359 INFO  Loading the Menu - HandsOn
2017-01-19 21:20:31,478 INFO  Successfully loaded the Menu - HandsOn
2017-01-19 21:38:34,226 INFO  Loading Programming Assignment Plugin
2017-01-19 21:38:34,504 INFO  Setting request parameters for VerifySolution
2017-01-19 21:38:34,506 INFO  Initiating to process and prepare Input for the verify service
2017-01-19 21:38:34,510 INFO  Starting to parse the user solution
2017-01-19 21:38:34,511 INFO  Displaying user solution
2017-01-19 21:38:35,246 INFO  Successfully parsed the user solution{"CourseShortName":"PF","UserSolution":"#PF-Assgn-20\r\n\r\ndef calculate_loan(account_number,salary,account_balance,loan_type,loan_amount_expected,customer_emi_expected):\r\n    eligible_loan_amount=0\r\n    bank_emi_expected=0\r\n    eligible_loan_amount=0\r\n    approved = 0\r\n    #Start writing your code here\r\n    \r\n    \r\n    \r\n    #Populate the variables: eligible_loan_amount and bank_emi_expected \r\n \r\n    #Use the below given print statements to display the output, in case of success\r\n    #print(\"Account number:\", account_number) \r\n    #print(\"The customer can avail the amount of Rs.\", eligible_loan_amount)\r\n    #print(\"Eligible EMIs :\", bank_emi_expected)\r\n    #print(\"Requested loan amount:\", loan_amount_expected)\r\n    #print(\"Requested EMI's:\",customer_emi_expected)\r\n    \r\n    #Use the below given print statements to display the output, in case of invalid data.\r\n    #print(\"Insufficient account balance\")\r\n    #print(\"The customer is not eligible for the loan\")\r\n    #print(\"Invalid account number\")\r\n    #print(\"Invalid loan type or salary\")\r\n    # Also, do not modify the above print statements for verification to work\r\n    \r\n    \r\n    if loan_type == \"Car\" and salary > 25000 and salary <= 49999 :\r\n        eligible_loan_amount = 500000\r\n        bank_emi_expected = 36\r\n        approved = 1\r\n         \r\n       \r\n    elif loan_type == \"House\" and salary >= 50000 and salary <= 74999 :\r\n        eligible_loan_amount = 6000000\r\n        bank_emi_expected = 60\r\n        approved = 1\r\n    \r\n    elif loan_type == \"Business\" and salary >= 75000  :\r\n        eligible_loan_amount = 7500000\r\n        bank_emi_expected = 84\r\n        approved = 1\r\n         \r\n         \r\n         \r\n         \r\n    if approved == 1 :\r\n        if account_number > 1000 and account_number <= 1999 :\r\n            if account_balance >= 100000 :\r\n                if loan_amount_expected <= eligible_loan_amount and customer_emi_expected <= bank_emi_expected :\r\n                    print(\"Account Number\" , account_number)\r\n                    print(\"Account Balance\" , account_balance)\r\n                    print(\"Bank Loan\" , eligible_loan_amount)\r\n                    print(\"Bank Emi\" , bank_emi_expected)\r\n                    print(\"Customer Requested Loan\", loan_amount_expected )\r\n                    print(\"Customer Requested EMI\" , customer_emi_expected)\r\n                else :\r\n                    print(\"Loan Amount & EMI not compatible\")\r\n            else :\r\n                print(\"Account Balance less than 1 Lakh\")\r\n                \r\n        else :\r\n            print(\"Account number not in bounds of 1000 to 1999\")\r\n            \r\n    else :\r\n        print(\"Loan not approved in certain bounds of Loan type\")\r\n#Test your code for different values and observe the results\r\ncalculate_loan(1001,40000,250000,\"Car\",300000,30)\r\n","asgnmtId":"20","SolutionFileName":"Assignment20.py","AsgnmtTyp":"A","TestcaseFileName":""}
2017-01-19 21:38:35,247 INFO  Successfully processed and prepared the input for the verify service
2017-01-19 21:38:35,252 INFO  Successfully set the request parameters for VerifySolution
2017-01-19 21:38:35,254 INFO  Invoking the service to verify the user solution
2017-01-19 21:38:35,255 INFO  Time before invoking service:Thu Jan 19 21:38:35 IST 2017
2017-01-19 21:38:35,256 INFO  Initialising service address for VerifySolution
2017-01-19 21:38:35,257 INFO  Time before invoking service In SUPER:Thu Jan 19 21:38:35 IST 2017
2017-01-19 21:38:37,783 INFO  Time after invoking service In SUPER:Thu Jan 19 21:38:37 IST 2017
2017-01-19 21:38:37,784 INFO  Service responded successfully with required details
2017-01-19 21:38:37,784 INFO  Time after invoking service:Thu Jan 19 21:38:37 IST 2017
2017-01-19 21:38:37,785 INFO  User solution successfully verified
2017-01-19 21:38:37,786 INFO  Processing the response from verify service
2017-01-19 21:38:37,788 INFO  Starting to parse JSON response
2017-01-19 21:38:37,792 ERROR Keys used to parse test result JSON might be incorrect
2017-01-19 21:38:37,792 ERROR Keys used to parse test result JSON might be incorrect
2017-01-19 21:38:37,793 ERROR Keys used to parse test result JSON might be incorrect
2017-01-19 21:38:37,793 ERROR Keys used to parse test result JSON might be incorrect
2017-01-19 21:38:37,794 ERROR Keys used to parse test result JSON might be incorrect
2017-01-19 21:38:37,794 ERROR Keys used to parse test result JSON might be incorrect
2017-01-19 21:38:37,795 ERROR Keys used to parse test result JSON might be incorrect
2017-01-19 21:38:37,796 INFO  Successfully parsed JSON response
2017-01-19 21:38:37,798 INFO  In the process of generating verify response in HTML
2017-01-19 21:38:38,029 INFO  Successfully generated verify response in HTML
2017-01-19 21:38:38,031 INFO  Successfully processed the response from service
2017-01-19 21:39:48,994 INFO  Setting request parameters for VerifySolution
2017-01-19 21:39:48,995 INFO  Initiating to process and prepare Input for the verify service
2017-01-19 21:39:48,996 INFO  Starting to parse the user solution
2017-01-19 21:39:48,997 INFO  Displaying user solution
2017-01-19 21:39:49,484 INFO  Successfully parsed the user solution{"CourseShortName":"PF","UserSolution":"#PF-Assgn-20\r\n\r\ndef calculate_loan(account_number,salary,account_balance,loan_type,loan_amount_expected,customer_emi_expected):\r\n    eligible_loan_amount=0\r\n    bank_emi_expected=0\r\n    eligible_loan_amount=0\r\n    approved = 0\r\n    #Start writing your code here\r\n    \r\n    \r\n    \r\n    #Populate the variables: eligible_loan_amount and bank_emi_expected \r\n \r\n    #Use the below given print statements to display the output, in case of success\r\n    #print(\"Account number:\", account_number) \r\n    #print(\"The customer can avail the amount of Rs.\", eligible_loan_amount)\r\n    #print(\"Eligible EMIs :\", bank_emi_expected)\r\n    #print(\"Requested loan amount:\", loan_amount_expected)\r\n    #print(\"Requested EMI's:\",customer_emi_expected)\r\n    \r\n    #Use the below given print statements to display the output, in case of invalid data.\r\n    #print(\"Insufficient account balance\")\r\n    #print(\"The customer is not eligible for the loan\")\r\n    #print(\"Invalid account number\")\r\n    #print(\"Invalid loan type or salary\")\r\n    # Also, do not modify the above print statements for verification to work\r\n    \r\n    \r\n    if loan_type == \"Car\" and salary > 25000 and salary <= 49999 :\r\n        eligible_loan_amount = 500000\r\n        bank_emi_expected = 36\r\n        approved = 1\r\n         \r\n       \r\n    elif loan_type == \"House\" and salary >= 50000 and salary <= 74999 :\r\n        eligible_loan_amount = 6000000\r\n        bank_emi_expected = 60\r\n        approved = 1\r\n    \r\n    elif loan_type == \"Business\" and salary >= 75000  :\r\n        eligible_loan_amount = 7500000\r\n        bank_emi_expected = 84\r\n        approved = 1\r\n         \r\n         \r\n         \r\n         \r\n    if approved == 1 :\r\n        if account_number > 1000 and account_number <= 1999 :\r\n            if account_balance >= 100000 :\r\n                if loan_amount_expected <= eligible_loan_amount and customer_emi_expected <= bank_emi_expected :\r\n                    print(\"Account Number\" , account_number)\r\n                    print(\"Account Balance\" , account_balance)\r\n                    print(\"Bank Loan\" , eligible_loan_amount)\r\n                    print(\"Bank Emi\" , bank_emi_expected)\r\n                    print(\"Customer Requested Loan\", loan_amount_expected )\r\n                    print(\"Customer Requested EMI\" , customer_emi_expected)\r\n                else :\r\n                    print(\"The customer is not eligible for the loan \")\r\n            else :\r\n                print(\"Account Balance less than 1 Lakh\")\r\n                \r\n        else :\r\n            print(\"Account number not in bounds of 1000 to 1999\")\r\n            \r\n    else :\r\n        print(\"Invalid loan type or salary \")\r\n#Test your code for different values and observe the results\r\ncalculate_loan(1001,40000,250000,\"Car\",300000,30)\r\n","asgnmtId":"20","SolutionFileName":"Assignment20.py","AsgnmtTyp":"A","TestcaseFileName":""}
2017-01-19 21:39:49,485 INFO  Successfully processed and prepared the input for the verify service
2017-01-19 21:39:49,486 INFO  Successfully set the request parameters for VerifySolution
2017-01-19 21:39:49,487 INFO  Invoking the service to verify the user solution
2017-01-19 21:39:49,488 INFO  Time before invoking service:Thu Jan 19 21:39:49 IST 2017
2017-01-19 21:39:49,489 INFO  Initialising service address for VerifySolution
2017-01-19 21:39:49,489 INFO  Time before invoking service In SUPER:Thu Jan 19 21:39:49 IST 2017
2017-01-19 21:39:51,935 INFO  Time after invoking service In SUPER:Thu Jan 19 21:39:51 IST 2017
2017-01-19 21:39:51,936 INFO  Service responded successfully with required details
2017-01-19 21:39:51,937 INFO  Time after invoking service:Thu Jan 19 21:39:51 IST 2017
2017-01-19 21:39:51,937 INFO  User solution successfully verified
2017-01-19 21:39:51,938 INFO  Processing the response from verify service
2017-01-19 21:39:51,940 INFO  Starting to parse JSON response
2017-01-19 21:39:51,942 ERROR Keys used to parse test result JSON might be incorrect
2017-01-19 21:39:51,942 ERROR Keys used to parse test result JSON might be incorrect
2017-01-19 21:39:51,943 ERROR Keys used to parse test result JSON might be incorrect
2017-01-19 21:39:51,943 ERROR Keys used to parse test result JSON might be incorrect
2017-01-19 21:39:51,943 ERROR Keys used to parse test result JSON might be incorrect
2017-01-19 21:39:51,944 ERROR Keys used to parse test result JSON might be incorrect
2017-01-19 21:39:51,944 ERROR Keys used to parse test result JSON might be incorrect
2017-01-19 21:39:51,945 ERROR Keys used to parse test result JSON might be incorrect
2017-01-19 21:39:51,945 ERROR Keys used to parse test result JSON might be incorrect
2017-01-19 21:39:51,946 ERROR Keys used to parse test result JSON might be incorrect
2017-01-19 21:39:51,946 INFO  Successfully parsed JSON response
2017-01-19 21:39:51,948 INFO  In the process of generating verify response in HTML
2017-01-19 21:39:52,004 INFO  Successfully generated verify response in HTML
2017-01-19 21:39:52,004 INFO  Successfully processed the response from service
2017-01-19 21:41:32,731 INFO  Setting request parameters for VerifySolution
2017-01-19 21:41:32,734 INFO  Initiating to process and prepare Input for the verify service
2017-01-19 21:41:32,735 INFO  Starting to parse the user solution
2017-01-19 21:41:32,736 INFO  Displaying user solution
2017-01-19 21:41:33,680 INFO  Successfully parsed the user solution{"CourseShortName":"PF","UserSolution":"#PF-Assgn-20\r\n\r\ndef calculate_loan(account_number,salary,account_balance,loan_type,loan_amount_expected,customer_emi_expected):\r\n    eligible_loan_amount=0\r\n    bank_emi_expected=0\r\n    eligible_loan_amount=0\r\n    approved = 0\r\n    #Start writing your code here\r\n    \r\n    \r\n    \r\n    #Populate the variables: eligible_loan_amount and bank_emi_expected \r\n \r\n    #Use the below given print statements to display the output, in case of success\r\n    #print(\"Account number:\", account_number) \r\n    #print(\"The customer can avail the amount of Rs.\", eligible_loan_amount)\r\n    #print(\"Eligible EMIs :\", bank_emi_expected)\r\n    #print(\"Requested loan amount:\", loan_amount_expected)\r\n    #print(\"Requested EMI's:\",customer_emi_expected)\r\n    \r\n    #Use the below given print statements to display the output, in case of invalid data.\r\n    #print(\"Insufficient account balance\")\r\n    #print(\"The customer is not eligible for the loan\")\r\n    #print(\"Invalid account number\")\r\n    #print(\"Invalid loan type or salary\")\r\n    # Also, do not modify the above print statements for verification to work\r\n    \r\n    \r\n    if loan_type == \"Car\" and salary > 25000 and salary <= 49999 :\r\n        eligible_loan_amount = 500000\r\n        bank_emi_expected = 36\r\n        approved = 1\r\n         \r\n       \r\n    elif loan_type == \"House\" and salary >= 50000 and salary <= 74999 :\r\n        eligible_loan_amount = 6000000\r\n        bank_emi_expected = 60\r\n        approved = 1\r\n    \r\n    elif loan_type == \"Business\" and salary >= 75000  :\r\n        eligible_loan_amount = 7500000\r\n        bank_emi_expected = 84\r\n        approved = 1\r\n         \r\n         \r\n         \r\n         \r\n    if approved == 1 :\r\n        if account_number > 1000 and account_number <= 1999 :\r\n            if account_balance >= 100000 :\r\n                if loan_amount_expected <= eligible_loan_amount and customer_emi_expected <= bank_emi_expected :\r\n                    print(\"Account number:\" , account_number)\r\n                    print(\"The customer can avail the amount of Rs.\" , account_balance)\r\n                    print(\"Eligible EMIs :\" , eligible_loan_amount)\r\n                    print(\"Bank Emi\" , bank_emi_expected)\r\n                    print(\"Requested loan amount:\", loan_amount_expected )\r\n                    print(\"Requested EMIs:\" , customer_emi_expected)\r\n                else :\r\n                    print(\"The customer is not eligible for the loan \")\r\n            else :\r\n                print(\"Account Balance less than 1 Lakh\")\r\n                \r\n        else :\r\n            print(\"Account number not in bounds of 1000 to 1999\")\r\n            \r\n    else :\r\n        print(\"Invalid loan type or salary \")\r\n#Test your code for different values and observe the results\r\ncalculate_loan(1001,40000,250000,\"Car\",300000,30)\r\n","asgnmtId":"20","SolutionFileName":"Assignment20.py","AsgnmtTyp":"A","TestcaseFileName":""}
2017-01-19 21:41:33,681 INFO  Successfully processed and prepared the input for the verify service
2017-01-19 21:41:33,682 INFO  Successfully set the request parameters for VerifySolution
2017-01-19 21:41:33,682 INFO  Invoking the service to verify the user solution
2017-01-19 21:41:33,683 INFO  Time before invoking service:Thu Jan 19 21:41:33 IST 2017
2017-01-19 21:41:33,683 INFO  Initialising service address for VerifySolution
2017-01-19 21:41:33,684 INFO  Time before invoking service In SUPER:Thu Jan 19 21:41:33 IST 2017
2017-01-19 21:41:36,987 INFO  Time after invoking service In SUPER:Thu Jan 19 21:41:36 IST 2017
2017-01-19 21:41:36,988 INFO  Service responded successfully with required details
2017-01-19 21:41:36,988 INFO  Time after invoking service:Thu Jan 19 21:41:36 IST 2017
2017-01-19 21:41:36,989 INFO  User solution successfully verified
2017-01-19 21:41:36,991 INFO  Processing the response from verify service
2017-01-19 21:41:36,996 INFO  Starting to parse JSON response
2017-01-19 21:41:36,998 ERROR Keys used to parse test result JSON might be incorrect
2017-01-19 21:41:36,999 ERROR Keys used to parse test result JSON might be incorrect
2017-01-19 21:41:36,999 ERROR Keys used to parse test result JSON might be incorrect
2017-01-19 21:41:37,000 ERROR Keys used to parse test result JSON might be incorrect
2017-01-19 21:41:37,000 ERROR Keys used to parse test result JSON might be incorrect
2017-01-19 21:41:37,001 ERROR Keys used to parse test result JSON might be incorrect
2017-01-19 21:41:37,001 ERROR Keys used to parse test result JSON might be incorrect
2017-01-19 21:41:37,002 ERROR Keys used to parse test result JSON might be incorrect
2017-01-19 21:41:37,004 ERROR Keys used to parse test result JSON might be incorrect
2017-01-19 21:41:37,005 ERROR Keys used to parse test result JSON might be incorrect
2017-01-19 21:41:37,006 INFO  Successfully parsed JSON response
2017-01-19 21:41:37,008 INFO  In the process of generating verify response in HTML
2017-01-19 21:41:37,069 INFO  Successfully generated verify response in HTML
2017-01-19 21:41:37,070 INFO  Successfully processed the response from service
2017-01-19 21:41:57,341 INFO  Setting request parameters for VerifySolution
2017-01-19 21:41:57,342 INFO  Initiating to process and prepare Input for the verify service
2017-01-19 21:41:57,343 INFO  Starting to parse the user solution
2017-01-19 21:41:57,343 INFO  Displaying user solution
2017-01-19 21:41:58,540 INFO  Successfully parsed the user solution{"CourseShortName":"PF","UserSolution":"#PF-Assgn-20\r\n\r\ndef calculate_loan(account_number,salary,account_balance,loan_type,loan_amount_expected,customer_emi_expected):\r\n    eligible_loan_amount=0\r\n    bank_emi_expected=0\r\n    eligible_loan_amount=0\r\n    approved = 0\r\n    #Start writing your code here\r\n    \r\n    \r\n    \r\n    #Populate the variables: eligible_loan_amount and bank_emi_expected \r\n \r\n    #Use the below given print statements to display the output, in case of success\r\n    #print(\"Account number:\", account_number) \r\n    #print(\"The customer can avail the amount of Rs.\", eligible_loan_amount)\r\n    #print(\"Eligible EMIs :\", bank_emi_expected)\r\n    #print(\"Requested loan amount:\", loan_amount_expected)\r\n    #print(\"Requested EMI's:\",customer_emi_expected)\r\n    \r\n    #Use the below given print statements to display the output, in case of invalid data.\r\n    #print(\"Insufficient account balance\")\r\n    #print(\"The customer is not eligible for the loan\")\r\n    #print(\"Invalid account number\")\r\n    #print(\"Invalid loan type or salary\")\r\n    # Also, do not modify the above print statements for verification to work\r\n    \r\n    \r\n    if loan_type == \"Car\" and salary > 25000 and salary <= 49999 :\r\n        eligible_loan_amount = 500000\r\n        bank_emi_expected = 36\r\n        approved = 1\r\n         \r\n       \r\n    elif loan_type == \"House\" and salary >= 50000 and salary <= 74999 :\r\n        eligible_loan_amount = 6000000\r\n        bank_emi_expected = 60\r\n        approved = 1\r\n    \r\n    elif loan_type == \"Business\" and salary >= 75000  :\r\n        eligible_loan_amount = 7500000\r\n        bank_emi_expected = 84\r\n        approved = 1\r\n         \r\n         \r\n         \r\n         \r\n    if approved == 1 :\r\n        if account_number > 1000 and account_number <= 1999 :\r\n            if account_balance >= 100000 :\r\n                if loan_amount_expected <= eligible_loan_amount and customer_emi_expected <= bank_emi_expected :\r\n                    print(\"Account number:\" , account_number)\r\n                    print(\"The customer can avail the amount of Rs.\" , account_balance)\r\n                    print(\"Eligible EMIs :\" , eligible_loan_amount)\r\n                    print(\"Bank Emi\" , bank_emi_expected)\r\n                    print(\"Requested loan amount:\", loan_amount_expected )\r\n                    print(\"Requested EMIs:\" , customer_emi_expected)\r\n                else :\r\n                    print(\"The customer is not eligible for the loan \")\r\n            else :\r\n                print(\"Insufficient account balance \")\r\n                \r\n        else :\r\n            print(\"Account number not in bounds of 1000 to 1999\")\r\n            \r\n    else :\r\n        print(\"Invalid loan type or salary \")\r\n#Test your code for different values and observe the results\r\ncalculate_loan(1001,40000,250000,\"Car\",300000,30)\r\n","asgnmtId":"20","SolutionFileName":"Assignment20.py","AsgnmtTyp":"A","TestcaseFileName":""}
2017-01-19 21:41:58,541 INFO  Successfully processed and prepared the input for the verify service
2017-01-19 21:41:58,541 INFO  Successfully set the request parameters for VerifySolution
2017-01-19 21:41:58,542 INFO  Invoking the service to verify the user solution
2017-01-19 21:41:58,542 INFO  Time before invoking service:Thu Jan 19 21:41:58 IST 2017
2017-01-19 21:41:58,543 INFO  Initialising service address for VerifySolution
2017-01-19 21:41:58,544 INFO  Time before invoking service In SUPER:Thu Jan 19 21:41:58 IST 2017
2017-01-19 21:42:00,779 INFO  Time after invoking service In SUPER:Thu Jan 19 21:42:00 IST 2017
2017-01-19 21:42:00,780 INFO  Service responded successfully with required details
2017-01-19 21:42:00,781 INFO  Time after invoking service:Thu Jan 19 21:42:00 IST 2017
2017-01-19 21:42:00,781 INFO  User solution successfully verified
2017-01-19 21:42:00,782 INFO  Processing the response from verify service
2017-01-19 21:42:00,784 INFO  Starting to parse JSON response
2017-01-19 21:42:00,785 ERROR Keys used to parse test result JSON might be incorrect
2017-01-19 21:42:00,785 ERROR Keys used to parse test result JSON might be incorrect
2017-01-19 21:42:00,786 ERROR Keys used to parse test result JSON might be incorrect
2017-01-19 21:42:00,786 ERROR Keys used to parse test result JSON might be incorrect
2017-01-19 21:42:00,786 ERROR Keys used to parse test result JSON might be incorrect
2017-01-19 21:42:00,787 ERROR Keys used to parse test result JSON might be incorrect
2017-01-19 21:42:00,787 ERROR Keys used to parse test result JSON might be incorrect
2017-01-19 21:42:00,788 ERROR Keys used to parse test result JSON might be incorrect
2017-01-19 21:42:00,789 ERROR Keys used to parse test result JSON might be incorrect
2017-01-19 21:42:00,789 ERROR Keys used to parse test result JSON might be incorrect
2017-01-19 21:42:00,790 INFO  Successfully parsed JSON response
2017-01-19 21:42:00,791 INFO  In the process of generating verify response in HTML
2017-01-19 21:42:00,844 INFO  Successfully generated verify response in HTML
2017-01-19 21:42:00,844 INFO  Successfully processed the response from service
2017-01-19 21:42:14,101 INFO  Setting request parameters for VerifySolution
2017-01-19 21:42:14,105 INFO  Initiating to process and prepare Input for the verify service
2017-01-19 21:42:14,105 INFO  Starting to parse the user solution
2017-01-19 21:42:14,106 INFO  Displaying user solution
2017-01-19 21:42:14,574 INFO  Successfully parsed the user solution{"CourseShortName":"PF","UserSolution":"#PF-Assgn-20\r\n\r\ndef calculate_loan(account_number,salary,account_balance,loan_type,loan_amount_expected,customer_emi_expected):\r\n    eligible_loan_amount=0\r\n    bank_emi_expected=0\r\n    eligible_loan_amount=0\r\n    approved = 0\r\n    #Start writing your code here\r\n    \r\n    \r\n    \r\n    #Populate the variables: eligible_loan_amount and bank_emi_expected \r\n \r\n    #Use the below given print statements to display the output, in case of success\r\n    #print(\"Account number:\", account_number) \r\n    #print(\"The customer can avail the amount of Rs.\", eligible_loan_amount)\r\n    #print(\"Eligible EMIs :\", bank_emi_expected)\r\n    #print(\"Requested loan amount:\", loan_amount_expected)\r\n    #print(\"Requested EMI's:\",customer_emi_expected)\r\n    \r\n    #Use the below given print statements to display the output, in case of invalid data.\r\n    #print(\"Insufficient account balance\")\r\n    #print(\"The customer is not eligible for the loan\")\r\n    #print(\"Invalid account number\")\r\n    #print(\"Invalid loan type or salary\")\r\n    # Also, do not modify the above print statements for verification to work\r\n    \r\n    \r\n    if loan_type == \"Car\" and salary > 25000 and salary <= 49999 :\r\n        eligible_loan_amount = 500000\r\n        bank_emi_expected = 36\r\n        approved = 1\r\n         \r\n       \r\n    elif loan_type == \"House\" and salary >= 50000 and salary <= 74999 :\r\n        eligible_loan_amount = 6000000\r\n        bank_emi_expected = 60\r\n        approved = 1\r\n    \r\n    elif loan_type == \"Business\" and salary >= 75000  :\r\n        eligible_loan_amount = 7500000\r\n        bank_emi_expected = 84\r\n        approved = 1\r\n         \r\n         \r\n         \r\n         \r\n    if approved == 1 :\r\n        if account_number > 1000 and account_number <= 1999 :\r\n            if account_balance >= 100000 :\r\n                if loan_amount_expected <= eligible_loan_amount and customer_emi_expected <= bank_emi_expected :\r\n                    print(\"Account number:\" , account_number)\r\n                    print(\"The customer can avail the amount of Rs.\" , account_balance)\r\n                    print(\"Eligible EMIs :\" , eligible_loan_amount)\r\n                    print(\"Bank Emi\" , bank_emi_expected)\r\n                    print(\"Requested loan amount:\", loan_amount_expected )\r\n                    print(\"Requested EMIs:\" , customer_emi_expected)\r\n                else :\r\n                    print(\"The customer is not eligible for the loan \")\r\n            else :\r\n                print(\"Insufficient account balance \")\r\n                \r\n        else :\r\n            print(\"Invalid account number \")\r\n            \r\n    else :\r\n        print(\"Invalid loan type or salary \")\r\n#Test your code for different values and observe the results\r\ncalculate_loan(1001,40000,250000,\"Car\",300000,30)\r\n","asgnmtId":"20","SolutionFileName":"Assignment20.py","AsgnmtTyp":"A","TestcaseFileName":""}
2017-01-19 21:42:14,575 INFO  Successfully processed and prepared the input for the verify service
2017-01-19 21:42:14,576 INFO  Successfully set the request parameters for VerifySolution
2017-01-19 21:42:14,576 INFO  Invoking the service to verify the user solution
2017-01-19 21:42:14,577 INFO  Time before invoking service:Thu Jan 19 21:42:14 IST 2017
2017-01-19 21:42:14,577 INFO  Initialising service address for VerifySolution
2017-01-19 21:42:14,578 INFO  Time before invoking service In SUPER:Thu Jan 19 21:42:14 IST 2017
2017-01-19 21:42:17,033 INFO  Time after invoking service In SUPER:Thu Jan 19 21:42:17 IST 2017
2017-01-19 21:42:17,033 INFO  Service responded successfully with required details
2017-01-19 21:42:17,034 INFO  Time after invoking service:Thu Jan 19 21:42:17 IST 2017
2017-01-19 21:42:17,034 INFO  User solution successfully verified
2017-01-19 21:42:17,035 INFO  Processing the response from verify service
2017-01-19 21:42:17,036 INFO  Starting to parse JSON response
2017-01-19 21:42:17,037 ERROR Keys used to parse test result JSON might be incorrect
2017-01-19 21:42:17,038 ERROR Keys used to parse test result JSON might be incorrect
2017-01-19 21:42:17,038 ERROR Keys used to parse test result JSON might be incorrect
2017-01-19 21:42:17,038 ERROR Keys used to parse test result JSON might be incorrect
2017-01-19 21:42:17,040 ERROR Keys used to parse test result JSON might be incorrect
2017-01-19 21:42:17,040 ERROR Keys used to parse test result JSON might be incorrect
2017-01-19 21:42:17,041 ERROR Keys used to parse test result JSON might be incorrect
2017-01-19 21:42:17,041 ERROR Keys used to parse test result JSON might be incorrect
2017-01-19 21:42:17,042 ERROR Keys used to parse test result JSON might be incorrect
2017-01-19 21:42:17,042 ERROR Keys used to parse test result JSON might be incorrect
2017-01-19 21:42:17,042 INFO  Successfully parsed JSON response
2017-01-19 21:42:17,043 INFO  In the process of generating verify response in HTML
2017-01-19 21:42:17,098 INFO  Successfully generated verify response in HTML
2017-01-19 21:42:17,099 INFO  Successfully processed the response from service
2017-01-19 21:45:02,171 INFO  Setting request parameters for VerifySolution
2017-01-19 21:45:02,172 INFO  Initiating to process and prepare Input for the verify service
2017-01-19 21:45:02,173 INFO  Starting to parse the user solution
2017-01-19 21:45:02,174 INFO  Displaying user solution
2017-01-19 21:45:02,178 INFO   User Solution is unchanged since the last verification.
2017-01-19 21:45:02,183 INFO  Problem in processing and preparing Input for the verify service
2017-01-19 21:45:06,050 INFO  Setting request parameters for VerifySolution
2017-01-19 21:45:06,050 INFO  Initiating to process and prepare Input for the verify service
2017-01-19 21:45:06,052 INFO  Starting to parse the user solution
2017-01-19 21:45:06,053 INFO  Displaying user solution
2017-01-19 21:45:06,581 INFO  Successfully parsed the user solution{"CourseShortName":"PF","UserSolution":"#PF-Assgn-20\r\n\r\ndef calculate_loan(account_number,salary,account_balance,loan_type,loan_amount_expected,customer_emi_expected):\r\n    eligible_loan_amount=0\r\n    bank_emi_expected=0\r\n    eligible_loan_amount=0\r\n    approved = 0\r\n    \r\n    #Start writing your code here\r\n    \r\n    \r\n    \r\n    #Populate the variables: eligible_loan_amount and bank_emi_expected \r\n \r\n    #Use the below given print statements to display the output, in case of success\r\n    #print(\"Account number:\", account_number) \r\n    #print(\"The customer can avail the amount of Rs.\", eligible_loan_amount)\r\n    #print(\"Eligible EMIs :\", bank_emi_expected)\r\n    #print(\"Requested loan amount:\", loan_amount_expected)\r\n    #print(\"Requested EMI's:\",customer_emi_expected)\r\n    \r\n    #Use the below given print statements to display the output, in case of invalid data.\r\n    #print(\"Insufficient account balance\")\r\n    #print(\"The customer is not eligible for the loan\")\r\n    #print(\"Invalid account number\")\r\n    #print(\"Invalid loan type or salary\")\r\n    # Also, do not modify the above print statements for verification to work\r\n    \r\n    \r\n    if loan_type == \"Car\" and salary > 25000 and salary <= 49999 :\r\n        eligible_loan_amount = 500000\r\n        bank_emi_expected = 36\r\n        approved = 1\r\n         \r\n       \r\n    elif loan_type == \"House\" and salary >= 50000 and salary <= 74999 :\r\n        eligible_loan_amount = 6000000\r\n        bank_emi_expected = 60\r\n        approved = 1\r\n    \r\n    elif loan_type == \"Business\" and salary >= 75000  :\r\n        eligible_loan_amount = 7500000\r\n        bank_emi_expected = 84\r\n        approved = 1\r\n         \r\n         \r\n         \r\n         \r\n    if approved == 1 :\r\n        if account_number > 1000 and account_number <= 1999 :\r\n            if account_balance >= 100000 :\r\n                if loan_amount_expected <= eligible_loan_amount and customer_emi_expected <= bank_emi_expected :\r\n                    print(\"Account number:\" , account_number)\r\n                    print(\"The customer can avail the amount of Rs.\" , account_balance)\r\n                    print(\"Eligible EMIs :\" , eligible_loan_amount)\r\n                    print(\"Bank Emi\" , bank_emi_expected)\r\n                    print(\"Requested loan amount:\", loan_amount_expected )\r\n                    print(\"Requested EMIs:\" , customer_emi_expected)\r\n                else :\r\n                    print(\"The customer is not eligible for the loan \")\r\n            else :\r\n                print(\"Insufficient account balance \")\r\n                \r\n        else :\r\n            print(\"Invalid account number \")\r\n            \r\n    else :\r\n        print(\"Invalid loan type or salary\")\r\n#Test your code for different values and observe the results\r\ncalculate_loan(1001,40000,250000,\"Car\",300000,30)\r\n","asgnmtId":"20","SolutionFileName":"Assignment20.py","AsgnmtTyp":"A","TestcaseFileName":""}
2017-01-19 21:45:06,584 INFO  Successfully processed and prepared the input for the verify service
2017-01-19 21:45:06,584 INFO  Successfully set the request parameters for VerifySolution
2017-01-19 21:45:06,585 INFO  Invoking the service to verify the user solution
2017-01-19 21:45:06,586 INFO  Time before invoking service:Thu Jan 19 21:45:06 IST 2017
2017-01-19 21:45:06,586 INFO  Initialising service address for VerifySolution
2017-01-19 21:45:06,588 INFO  Time before invoking service In SUPER:Thu Jan 19 21:45:06 IST 2017
2017-01-19 21:45:09,115 INFO  Time after invoking service In SUPER:Thu Jan 19 21:45:09 IST 2017
2017-01-19 21:45:09,116 INFO  Service responded successfully with required details
2017-01-19 21:45:09,116 INFO  Time after invoking service:Thu Jan 19 21:45:09 IST 2017
2017-01-19 21:45:09,116 INFO  User solution successfully verified
2017-01-19 21:45:09,116 INFO  Processing the response from verify service
2017-01-19 21:45:09,121 INFO  Starting to parse JSON response
2017-01-19 21:45:09,122 ERROR Keys used to parse test result JSON might be incorrect
2017-01-19 21:45:09,123 ERROR Keys used to parse test result JSON might be incorrect
2017-01-19 21:45:09,124 ERROR Keys used to parse test result JSON might be incorrect
2017-01-19 21:45:09,124 ERROR Keys used to parse test result JSON might be incorrect
2017-01-19 21:45:09,125 ERROR Keys used to parse test result JSON might be incorrect
2017-01-19 21:45:09,125 ERROR Keys used to parse test result JSON might be incorrect
2017-01-19 21:45:09,126 ERROR Keys used to parse test result JSON might be incorrect
2017-01-19 21:45:09,126 ERROR Keys used to parse test result JSON might be incorrect
2017-01-19 21:45:09,127 ERROR Keys used to parse test result JSON might be incorrect
2017-01-19 21:45:09,127 ERROR Keys used to parse test result JSON might be incorrect
2017-01-19 21:45:09,128 INFO  Successfully parsed JSON response
2017-01-19 21:45:09,129 INFO  In the process of generating verify response in HTML
2017-01-19 21:45:09,194 INFO  Successfully generated verify response in HTML
2017-01-19 21:45:09,195 INFO  Successfully processed the response from service
2017-01-19 21:48:36,622 INFO  Setting request parameters for VerifySolution
2017-01-19 21:48:36,622 INFO  Initiating to process and prepare Input for the verify service
2017-01-19 21:48:36,623 INFO  Starting to parse the user solution
2017-01-19 21:48:36,624 INFO  Displaying user solution
2017-01-19 21:48:37,132 INFO  Successfully parsed the user solution{"CourseShortName":"PF","UserSolution":"#PF-Assgn-20\r\n\r\ndef calculate_loan(account_number,salary,account_balance,loan_type,loan_amount_expected,customer_emi_expected):\r\n    eligible_loan_amount=0\r\n    bank_emi_expected=0\r\n    eligible_loan_amount=0\r\n    approved = 0\r\n    \r\n    #Start writing your code here\r\n    \r\n    \r\n    \r\n    #Populate the variables: eligible_loan_amount and bank_emi_expected \r\n \r\n    #Use the below given print statements to display the output, in case of success\r\n    #print(\"Account number:\", account_number) \r\n    #print(\"The customer can avail the amount of Rs.\", eligible_loan_amount)\r\n    #print(\"Eligible EMIs :\", bank_emi_expected)\r\n    #print(\"Requested loan amount:\", loan_amount_expected)\r\n    #print(\"Requested EMI's:\",customer_emi_expected)\r\n    \r\n    #Use the below given print statements to display the output, in case of invalid data.\r\n    #print(\"Insufficient account balance\")\r\n    #print(\"The customer is not eligible for the loan\")\r\n    #print(\"Invalid account number\")\r\n    #print(\"Invalid loan type or salary\")\r\n    # Also, do not modify the above print statements for verification to work\r\n    \r\n    \r\n    if loan_type == \"Car\" and salary > 25000 and salary <= 49999 :\r\n        eligible_loan_amount = 500000\r\n        bank_emi_expected = 36\r\n        approved = 1\r\n         \r\n       \r\n    elif loan_type == \"House\" and salary >= 50000 and salary <= 74999 :\r\n        eligible_loan_amount = 6000000\r\n        bank_emi_expected = 60\r\n        approved = 1\r\n    \r\n    elif loan_type == \"Business\" and salary >= 75000  :\r\n        eligible_loan_amount = 7500000\r\n        bank_emi_expected = 84\r\n        approved = 1\r\n         \r\n         \r\n         \r\n         \r\n    if approved == 1 :\r\n        if account_number > 1000 and account_number <= 1999 :\r\n            if account_balance >= 100000 :\r\n                if loan_amount_expected <= eligible_loan_amount and customer_emi_expected <= bank_emi_expected :\r\n                    print(\"Account number:\" , account_number)\r\n                    print(\"The customer can avail the amount of Rs.\" , eligible_loan_amount)\r\n                    print(\"Bank Emi\" , bank_emi_expected)\r\n                    print(\"Requested loan amount:\", loan_amount_expected )\r\n                    print(\"Requested EMIs:\" , customer_emi_expected)\r\n                else :\r\n                    print(\"The customer is not eligible for the loan \")\r\n            else :\r\n                print(\"Insufficient account balance \")\r\n                \r\n        else :\r\n            print(\"Invalid account number \")\r\n            \r\n    else :\r\n        print(\"Invalid loan type or salary\")\r\n#Test your code for different values and observe the results\r\ncalculate_loan(1001,40000,250000,\"Car\",300000,30)\r\n","asgnmtId":"20","SolutionFileName":"Assignment20.py","AsgnmtTyp":"A","TestcaseFileName":""}
2017-01-19 21:48:37,134 INFO  Successfully processed and prepared the input for the verify service
2017-01-19 21:48:37,134 INFO  Successfully set the request parameters for VerifySolution
2017-01-19 21:48:37,135 INFO  Invoking the service to verify the user solution
2017-01-19 21:48:37,136 INFO  Time before invoking service:Thu Jan 19 21:48:37 IST 2017
2017-01-19 21:48:37,136 INFO  Initialising service address for VerifySolution
2017-01-19 21:48:37,137 INFO  Time before invoking service In SUPER:Thu Jan 19 21:48:37 IST 2017
2017-01-19 21:48:39,662 INFO  Time after invoking service In SUPER:Thu Jan 19 21:48:39 IST 2017
2017-01-19 21:48:39,663 INFO  Service responded successfully with required details
2017-01-19 21:48:39,664 INFO  Time after invoking service:Thu Jan 19 21:48:39 IST 2017
2017-01-19 21:48:39,665 INFO  User solution successfully verified
2017-01-19 21:48:39,665 INFO  Processing the response from verify service
2017-01-19 21:48:39,668 INFO  Starting to parse JSON response
2017-01-19 21:48:39,669 ERROR Keys used to parse test result JSON might be incorrect
2017-01-19 21:48:39,669 ERROR Keys used to parse test result JSON might be incorrect
2017-01-19 21:48:39,669 ERROR Keys used to parse test result JSON might be incorrect
2017-01-19 21:48:39,669 ERROR Keys used to parse test result JSON might be incorrect
2017-01-19 21:48:39,670 ERROR Keys used to parse test result JSON might be incorrect
2017-01-19 21:48:39,670 ERROR Keys used to parse test result JSON might be incorrect
2017-01-19 21:48:39,671 ERROR Keys used to parse test result JSON might be incorrect
2017-01-19 21:48:39,672 ERROR Keys used to parse test result JSON might be incorrect
2017-01-19 21:48:39,672 ERROR Keys used to parse test result JSON might be incorrect
2017-01-19 21:48:39,672 ERROR Keys used to parse test result JSON might be incorrect
2017-01-19 21:48:39,673 INFO  Successfully parsed JSON response
2017-01-19 21:48:39,674 INFO  In the process of generating verify response in HTML
2017-01-19 21:48:39,742 INFO  Successfully generated verify response in HTML
2017-01-19 21:48:39,743 INFO  Successfully processed the response from service
2017-01-19 21:49:42,050 INFO  Setting request parameters for VerifySolution
2017-01-19 21:49:42,050 INFO  Initiating to process and prepare Input for the verify service
2017-01-19 21:49:42,051 INFO  Starting to parse the user solution
2017-01-19 21:49:42,053 INFO  Displaying user solution
2017-01-19 21:49:42,907 INFO  Successfully parsed the user solution{"CourseShortName":"PF","UserSolution":"#PF-Assgn-20\r\n\r\ndef calculate_loan(account_number,salary,account_balance,loan_type,loan_amount_expected,customer_emi_expected):\r\n    eligible_loan_amount=0\r\n    bank_emi_expected=0\r\n    eligible_loan_amount=0\r\n    approved = 0\r\n    \r\n    #Start writing your code here\r\n    \r\n    \r\n    \r\n    #Populate the variables: eligible_loan_amount and bank_emi_expected \r\n \r\n    #Use the below given print statements to display the output, in case of success\r\n    #print(\"Account number:\", account_number) \r\n    #print(\"The customer can avail the amount of Rs.\", eligible_loan_amount)\r\n    #print(\"Eligible EMIs :\", bank_emi_expected)\r\n    #print(\"Requested loan amount:\", loan_amount_expected)\r\n    #print(\"Requested EMI's:\",customer_emi_expected)\r\n    \r\n    #Use the below given print statements to display the output, in case of invalid data.\r\n    #print(\"Insufficient account balance\")\r\n    #print(\"The customer is not eligible for the loan\")\r\n    #print(\"Invalid account number\")\r\n    #print(\"Invalid loan type or salary\")\r\n    # Also, do not modify the above print statements for verification to work\r\n    \r\n    \r\n    if loan_type == \"Car\" and salary > 25000 and salary <= 49999 :\r\n        eligible_loan_amount = 500000\r\n        bank_emi_expected = 36\r\n        approved = 1\r\n         \r\n       \r\n    elif loan_type == \"House\" and salary >= 50000 and salary <= 74999 :\r\n        eligible_loan_amount = 6000000\r\n        bank_emi_expected = 60\r\n        approved = 1\r\n    \r\n    elif loan_type == \"Business\" and salary >= 75000  :\r\n        eligible_loan_amount = 7500000\r\n        bank_emi_expected = 84\r\n        approved = 1\r\n         \r\n         \r\n         \r\n         \r\n    if approved == 1 :\r\n        if account_number > 1000 and account_number <= 1999 :\r\n            if account_balance >= 100000 :\r\n                if loan_amount_expected <= eligible_loan_amount and customer_emi_expected <= bank_emi_expected :\r\n                    print(\"Account number:\" , account_number)\r\n                    print(\"The customer can avail the amount of Rs.\" , eligible_loan_amount)\r\n                    print(\"Eligible EMIs :\" , bank_emi_expected)\r\n                    print(\"Requested loan amount:\", loan_amount_expected )\r\n                    print(\"Requested EMIs:\" , customer_emi_expected)\r\n                    #Account number: 1005The customer can avail the amount of Rs. 500000Eligible EMIs : 36Requested loan amount: 300000Requested EMIs: 30 \r\n                else :\r\n                    print(\"The customer is not eligible for the loan \")\r\n            else :\r\n                print(\"Insufficient account balance \")\r\n                \r\n        else :\r\n            print(\"Invalid account number \")\r\n            \r\n    else :\r\n        print(\"Invalid loan type or salary\")\r\n#Test your code for different values and observe the results\r\ncalculate_loan(1001,40000,250000,\"Car\",300000,30)\r\n","asgnmtId":"20","SolutionFileName":"Assignment20.py","AsgnmtTyp":"A","TestcaseFileName":""}
2017-01-19 21:49:42,908 INFO  Successfully processed and prepared the input for the verify service
2017-01-19 21:49:42,908 INFO  Successfully set the request parameters for VerifySolution
2017-01-19 21:49:42,909 INFO  Invoking the service to verify the user solution
2017-01-19 21:49:42,910 INFO  Time before invoking service:Thu Jan 19 21:49:42 IST 2017
2017-01-19 21:49:42,910 INFO  Initialising service address for VerifySolution
2017-01-19 21:49:42,911 INFO  Time before invoking service In SUPER:Thu Jan 19 21:49:42 IST 2017
2017-01-19 21:49:45,058 INFO  Time after invoking service In SUPER:Thu Jan 19 21:49:45 IST 2017
2017-01-19 21:49:45,059 INFO  Service responded successfully with required details
2017-01-19 21:49:45,059 INFO  Time after invoking service:Thu Jan 19 21:49:45 IST 2017
2017-01-19 21:49:45,060 INFO  User solution successfully verified
2017-01-19 21:49:45,061 INFO  Processing the response from verify service
2017-01-19 21:49:45,063 INFO  Starting to parse JSON response
2017-01-19 21:49:45,064 ERROR Keys used to parse test result JSON might be incorrect
2017-01-19 21:49:45,065 ERROR Keys used to parse test result JSON might be incorrect
2017-01-19 21:49:45,065 ERROR Keys used to parse test result JSON might be incorrect
2017-01-19 21:49:45,066 ERROR Keys used to parse test result JSON might be incorrect
2017-01-19 21:49:45,066 ERROR Keys used to parse test result JSON might be incorrect
2017-01-19 21:49:45,067 ERROR Keys used to parse test result JSON might be incorrect
2017-01-19 21:49:45,067 ERROR Keys used to parse test result JSON might be incorrect
2017-01-19 21:49:45,067 ERROR Keys used to parse test result JSON might be incorrect
2017-01-19 21:49:45,068 ERROR Keys used to parse test result JSON might be incorrect
2017-01-19 21:49:45,068 ERROR Keys used to parse test result JSON might be incorrect
2017-01-19 21:49:45,068 INFO  Successfully parsed JSON response
2017-01-19 21:49:45,069 INFO  In the process of generating verify response in HTML
2017-01-19 21:49:45,130 INFO  Successfully generated verify response in HTML
2017-01-19 21:49:45,131 INFO  Successfully processed the response from service
2017-01-19 21:53:01,668 INFO  Setting request parameters for VerifySolution
2017-01-19 21:53:01,670 INFO  Initiating to process and prepare Input for the verify service
2017-01-19 21:53:01,672 INFO  Starting to parse the user solution
2017-01-19 21:53:01,674 INFO  Displaying user solution
2017-01-19 21:53:02,568 INFO  Successfully parsed the user solution{"CourseShortName":"PF","UserSolution":"#PF-Assgn-20\r\n\r\ndef calculate_loan(account_number,salary,account_balance,loan_type,loan_amount_expected,customer_emi_expected):\r\n    eligible_loan_amount=0\r\n    bank_emi_expected=0\r\n    eligible_loan_amount=0\r\n    approved = 0\r\n    \r\n    #Start writing your code here\r\n    \r\n    \r\n    \r\n    #Populate the variables: eligible_loan_amount and bank_emi_expected \r\n \r\n    #Use the below given print statements to display the output, in case of success\r\n    #print(\"Account number:\", account_number) \r\n    #print(\"The customer can avail the amount of Rs.\", eligible_loan_amount)\r\n    #print(\"Eligible EMIs :\", bank_emi_expected)\r\n    #print(\"Requested loan amount:\", loan_amount_expected)\r\n    #print(\"Requested EMI's:\",customer_emi_expected)\r\n    \r\n    #Use the below given print statements to display the output, in case of invalid data.\r\n    #print(\"Insufficient account balance\")\r\n    #print(\"The customer is not eligible for the loan\")\r\n    #print(\"Invalid account number\")\r\n    #print(\"Invalid loan type or salary\")\r\n    # Also, do not modify the above print statements for verification to work\r\n    \r\n    \r\n    if loan_type == \"Car\" and salary > 25000 and salary <= 49999 :\r\n        eligible_loan_amount = 500000\r\n        bank_emi_expected = 36\r\n        approved = 1\r\n         \r\n       \r\n    elif loan_type == \"House\" and salary >= 50000 and salary <= 74999 :\r\n        eligible_loan_amount = 6000000\r\n        bank_emi_expected = 60\r\n        approved = 1\r\n    \r\n    elif loan_type == \"Business\" and salary >= 75000  :\r\n        eligible_loan_amount = 7500000\r\n        bank_emi_expected = 84\r\n        approved = 1\r\n         \r\n         \r\n         \r\n         \r\n    if approved == 1 :\r\n        if account_number > 1000 and account_number <= 1999 :\r\n            if account_balance >= 100000 :\r\n                if loan_amount_expected <= eligible_loan_amount and customer_emi_expected <= bank_emi_expected :\r\n                    print(\"Account number:\" , account_number)\r\n                    print(\"The customer can avail the amount of Rs.\" , eligible_loan_amount)\r\n                    print(\"Eligible EMIs :\" , bank_emi_expected)\r\n                    print(\"Requested loan amount:\", loan_amount_expected )\r\n                    print(\"Requested EMIs:\" , customer_emi_expected)\r\n                    #Account number: 1005The customer can avail the amount of Rs. 500000Eligible EMIs : 36Requested loan amount: 300000Requested EMIs: 30 \r\n                else :\r\n                    print(\"The customer is not eligible for the loan \")\r\n            else :\r\n                print(\"Insufficient account balance \")\r\n                \r\n        else :\r\n            print(\"Invalid account number \")\r\n            \r\n    else :\r\n        print(\"Invalid loan type or salary\")\r\n#Test your code for different values and observe the results\r\ncalculate_loan(1001,40000,250000,\"Car\",300000,30)\r\nprint(\"Hello 2\")\r\ncalculate_loan(1005,30000,255000,\"Car\",300000,30)\r\n","asgnmtId":"20","SolutionFileName":"Assignment20.py","AsgnmtTyp":"A","TestcaseFileName":""}
2017-01-19 21:53:02,570 INFO  Successfully processed and prepared the input for the verify service
2017-01-19 21:53:02,570 INFO  Successfully set the request parameters for VerifySolution
2017-01-19 21:53:02,571 INFO  Invoking the service to verify the user solution
2017-01-19 21:53:02,571 INFO  Time before invoking service:Thu Jan 19 21:53:02 IST 2017
2017-01-19 21:53:02,572 INFO  Initialising service address for VerifySolution
2017-01-19 21:53:02,573 INFO  Time before invoking service In SUPER:Thu Jan 19 21:53:02 IST 2017
2017-01-19 21:53:07,911 INFO  Time after invoking service In SUPER:Thu Jan 19 21:53:07 IST 2017
2017-01-19 21:53:07,912 INFO  Service responded successfully with required details
2017-01-19 21:53:07,913 INFO  Time after invoking service:Thu Jan 19 21:53:07 IST 2017
2017-01-19 21:53:07,913 INFO  User solution successfully verified
2017-01-19 21:53:07,913 INFO  Processing the response from verify service
2017-01-19 21:53:07,916 INFO  Starting to parse JSON response
2017-01-19 21:53:07,917 ERROR Keys used to parse test result JSON might be incorrect
2017-01-19 21:53:07,918 ERROR Keys used to parse test result JSON might be incorrect
2017-01-19 21:53:07,918 ERROR Keys used to parse test result JSON might be incorrect
2017-01-19 21:53:07,919 ERROR Keys used to parse test result JSON might be incorrect
2017-01-19 21:53:07,919 ERROR Keys used to parse test result JSON might be incorrect
2017-01-19 21:53:07,919 ERROR Keys used to parse test result JSON might be incorrect
2017-01-19 21:53:07,920 ERROR Keys used to parse test result JSON might be incorrect
2017-01-19 21:53:07,920 ERROR Keys used to parse test result JSON might be incorrect
2017-01-19 21:53:07,921 ERROR Keys used to parse test result JSON might be incorrect
2017-01-19 21:53:07,921 ERROR Keys used to parse test result JSON might be incorrect
2017-01-19 21:53:07,922 INFO  Successfully parsed JSON response
2017-01-19 21:53:07,923 INFO  In the process of generating verify response in HTML
2017-01-19 21:53:07,985 INFO  Successfully generated verify response in HTML
2017-01-19 21:53:07,987 INFO  Successfully processed the response from service
2017-01-19 21:54:22,713 INFO  Setting request parameters for VerifySolution
2017-01-19 21:54:22,714 INFO  Initiating to process and prepare Input for the verify service
2017-01-19 21:54:22,715 INFO  Starting to parse the user solution
2017-01-19 21:54:22,716 INFO  Displaying user solution
2017-01-19 21:54:23,319 INFO  Successfully parsed the user solution{"CourseShortName":"PF","UserSolution":"#PF-Assgn-20\r\n\r\ndef calculate_loan(account_number,salary,account_balance,loan_type,loan_amount_expected,customer_emi_expected):\r\n    eligible_loan_amount=0\r\n    bank_emi_expected=0\r\n    eligible_loan_amount=0\r\n    approved = 0\r\n    \r\n    #Start writing your code here\r\n    \r\n    \r\n    \r\n    #Populate the variables: eligible_loan_amount and bank_emi_expected \r\n \r\n    #Use the below given print statements to display the output, in case of success\r\n    #print(\"Account number:\", account_number) \r\n    #print(\"The customer can avail the amount of Rs.\", eligible_loan_amount)\r\n    #print(\"Eligible EMIs :\", bank_emi_expected)\r\n    #print(\"Requested loan amount:\", loan_amount_expected)\r\n    #print(\"Requested EMI's:\",customer_emi_expected)\r\n    \r\n    #Use the below given print statements to display the output, in case of invalid data.\r\n    #print(\"Insufficient account balance\")\r\n    #print(\"The customer is not eligible for the loan\")\r\n    #print(\"Invalid account number\")\r\n    #print(\"Invalid loan type or salary\")\r\n    # Also, do not modify the above print statements for verification to work\r\n    \r\n    \r\n    if loan_type == \"Car\" and salary > 25000 and salary <= 49999 :\r\n        eligible_loan_amount = 500000\r\n        bank_emi_expected = 36\r\n        approved = 1\r\n         \r\n       \r\n    elif loan_type == \"House\" and salary >= 50000 and salary <= 74999 :\r\n        eligible_loan_amount = 6000000\r\n        bank_emi_expected = 60\r\n        approved = 1\r\n    \r\n    elif loan_type == \"Business\" and salary >= 75000  :\r\n        eligible_loan_amount = 7500000\r\n        bank_emi_expected = 84\r\n        approved = 1\r\n         \r\n         \r\n         \r\n         \r\n    if approved == 1 :\r\n        if account_number > 1000 and account_number <= 1999 :\r\n            if account_balance >= 100000 :\r\n                if loan_amount_expected <= eligible_loan_amount and customer_emi_expected <= bank_emi_expected :\r\n                    print(\"Account number:\", account_number)\r\n                    print(\"The customer can avail the amount of Rs.\", eligible_loan_amount)\r\n                    print(\"Eligible EMIs :\", bank_emi_expected)\r\n                    print(\"Requested loan amount:\", loan_amount_expected )\r\n                    print(\"Requested EMIs:\", customer_emi_expected)\r\n                    #Account number: 1005The customer can avail the amount of Rs. 500000Eligible EMIs : 36Requested loan amount: 300000Requested EMIs: 30 \r\n                else :\r\n                    print(\"The customer is not eligible for the loan \")\r\n            else :\r\n                print(\"Insufficient account balance \")\r\n                \r\n        else :\r\n            print(\"Invalid account number \")\r\n            \r\n    else :\r\n        print(\"Invalid loan type or salary\")\r\n#Test your code for different values and observe the results\r\ncalculate_loan(1001,40000,250000,\"Car\",300000,30)\r\nprint(\"Hello 2\")\r\ncalculate_loan(1005,30000,255000,\"Car\",300000,30)\r\n","asgnmtId":"20","SolutionFileName":"Assignment20.py","AsgnmtTyp":"A","TestcaseFileName":""}
2017-01-19 21:54:23,320 INFO  Successfully processed and prepared the input for the verify service
2017-01-19 21:54:23,321 INFO  Successfully set the request parameters for VerifySolution
2017-01-19 21:54:23,321 INFO  Invoking the service to verify the user solution
2017-01-19 21:54:23,322 INFO  Time before invoking service:Thu Jan 19 21:54:23 IST 2017
2017-01-19 21:54:23,323 INFO  Initialising service address for VerifySolution
2017-01-19 21:54:23,323 INFO  Time before invoking service In SUPER:Thu Jan 19 21:54:23 IST 2017
2017-01-19 21:54:25,489 INFO  Time after invoking service In SUPER:Thu Jan 19 21:54:25 IST 2017
2017-01-19 21:54:25,490 INFO  Service responded successfully with required details
2017-01-19 21:54:25,491 INFO  Time after invoking service:Thu Jan 19 21:54:25 IST 2017
2017-01-19 21:54:25,491 INFO  User solution successfully verified
2017-01-19 21:54:25,492 INFO  Processing the response from verify service
2017-01-19 21:54:25,493 INFO  Starting to parse JSON response
2017-01-19 21:54:25,494 ERROR Keys used to parse test result JSON might be incorrect
2017-01-19 21:54:25,495 ERROR Keys used to parse test result JSON might be incorrect
2017-01-19 21:54:25,495 ERROR Keys used to parse test result JSON might be incorrect
2017-01-19 21:54:25,495 ERROR Keys used to parse test result JSON might be incorrect
2017-01-19 21:54:25,496 ERROR Keys used to parse test result JSON might be incorrect
2017-01-19 21:54:25,496 ERROR Keys used to parse test result JSON might be incorrect
2017-01-19 21:54:25,497 ERROR Keys used to parse test result JSON might be incorrect
2017-01-19 21:54:25,497 ERROR Keys used to parse test result JSON might be incorrect
2017-01-19 21:54:25,497 ERROR Keys used to parse test result JSON might be incorrect
2017-01-19 21:54:25,498 ERROR Keys used to parse test result JSON might be incorrect
2017-01-19 21:54:25,498 INFO  Successfully parsed JSON response
2017-01-19 21:54:25,500 INFO  In the process of generating verify response in HTML
2017-01-19 21:54:25,563 INFO  Successfully generated verify response in HTML
2017-01-19 21:54:25,564 INFO  Successfully processed the response from service
2017-01-19 21:56:00,452 INFO  Setting request parameters for VerifySolution
2017-01-19 21:56:00,454 INFO  Initiating to process and prepare Input for the verify service
2017-01-19 21:56:00,456 INFO  Starting to parse the user solution
2017-01-19 21:56:00,457 INFO  Displaying user solution
2017-01-19 21:56:01,378 INFO  Successfully parsed the user solution{"CourseShortName":"PF","UserSolution":"#PF-Assgn-20\r\n\r\ndef calculate_loan(account_number,salary,account_balance,loan_type,loan_amount_expected,customer_emi_expected):\r\n    eligible_loan_amount=0\r\n    bank_emi_expected=0\r\n    eligible_loan_amount=0\r\n    approved = 0\r\n    \r\n    #Start writing your code here\r\n    \r\n    \r\n    \r\n    #Populate the variables: eligible_loan_amount and bank_emi_expected \r\n \r\n    #Use the below given print statements to display the output, in case of success\r\n    #print(\"Account number:\", account_number) \r\n    #print(\"The customer can avail the amount of Rs.\", eligible_loan_amount)\r\n    #print(\"Eligible EMIs :\", bank_emi_expected)\r\n    #print(\"Requested loan amount:\", loan_amount_expected)\r\n    #print(\"Requested EMI's:\",customer_emi_expected)\r\n    \r\n    #Use the below given print statements to display the output, in case of invalid data.\r\n    #print(\"Insufficient account balance\")\r\n    #print(\"The customer is not eligible for the loan\")\r\n    #print(\"Invalid account number\")\r\n    #print(\"Invalid loan type or salary\")\r\n    # Also, do not modify the above print statements for verification to work\r\n    \r\n    \r\n    if loan_type == \"Car\" and salary > 25000 and salary <= 49999 :\r\n        eligible_loan_amount = 500000\r\n        bank_emi_expected = 36\r\n        approved = 1\r\n         \r\n       \r\n    elif loan_type == \"House\" and salary >= 50000 and salary <= 74999 :\r\n        eligible_loan_amount = 6000000\r\n        bank_emi_expected = 60\r\n        approved = 1\r\n    \r\n    elif loan_type == \"Business\" and salary >= 75000  :\r\n        eligible_loan_amount = 7500000\r\n        bank_emi_expected = 84\r\n        approved = 1\r\n         \r\n         \r\n         \r\n         \r\n    if approved == 1 :\r\n        if account_number > 1000 and account_number <= 1999 :\r\n            if account_balance >= 100000 :\r\n                if loan_amount_expected <= eligible_loan_amount and customer_emi_expected <= bank_emi_expected :\r\n                    print(\"Account number:\", account_number)\r\n                    print(\"The customer can avail the amount of Rs.\", eligible_loan_amount)\r\n                    print(\"Eligible EMIs :\", bank_emi_expected)\r\n                    print(\"Requested loan amount:\", loan_amount_expected )\r\n                    print(\"Requested EMIs:\", customer_emi_expected)\r\n                    #Account number: 1005The customer can avail the amount of Rs. 500000Eligible EMIs : 36Requested loan amount: 300000Requested EMIs: 30 \r\n                else :\r\n                    print(\"The customer is not eligible for the loan \")\r\n            else :\r\n                print(\"Insufficient account balance\")\r\n        else :\r\n            print(\"Invalid account number\")  \r\n    else :\r\n        print(\"Invalid loan type or salary\")\r\n#Test your code for different values and observe the results\r\ncalculate_loan(1001,40000,250000,\"Car\",300000,30)\r\nprint(\"Hello 2\")\r\ncalculate_loan(1005,30000,255000,\"Car\",300000,30)\r\n","asgnmtId":"20","SolutionFileName":"Assignment20.py","AsgnmtTyp":"A","TestcaseFileName":""}
2017-01-19 21:56:01,379 INFO  Successfully processed and prepared the input for the verify service
2017-01-19 21:56:01,380 INFO  Successfully set the request parameters for VerifySolution
2017-01-19 21:56:01,380 INFO  Invoking the service to verify the user solution
2017-01-19 21:56:01,381 INFO  Time before invoking service:Thu Jan 19 21:56:01 IST 2017
2017-01-19 21:56:01,382 INFO  Initialising service address for VerifySolution
2017-01-19 21:56:01,383 INFO  Time before invoking service In SUPER:Thu Jan 19 21:56:01 IST 2017
2017-01-19 21:56:04,131 INFO  Time after invoking service In SUPER:Thu Jan 19 21:56:04 IST 2017
2017-01-19 21:56:04,132 INFO  Service responded successfully with required details
2017-01-19 21:56:04,133 INFO  Time after invoking service:Thu Jan 19 21:56:04 IST 2017
2017-01-19 21:56:04,133 INFO  User solution successfully verified
2017-01-19 21:56:04,134 INFO  Processing the response from verify service
2017-01-19 21:56:04,136 INFO  Starting to parse JSON response
2017-01-19 21:56:04,137 ERROR Keys used to parse test result JSON might be incorrect
2017-01-19 21:56:04,137 ERROR Keys used to parse test result JSON might be incorrect
2017-01-19 21:56:04,138 ERROR Keys used to parse test result JSON might be incorrect
2017-01-19 21:56:04,138 ERROR Keys used to parse test result JSON might be incorrect
2017-01-19 21:56:04,139 ERROR Keys used to parse test result JSON might be incorrect
2017-01-19 21:56:04,139 ERROR Keys used to parse test result JSON might be incorrect
2017-01-19 21:56:04,139 ERROR Keys used to parse test result JSON might be incorrect
2017-01-19 21:56:04,140 ERROR Keys used to parse test result JSON might be incorrect
2017-01-19 21:56:04,140 ERROR Keys used to parse test result JSON might be incorrect
2017-01-19 21:56:04,141 ERROR Keys used to parse test result JSON might be incorrect
2017-01-19 21:56:04,141 INFO  Successfully parsed JSON response
2017-01-19 21:56:04,142 INFO  In the process of generating verify response in HTML
2017-01-19 21:56:04,208 INFO  Successfully generated verify response in HTML
2017-01-19 21:56:04,208 INFO  Successfully processed the response from service
2017-01-19 21:56:38,935 INFO  Setting request parameters for VerifySolution
2017-01-19 21:56:38,935 INFO  Initiating to process and prepare Input for the verify service
2017-01-19 21:56:38,936 INFO  Starting to parse the user solution
2017-01-19 21:56:38,937 INFO  Displaying user solution
2017-01-19 21:56:38,939 INFO   User Solution is unchanged since the last verification.
2017-01-19 21:56:38,943 INFO  Problem in processing and preparing Input for the verify service
2017-01-19 21:56:50,236 INFO  Setting request parameters for VerifySolution
2017-01-19 21:56:50,237 INFO  Initiating to process and prepare Input for the verify service
2017-01-19 21:56:50,238 INFO  Starting to parse the user solution
2017-01-19 21:56:50,239 INFO  Displaying user solution
2017-01-19 21:56:51,417 INFO  Successfully parsed the user solution{"CourseShortName":"PF","UserSolution":"#PF-Assgn-20\r\n\r\ndef calculate_loan(account_number,salary,account_balance,loan_type,loan_amount_expected,customer_emi_expected):\r\n    eligible_loan_amount=0\r\n    bank_emi_expected=0\r\n    eligible_loan_amount=0\r\n    approved = 0\r\n    \r\n    #Start writing your code here\r\n    \r\n    \r\n    \r\n    #Populate the variables: eligible_loan_amount and bank_emi_expected \r\n \r\n    #Use the below given print statements to display the output, in case of success\r\n    #print(\"Account number:\", account_number) \r\n    #print(\"The customer can avail the amount of Rs.\", eligible_loan_amount)\r\n    #print(\"Eligible EMIs :\", bank_emi_expected)\r\n    #print(\"Requested loan amount:\", loan_amount_expected)\r\n    #print(\"Requested EMI's:\",customer_emi_expected)\r\n    \r\n    #Use the below given print statements to display the output, in case of invalid data.\r\n    #print(\"Insufficient account balance\")\r\n    #print(\"The customer is not eligible for the loan\")\r\n    #print(\"Invalid account number\")\r\n    #print(\"Invalid loan type or salary\")\r\n    # Also, do not modify the above print statements for verification to work\r\n    \r\n    \r\n    if loan_type == \"Car\" and salary > 25000 and salary <= 49999 :\r\n        eligible_loan_amount = 500000\r\n        bank_emi_expected = 36\r\n        approved = 1\r\n         \r\n       \r\n    elif loan_type == \"House\" and salary >= 50000 and salary <= 74999 :\r\n        eligible_loan_amount = 6000000\r\n        bank_emi_expected = 60\r\n        approved = 1\r\n    \r\n    elif loan_type == \"Business\" and salary >= 75000  :\r\n        eligible_loan_amount = 7500000\r\n        bank_emi_expected = 84\r\n        approved = 1\r\n         \r\n         \r\n         \r\n         \r\n    if approved == 1 :\r\n        if account_number > 1000 and account_number <= 1999 :\r\n            if account_balance >= 100000 :\r\n                if loan_amount_expected <= eligible_loan_amount and customer_emi_expected <= bank_emi_expected :\r\n                    print(\"Account number:\", account_number)\r\n                    print(\"The customer can avail the amount of Rs.\", eligible_loan_amount)\r\n                    print(\"Eligible EMIs :\", bank_emi_expected)\r\n                    print(\"Requested loan amount:\", loan_amount_expected )\r\n                    print(\"Requested EMIs:\", customer_emi_expected)\r\n                    #Account number: 1005The customer can avail the amount of Rs. 500000Eligible EMIs : 36Requested loan amount: 300000Requested EMIs: 30 \r\n                else :\r\n                    print(\"The customer is not eligible for the loan \")\r\n            else :\r\n                print(\"Insufficient account balance\")\r\n        else :\r\n            print(\"Invalid account number\")  \r\n    else :\r\n        print(\"Invalid loan type or salary\")\r\n#Test your code for different values and observe the results\r\ncalculate_loan(1001,40000,250000,\"Car\",300000,30)\r\nprint(\"Hello2\")\r\ncalculate_loan(1005,30000,255000,\"Car\",300000,30)\r\n","asgnmtId":"20","SolutionFileName":"Assignment20.py","AsgnmtTyp":"A","TestcaseFileName":""}
2017-01-19 21:56:51,418 INFO  Successfully processed and prepared the input for the verify service
2017-01-19 21:56:51,419 INFO  Successfully set the request parameters for VerifySolution
2017-01-19 21:56:51,419 INFO  Invoking the service to verify the user solution
2017-01-19 21:56:51,420 INFO  Time before invoking service:Thu Jan 19 21:56:51 IST 2017
2017-01-19 21:56:51,420 INFO  Initialising service address for VerifySolution
2017-01-19 21:56:51,421 INFO  Time before invoking service In SUPER:Thu Jan 19 21:56:51 IST 2017
2017-01-19 21:56:53,596 INFO  Time after invoking service In SUPER:Thu Jan 19 21:56:53 IST 2017
2017-01-19 21:56:53,596 INFO  Service responded successfully with required details
2017-01-19 21:56:53,597 INFO  Time after invoking service:Thu Jan 19 21:56:53 IST 2017
2017-01-19 21:56:53,598 INFO  User solution successfully verified
2017-01-19 21:56:53,598 INFO  Processing the response from verify service
2017-01-19 21:56:53,600 INFO  Starting to parse JSON response
2017-01-19 21:56:53,601 ERROR Keys used to parse test result JSON might be incorrect
2017-01-19 21:56:53,601 ERROR Keys used to parse test result JSON might be incorrect
2017-01-19 21:56:53,602 ERROR Keys used to parse test result JSON might be incorrect
2017-01-19 21:56:53,602 ERROR Keys used to parse test result JSON might be incorrect
2017-01-19 21:56:53,603 ERROR Keys used to parse test result JSON might be incorrect
2017-01-19 21:56:53,603 ERROR Keys used to parse test result JSON might be incorrect
2017-01-19 21:56:53,603 ERROR Keys used to parse test result JSON might be incorrect
2017-01-19 21:56:53,603 ERROR Keys used to parse test result JSON might be incorrect
2017-01-19 21:56:53,604 ERROR Keys used to parse test result JSON might be incorrect
2017-01-19 21:56:53,605 ERROR Keys used to parse test result JSON might be incorrect
2017-01-19 21:56:53,605 INFO  Successfully parsed JSON response
2017-01-19 21:56:53,607 INFO  In the process of generating verify response in HTML
2017-01-19 21:56:53,665 INFO  Successfully generated verify response in HTML
2017-01-19 21:56:53,666 INFO  Successfully processed the response from service
2017-01-19 21:59:52,438 INFO  Setting request parameters for VerifySolution
2017-01-19 21:59:52,439 INFO  Initiating to process and prepare Input for the verify service
2017-01-19 21:59:52,441 INFO  Starting to parse the user solution
2017-01-19 21:59:52,444 INFO  Displaying user solution
2017-01-19 21:59:53,005 INFO  Successfully parsed the user solution{"CourseShortName":"PF","UserSolution":"#PF-Assgn-20\r\n\r\ndef calculate_loan(account_number,salary,account_balance,loan_type,loan_amount_expected,customer_emi_expected):\r\n    eligible_loan_amount=0\r\n    bank_emi_expected=0\r\n    eligible_loan_amount=0\r\n    approved = 0\r\n    \r\n    #Start writing your code here\r\n    \r\n    \r\n    \r\n    #Populate the variables: eligible_loan_amount and bank_emi_expected \r\n \r\n    #Use the below given print statements to display the output, in case of success\r\n    #print(\"Account number:\", account_number) \r\n    #print(\"The customer can avail the amount of Rs.\", eligible_loan_amount)\r\n    #print(\"Eligible EMIs :\", bank_emi_expected)\r\n    #print(\"Requested loan amount:\", loan_amount_expected)\r\n    #print(\"Requested EMI's:\",customer_emi_expected)\r\n    \r\n    #Use the below given print statements to display the output, in case of invalid data.\r\n    #print(\"Insufficient account balance\")\r\n    #print(\"The customer is not eligible for the loan\")\r\n    #print(\"Invalid account number\")\r\n    #print(\"Invalid loan type or salary\")\r\n    # Also, do not modify the above print statements for verification to work\r\n    \r\n    \r\n    if loan_type == \"Car\" and salary > 25000 and salary <= 49999 :\r\n        eligible_loan_amount = 500000\r\n        bank_emi_expected = 36\r\n        approved = 1\r\n         \r\n       \r\n    elif loan_type == \"House\" and salary >= 50000 and salary <= 74999 :\r\n        eligible_loan_amount = 6000000\r\n        bank_emi_expected = 60\r\n        approved = 1\r\n    \r\n    elif loan_type == \"Business\" and salary >= 75000  :\r\n        eligible_loan_amount = 7500000\r\n        bank_emi_expected = 84\r\n        approved = 1\r\n         \r\n         \r\n         \r\n         \r\n    if approved == 1 :\r\n        if account_number > 1000 and account_number <= 1999 :\r\n            if account_balance >= 100000 :\r\n                if loan_amount_expected <= eligible_loan_amount and customer_emi_expected <= bank_emi_expected :\r\n                    \r\n                    \r\n                    print(\"Account number:\", account_number)\r\n                    print(\"The customer can avail the amount of Rs.\", eligible_loan_amount)\r\n                    print(\"Eligible EMIs :\", bank_emi_expected)\r\n                    print(\"Requested loan amount:\", loan_amount_expected )\r\n                    print(\"Requested EMIs:\", customer_emi_expected)\r\n                    #Account number: 1005The customer can avail the amount of Rs. 500000Eligible EMIs : 36Requested loan amount: 300000Requested EMIs: 30 \r\n                else :\r\n                    print(\"The customer is not eligible for the loan \")\r\n            else :\r\n                print(\"Insufficient account balance\")\r\n        else :\r\n            print(\"Invalid account number\")  \r\n    else :\r\n        print(\"Invalid loan type or salary\")\r\n#Test your code for different values and observe the results\r\ncalculate_loan(1001,40000,250000,\"Car\",300000,30)\r\nprint(\"Hello2\")\r\ncalculate_loan(1005,30000,255000,\"Car\",300000,30)\r\n","asgnmtId":"20","SolutionFileName":"Assignment20.py","AsgnmtTyp":"A","TestcaseFileName":""}
2017-01-19 21:59:53,008 INFO  Successfully processed and prepared the input for the verify service
2017-01-19 21:59:53,009 INFO  Successfully set the request parameters for VerifySolution
2017-01-19 21:59:53,009 INFO  Invoking the service to verify the user solution
2017-01-19 21:59:53,010 INFO  Time before invoking service:Thu Jan 19 21:59:53 IST 2017
2017-01-19 21:59:53,010 INFO  Initialising service address for VerifySolution
2017-01-19 21:59:53,011 INFO  Time before invoking service In SUPER:Thu Jan 19 21:59:53 IST 2017
2017-01-19 21:59:55,323 INFO  Time after invoking service In SUPER:Thu Jan 19 21:59:55 IST 2017
2017-01-19 21:59:55,324 INFO  Service responded successfully with required details
2017-01-19 21:59:55,324 INFO  Time after invoking service:Thu Jan 19 21:59:55 IST 2017
2017-01-19 21:59:55,325 INFO  User solution successfully verified
2017-01-19 21:59:55,325 INFO  Processing the response from verify service
2017-01-19 21:59:55,328 INFO  Starting to parse JSON response
2017-01-19 21:59:55,330 ERROR Keys used to parse test result JSON might be incorrect
2017-01-19 21:59:55,331 ERROR Keys used to parse test result JSON might be incorrect
2017-01-19 21:59:55,331 ERROR Keys used to parse test result JSON might be incorrect
2017-01-19 21:59:55,331 ERROR Keys used to parse test result JSON might be incorrect
2017-01-19 21:59:55,332 ERROR Keys used to parse test result JSON might be incorrect
2017-01-19 21:59:55,332 ERROR Keys used to parse test result JSON might be incorrect
2017-01-19 21:59:55,333 ERROR Keys used to parse test result JSON might be incorrect
2017-01-19 21:59:55,333 ERROR Keys used to parse test result JSON might be incorrect
2017-01-19 21:59:55,334 ERROR Keys used to parse test result JSON might be incorrect
2017-01-19 21:59:55,334 ERROR Keys used to parse test result JSON might be incorrect
2017-01-19 21:59:55,334 INFO  Successfully parsed JSON response
2017-01-19 21:59:55,336 INFO  In the process of generating verify response in HTML
2017-01-19 21:59:55,398 INFO  Successfully generated verify response in HTML
2017-01-19 21:59:55,398 INFO  Successfully processed the response from service
2017-01-19 22:00:02,576 INFO  Setting request parameters for VerifySolution
2017-01-19 22:00:02,577 INFO  Initiating to process and prepare Input for the verify service
2017-01-19 22:00:02,577 INFO  Starting to parse the user solution
2017-01-19 22:00:02,578 INFO  Displaying user solution
2017-01-19 22:00:04,131 INFO  Successfully parsed the user solution{"CourseShortName":"PF","UserSolution":"#PF-Assgn-20\r\n\r\ndef calculate_loan(account_number,salary,account_balance,loan_type,loan_amount_expected,customer_emi_expected):\r\n    eligible_loan_amount=0\r\n    bank_emi_expected=0\r\n    eligible_loan_amount=0\r\n    approved = 0\r\n    \r\n    #Start writing your code here\r\n    \r\n    \r\n    \r\n    #Populate the variables: eligible_loan_amount and bank_emi_expected \r\n \r\n    #Use the below given print statements to display the output, in case of success\r\n    #print(\"Account number:\", account_number) \r\n    #print(\"The customer can avail the amount of Rs.\", eligible_loan_amount)\r\n    #print(\"Eligible EMIs :\", bank_emi_expected)\r\n    #print(\"Requested loan amount:\", loan_amount_expected)\r\n    #print(\"Requested EMI's:\",customer_emi_expected)\r\n    \r\n    #Use the below given print statements to display the output, in case of invalid data.\r\n    #print(\"Insufficient account balance\")\r\n    #print(\"The customer is not eligible for the loan\")\r\n    #print(\"Invalid account number\")\r\n    #print(\"Invalid loan type or salary\")\r\n    # Also, do not modify the above print statements for verification to work\r\n    \r\n    \r\n    if loan_type == \"Car\" and salary > 25000 and salary <= 49999 :\r\n        eligible_loan_amount = 500000\r\n        bank_emi_expected = 36\r\n        approved = 1\r\n         \r\n       \r\n    elif loan_type == \"House\" and salary >= 50000 and salary <= 74999 :\r\n        eligible_loan_amount = 6000000\r\n        bank_emi_expected = 60\r\n        approved = 1\r\n    \r\n    elif loan_type == \"Business\" and salary >= 75000  :\r\n        eligible_loan_amount = 7500000\r\n        bank_emi_expected = 84\r\n        approved = 1\r\n         \r\n         \r\n         \r\n         \r\n    if approved == 1 :\r\n        if account_number > 1000 and account_number <= 1999 :\r\n            if account_balance >= 100000 :\r\n                if loan_amount_expected <= eligible_loan_amount and customer_emi_expected <= bank_emi_expected :\r\n                    \r\n                    '''\r\n                    print(\"Account number:\", account_number)\r\n                    print(\"The customer can avail the amount of Rs.\", eligible_loan_amount)\r\n                    print(\"Eligible EMIs :\", bank_emi_expected)\r\n                    print(\"Requested loan amount:\", loan_amount_expected )\r\n                    print(\"Requested EMIs:\", customer_emi_expected)\r\n                    '''\r\n                    \r\n                    print(\"Account number:\", account_number) \r\n                    print(\"The customer can avail the amount of Rs.\", eligible_loan_amount)\r\n                    print(\"Eligible EMIs :\", bank_emi_expected)\r\n                    print(\"Requested loan amount:\", loan_amount_expected)\r\n                    print(\"Requested EMI's:\",customer_emi_expected)\r\n                    #Account number: 1005The customer can avail the amount of Rs. 500000Eligible EMIs : 36Requested loan amount: 300000Requested EMIs: 30 \r\n                else :\r\n                    print(\"The customer is not eligible for the loan \")\r\n            else :\r\n                print(\"Insufficient account balance\")\r\n        else :\r\n            print(\"Invalid account number\")  \r\n    else :\r\n        print(\"Invalid loan type or salary\")\r\n#Test your code for different values and observe the results\r\ncalculate_loan(1001,40000,250000,\"Car\",300000,30)\r\nprint(\"Hello2\")\r\ncalculate_loan(1005,30000,255000,\"Car\",300000,30)\r\n","asgnmtId":"20","SolutionFileName":"Assignment20.py","AsgnmtTyp":"A","TestcaseFileName":""}
2017-01-19 22:00:04,132 INFO  Successfully processed and prepared the input for the verify service
2017-01-19 22:00:04,133 INFO  Successfully set the request parameters for VerifySolution
2017-01-19 22:00:04,133 INFO  Invoking the service to verify the user solution
2017-01-19 22:00:04,134 INFO  Time before invoking service:Thu Jan 19 22:00:04 IST 2017
2017-01-19 22:00:04,134 INFO  Initialising service address for VerifySolution
2017-01-19 22:00:04,135 INFO  Time before invoking service In SUPER:Thu Jan 19 22:00:04 IST 2017
2017-01-19 22:00:06,345 INFO  Time after invoking service In SUPER:Thu Jan 19 22:00:06 IST 2017
2017-01-19 22:00:06,346 INFO  Service responded successfully with required details
2017-01-19 22:00:06,347 INFO  Time after invoking service:Thu Jan 19 22:00:06 IST 2017
2017-01-19 22:00:06,347 INFO  User solution successfully verified
2017-01-19 22:00:06,348 INFO  Processing the response from verify service
2017-01-19 22:00:06,351 INFO  Starting to parse JSON response
2017-01-19 22:00:06,352 ERROR Keys used to parse test result JSON might be incorrect
2017-01-19 22:00:06,352 ERROR Keys used to parse test result JSON might be incorrect
2017-01-19 22:00:06,353 ERROR Keys used to parse test result JSON might be incorrect
2017-01-19 22:00:06,353 ERROR Keys used to parse test result JSON might be incorrect
2017-01-19 22:00:06,354 ERROR Keys used to parse test result JSON might be incorrect
2017-01-19 22:00:06,354 ERROR Keys used to parse test result JSON might be incorrect
2017-01-19 22:00:06,355 ERROR Keys used to parse test result JSON might be incorrect
2017-01-19 22:00:06,355 INFO  Successfully parsed JSON response
2017-01-19 22:00:06,357 INFO  In the process of generating verify response in HTML
2017-01-19 22:00:06,417 INFO  Successfully generated verify response in HTML
2017-01-19 22:00:06,418 INFO  Successfully processed the response from service
2017-01-19 22:03:11,954 INFO  Setting request parameters for VerifySolution
2017-01-19 22:03:11,956 INFO  Initiating to process and prepare Input for the verify service
2017-01-19 22:03:11,958 INFO  Starting to parse the user solution
2017-01-19 22:03:11,959 INFO  Displaying user solution
2017-01-19 22:03:13,156 INFO  Successfully parsed the user solution{"CourseShortName":"PF","UserSolution":"#PF-Assgn-20\r\n\r\ndef calculate_loan(account_number,salary,account_balance,loan_type,loan_amount_expected,customer_emi_expected):\r\n    eligible_loan_amount=0\r\n    bank_emi_expected=0\r\n    approved = 0\r\n    \r\n    #Start writing your code here\r\n    \r\n    \r\n    \r\n    #Populate the variables: eligible_loan_amount and bank_emi_expected \r\n \r\n    #Use the below given print statements to display the output, in case of success\r\n    #print(\"Account number:\", account_number) \r\n    #print(\"The customer can avail the amount of Rs.\", eligible_loan_amount)\r\n    #print(\"Eligible EMIs :\", bank_emi_expected)\r\n    #print(\"Requested loan amount:\", loan_amount_expected)\r\n    #print(\"Requested EMI's:\",customer_emi_expected)\r\n    \r\n    #Use the below given print statements to display the output, in case of invalid data.\r\n    #print(\"Insufficient account balance\")\r\n    #print(\"The customer is not eligible for the loan\")\r\n    #print(\"Invalid account number\")\r\n    #print(\"Invalid loan type or salary\")\r\n    # Also, do not modify the above print statements for verification to work\r\n    \r\n    \r\n    if loan_type == \"Car\" and salary > 25000 and salary <= 49999 :\r\n        eligible_loan_amount = 500000\r\n        bank_emi_expected = 36\r\n        approved = 1\r\n         \r\n       \r\n    elif loan_type == \"House\" and salary >= 50000 and salary <= 74999 :\r\n        eligible_loan_amount = 6000000\r\n        bank_emi_expected = 60\r\n        approved = 1\r\n    \r\n    elif loan_type == \"Business\" and salary >= 75000  :\r\n        eligible_loan_amount = 7500000\r\n        bank_emi_expected = 84\r\n        approved = 1\r\n         \r\n         \r\n         \r\n         \r\n    if approved == 1 :\r\n        if account_number > 1000 and account_number <= 1999 :\r\n            if account_balance >= 100000 :\r\n                if loan_amount_expected <= eligible_loan_amount and customer_emi_expected <= bank_emi_expected :\r\n                    \r\n                    '''\r\n                    print(\"Account number:\", account_number)\r\n                    print(\"The customer can avail the amount of Rs.\", eligible_loan_amount)\r\n                    print(\"Eligible EMIs :\", bank_emi_expected)\r\n                    print(\"Requested loan amount:\", loan_amount_expected )\r\n                    print(\"Requested EMIs:\", customer_emi_expected)\r\n                    '''\r\n                    \r\n                    print(\"Account number:\", account_number) \r\n                    print(\"The customer can avail the amount of Rs.\", eligible_loan_amount)\r\n                    print(\"Eligible EMIs :\", bank_emi_expected)\r\n                    print(\"Requested loan amount:\", loan_amount_expected)\r\n                    print(\"Requested EMI's:\",customer_emi_expected)\r\n                    #Account number: 1005The customer can avail the amount of Rs. 500000Eligible EMIs : 36Requested loan amount: 300000Requested EMIs: 30 \r\n                else :\r\n                    print(\"The customer is not eligible for the loan \")\r\n            else :\r\n                print(\"Insufficient account balance\")\r\n        else :\r\n            print(\"Invalid account number\")  \r\n    else :\r\n        print(\"Invalid loan type or salary\")\r\n#Test your code for different values and observe the results\r\ncalculate_loan(1001,40000,250000,\"Car\",300000,30)\r\nprint(\"Hello2\")\r\ncalculate_loan(1005,30000,255000,\"Car\",300000,30)\r\n","asgnmtId":"20","SolutionFileName":"Assignment20.py","AsgnmtTyp":"A","TestcaseFileName":""}
2017-01-19 22:03:13,156 INFO  Successfully processed and prepared the input for the verify service
2017-01-19 22:03:13,157 INFO  Successfully set the request parameters for VerifySolution
2017-01-19 22:03:13,158 INFO  Invoking the service to verify the user solution
2017-01-19 22:03:13,158 INFO  Time before invoking service:Thu Jan 19 22:03:13 IST 2017
2017-01-19 22:03:13,159 INFO  Initialising service address for VerifySolution
2017-01-19 22:03:13,159 INFO  Time before invoking service In SUPER:Thu Jan 19 22:03:13 IST 2017
2017-01-19 22:03:15,397 INFO  Time after invoking service In SUPER:Thu Jan 19 22:03:15 IST 2017
2017-01-19 22:03:15,397 INFO  Service responded successfully with required details
2017-01-19 22:03:15,398 INFO  Time after invoking service:Thu Jan 19 22:03:15 IST 2017
2017-01-19 22:03:15,399 INFO  User solution successfully verified
2017-01-19 22:03:15,400 INFO  Processing the response from verify service
2017-01-19 22:03:15,402 INFO  Starting to parse JSON response
2017-01-19 22:03:15,403 ERROR Keys used to parse test result JSON might be incorrect
2017-01-19 22:03:15,403 ERROR Keys used to parse test result JSON might be incorrect
2017-01-19 22:03:15,404 ERROR Keys used to parse test result JSON might be incorrect
2017-01-19 22:03:15,404 ERROR Keys used to parse test result JSON might be incorrect
2017-01-19 22:03:15,405 ERROR Keys used to parse test result JSON might be incorrect
2017-01-19 22:03:15,405 ERROR Keys used to parse test result JSON might be incorrect
2017-01-19 22:03:15,406 ERROR Keys used to parse test result JSON might be incorrect
2017-01-19 22:03:15,406 INFO  Successfully parsed JSON response
2017-01-19 22:03:15,408 INFO  In the process of generating verify response in HTML
2017-01-19 22:03:15,468 INFO  Successfully generated verify response in HTML
2017-01-19 22:03:15,469 INFO  Successfully processed the response from service
2017-01-19 22:04:31,292 INFO  Setting request parameters for VerifySolution
2017-01-19 22:04:31,293 INFO  Initiating to process and prepare Input for the verify service
2017-01-19 22:04:31,294 INFO  Starting to parse the user solution
2017-01-19 22:04:31,295 INFO  Displaying user solution
2017-01-19 22:04:31,299 INFO   User Solution is unchanged since the last verification.
2017-01-19 22:04:31,303 INFO  Problem in processing and preparing Input for the verify service
2017-01-19 22:07:01,383 INFO  Setting request parameters for VerifySolution
2017-01-19 22:07:01,384 INFO  Initiating to process and prepare Input for the verify service
2017-01-19 22:07:01,385 INFO  Starting to parse the user solution
2017-01-19 22:07:01,386 INFO  Displaying user solution
2017-01-19 22:07:02,656 INFO  Successfully parsed the user solution{"CourseShortName":"PF","UserSolution":"#PF-Assgn-20\r\n\r\ndef calculate_loan(account_number,salary,account_balance,loan_type,loan_amount_expected,customer_emi_expected):\r\n    eligible_loan_amount=0\r\n    bank_emi_expected=0\r\n    approved = 0\r\n    \r\n    #Start writing your code here\r\n    \r\n    \r\n    \r\n    #Populate the variables: eligible_loan_amount and bank_emi_expected \r\n \r\n    #Use the below given print statements to display the output, in case of success\r\n    #print(\"Account number:\", account_number) \r\n    #print(\"The customer can avail the amount of Rs.\", eligible_loan_amount)\r\n    #print(\"Eligible EMIs :\", bank_emi_expected)\r\n    #print(\"Requested loan amount:\", loan_amount_expected)\r\n    #print(\"Requested EMI's:\",customer_emi_expected)\r\n    \r\n    #Use the below given print statements to display the output, in case of invalid data.\r\n    #print(\"Insufficient account balance\")\r\n    #print(\"The customer is not eligible for the loan\")\r\n    #print(\"Invalid account number\")\r\n    #print(\"Invalid loan type or salary\")\r\n    # Also, do not modify the above print statements for verification to work\r\n    \r\n    \r\n    if loan_type == \"Car\" and salary > 25000 and salary <= 49999 :\r\n        eligible_loan_amount = 500000\r\n        bank_emi_expected = 36\r\n        approved = 1\r\n         \r\n       \r\n    elif loan_type == \"House\" and salary > 50000 and salary < 74999 :\r\n        eligible_loan_amount = 6000000\r\n        bank_emi_expected = 60\r\n        approved = 1\r\n    \r\n    elif loan_type == \"Business\" and salary >= 75000  :\r\n        eligible_loan_amount = 7500000\r\n        bank_emi_expected = 84\r\n        approved = 1\r\n         \r\n         \r\n         \r\n         \r\n    if approved == 1 :\r\n        if account_number > 1000 and account_number <= 1999 :\r\n            if account_balance >= 100000 :\r\n                if loan_amount_expected <= eligible_loan_amount and customer_emi_expected <= bank_emi_expected :\r\n                    \r\n                    '''\r\n                    print(\"Account number:\", account_number)\r\n                    print(\"The customer can avail the amount of Rs.\", eligible_loan_amount)\r\n                    print(\"Eligible EMIs :\", bank_emi_expected)\r\n                    print(\"Requested loan amount:\", loan_amount_expected )\r\n                    print(\"Requested EMIs:\", customer_emi_expected)\r\n                    '''\r\n                    \r\n                    print(\"Account number:\", account_number) \r\n                    print(\"The customer can avail the amount of Rs.\", eligible_loan_amount)\r\n                    print(\"Eligible EMIs :\", bank_emi_expected)\r\n                    print(\"Requested loan amount:\", loan_amount_expected)\r\n                    print(\"Requested EMI's:\",customer_emi_expected)\r\n                    #Account number: 1005The customer can avail the amount of Rs. 500000Eligible EMIs : 36Requested loan amount: 300000Requested EMIs: 30 \r\n                else :\r\n                    print(\"The customer is not eligible for the loan \")\r\n            else :\r\n                print(\"Insufficient account balance\")\r\n        else :\r\n            print(\"Invalid account number\")  \r\n    else :\r\n        print(\"Invalid loan type or salary\")\r\n#Test your code for different values and observe the results\r\ncalculate_loan(1001,40000,250000,\"Car\",300000,30)\r\nprint(\"Hello2\")\r\ncalculate_loan(1005,30000,255000,\"Car\",300000,30)\r\n","asgnmtId":"20","SolutionFileName":"Assignment20.py","AsgnmtTyp":"A","TestcaseFileName":""}
2017-01-19 22:07:02,658 INFO  Successfully processed and prepared the input for the verify service
2017-01-19 22:07:02,659 INFO  Successfully set the request parameters for VerifySolution
2017-01-19 22:07:02,662 INFO  Invoking the service to verify the user solution
2017-01-19 22:07:02,663 INFO  Time before invoking service:Thu Jan 19 22:07:02 IST 2017
2017-01-19 22:07:02,663 INFO  Initialising service address for VerifySolution
2017-01-19 22:07:02,664 INFO  Time before invoking service In SUPER:Thu Jan 19 22:07:02 IST 2017
2017-01-19 22:07:04,856 INFO  Time after invoking service In SUPER:Thu Jan 19 22:07:04 IST 2017
2017-01-19 22:07:04,857 INFO  Service responded successfully with required details
2017-01-19 22:07:04,858 INFO  Time after invoking service:Thu Jan 19 22:07:04 IST 2017
2017-01-19 22:07:04,858 INFO  User solution successfully verified
2017-01-19 22:07:04,859 INFO  Processing the response from verify service
2017-01-19 22:07:04,863 INFO  Starting to parse JSON response
2017-01-19 22:07:04,864 ERROR Keys used to parse test result JSON might be incorrect
2017-01-19 22:07:04,865 ERROR Keys used to parse test result JSON might be incorrect
2017-01-19 22:07:04,866 ERROR Keys used to parse test result JSON might be incorrect
2017-01-19 22:07:04,866 ERROR Keys used to parse test result JSON might be incorrect
2017-01-19 22:07:04,867 ERROR Keys used to parse test result JSON might be incorrect
2017-01-19 22:07:04,867 ERROR Keys used to parse test result JSON might be incorrect
2017-01-19 22:07:04,868 INFO  Successfully parsed JSON response
2017-01-19 22:07:04,869 INFO  In the process of generating verify response in HTML
2017-01-19 22:07:04,932 INFO  Successfully generated verify response in HTML
2017-01-19 22:07:04,932 INFO  Successfully processed the response from service
2017-01-19 22:07:15,783 INFO  Setting request parameters for VerifySolution
2017-01-19 22:07:15,784 INFO  Initiating to process and prepare Input for the verify service
2017-01-19 22:07:15,785 INFO  Starting to parse the user solution
2017-01-19 22:07:15,786 INFO  Displaying user solution
2017-01-19 22:07:17,640 INFO  Successfully parsed the user solution{"CourseShortName":"PF","UserSolution":"#PF-Assgn-20\r\n\r\ndef calculate_loan(account_number,salary,account_balance,loan_type,loan_amount_expected,customer_emi_expected):\r\n    eligible_loan_amount=0\r\n    bank_emi_expected=0\r\n    approved = 0\r\n    \r\n    #Start writing your code here\r\n    \r\n    \r\n    \r\n    #Populate the variables: eligible_loan_amount and bank_emi_expected \r\n \r\n    #Use the below given print statements to display the output, in case of success\r\n    #print(\"Account number:\", account_number) \r\n    #print(\"The customer can avail the amount of Rs.\", eligible_loan_amount)\r\n    #print(\"Eligible EMIs :\", bank_emi_expected)\r\n    #print(\"Requested loan amount:\", loan_amount_expected)\r\n    #print(\"Requested EMI's:\",customer_emi_expected)\r\n    \r\n    #Use the below given print statements to display the output, in case of invalid data.\r\n    #print(\"Insufficient account balance\")\r\n    #print(\"The customer is not eligible for the loan\")\r\n    #print(\"Invalid account number\")\r\n    #print(\"Invalid loan type or salary\")\r\n    # Also, do not modify the above print statements for verification to work\r\n    \r\n    \r\n    if loan_type == \"Car\" and salary > 25000 and salary <= 49999 :\r\n        eligible_loan_amount = 500000\r\n        bank_emi_expected = 36\r\n        approved = 1\r\n         \r\n       \r\n    elif loan_type == \"House\" and salary > 50000 and salary < 74999 :\r\n        eligible_loan_amount = 6000000\r\n        bank_emi_expected = 60\r\n        approved = 1\r\n    \r\n    elif loan_type == \"Business\" and salary > 75000  :\r\n        eligible_loan_amount = 7500000\r\n        bank_emi_expected = 84\r\n        approved = 1\r\n         \r\n         \r\n         \r\n         \r\n    if approved == 1 :\r\n        if account_number > 1000 and account_number <= 1999 :\r\n            if account_balance >= 100000 :\r\n                if loan_amount_expected <= eligible_loan_amount and customer_emi_expected <= bank_emi_expected :\r\n                    \r\n                    '''\r\n                    print(\"Account number:\", account_number)\r\n                    print(\"The customer can avail the amount of Rs.\", eligible_loan_amount)\r\n                    print(\"Eligible EMIs :\", bank_emi_expected)\r\n                    print(\"Requested loan amount:\", loan_amount_expected )\r\n                    print(\"Requested EMIs:\", customer_emi_expected)\r\n                    '''\r\n                    \r\n                    print(\"Account number:\", account_number) \r\n                    print(\"The customer can avail the amount of Rs.\", eligible_loan_amount)\r\n                    print(\"Eligible EMIs :\", bank_emi_expected)\r\n                    print(\"Requested loan amount:\", loan_amount_expected)\r\n                    print(\"Requested EMI's:\",customer_emi_expected)\r\n                    #Account number: 1005The customer can avail the amount of Rs. 500000Eligible EMIs : 36Requested loan amount: 300000Requested EMIs: 30 \r\n                else :\r\n                    print(\"The customer is not eligible for the loan \")\r\n            else :\r\n                print(\"Insufficient account balance\")\r\n        else :\r\n            print(\"Invalid account number\")  \r\n    else :\r\n        print(\"Invalid loan type or salary\")\r\n#Test your code for different values and observe the results\r\ncalculate_loan(1001,40000,250000,\"Car\",300000,30)\r\nprint(\"Hello2\")\r\ncalculate_loan(1005,30000,255000,\"Car\",300000,30)\r\n","asgnmtId":"20","SolutionFileName":"Assignment20.py","AsgnmtTyp":"A","TestcaseFileName":""}
2017-01-19 22:07:17,640 INFO  Successfully processed and prepared the input for the verify service
2017-01-19 22:07:17,641 INFO  Successfully set the request parameters for VerifySolution
2017-01-19 22:07:17,641 INFO  Invoking the service to verify the user solution
2017-01-19 22:07:17,642 INFO  Time before invoking service:Thu Jan 19 22:07:17 IST 2017
2017-01-19 22:07:17,643 INFO  Initialising service address for VerifySolution
2017-01-19 22:07:17,643 INFO  Time before invoking service In SUPER:Thu Jan 19 22:07:17 IST 2017
2017-01-19 22:07:19,756 INFO  Time after invoking service In SUPER:Thu Jan 19 22:07:19 IST 2017
2017-01-19 22:07:19,757 INFO  Service responded successfully with required details
2017-01-19 22:07:19,757 INFO  Time after invoking service:Thu Jan 19 22:07:19 IST 2017
2017-01-19 22:07:19,758 INFO  User solution successfully verified
2017-01-19 22:07:19,759 INFO  Processing the response from verify service
2017-01-19 22:07:19,760 INFO  Starting to parse JSON response
2017-01-19 22:07:19,766 ERROR Keys used to parse test result JSON might be incorrect
2017-01-19 22:07:19,767 ERROR Keys used to parse test result JSON might be incorrect
2017-01-19 22:07:19,767 ERROR Keys used to parse test result JSON might be incorrect
2017-01-19 22:07:19,767 ERROR Keys used to parse test result JSON might be incorrect
2017-01-19 22:07:19,768 ERROR Keys used to parse test result JSON might be incorrect
2017-01-19 22:07:19,769 ERROR Keys used to parse test result JSON might be incorrect
2017-01-19 22:07:19,770 ERROR Keys used to parse test result JSON might be incorrect
2017-01-19 22:07:19,770 ERROR Keys used to parse test result JSON might be incorrect
2017-01-19 22:07:19,771 ERROR Keys used to parse test result JSON might be incorrect
2017-01-19 22:07:19,771 ERROR Keys used to parse test result JSON might be incorrect
2017-01-19 22:07:19,772 INFO  Successfully parsed JSON response
2017-01-19 22:07:19,773 INFO  In the process of generating verify response in HTML
2017-01-19 22:07:19,830 INFO  Successfully generated verify response in HTML
2017-01-19 22:07:19,830 INFO  Successfully processed the response from service
2017-01-19 22:08:05,889 INFO  Setting request parameters for VerifySolution
2017-01-19 22:08:05,891 INFO  Initiating to process and prepare Input for the verify service
2017-01-19 22:08:05,892 INFO  Starting to parse the user solution
2017-01-19 22:08:05,893 INFO  Displaying user solution
2017-01-19 22:08:06,447 INFO  Successfully parsed the user solution{"CourseShortName":"PF","UserSolution":"#PF-Assgn-20\r\n\r\ndef calculate_loan(account_number,salary,account_balance,loan_type,loan_amount_expected,customer_emi_expected):\r\n    eligible_loan_amount=0\r\n    bank_emi_expected=0\r\n    approved = 0\r\n    \r\n    #Start writing your code here\r\n    \r\n    \r\n    \r\n    #Populate the variables: eligible_loan_amount and bank_emi_expected \r\n \r\n    #Use the below given print statements to display the output, in case of success\r\n    #print(\"Account number:\", account_number) \r\n    #print(\"The customer can avail the amount of Rs.\", eligible_loan_amount)\r\n    #print(\"Eligible EMIs :\", bank_emi_expected)\r\n    #print(\"Requested loan amount:\", loan_amount_expected)\r\n    #print(\"Requested EMI's:\",customer_emi_expected)\r\n    \r\n    #Use the below given print statements to display the output, in case of invalid data.\r\n    #print(\"Insufficient account balance\")\r\n    #print(\"The customer is not eligible for the loan\")\r\n    #print(\"Invalid account number\")\r\n    #print(\"Invalid loan type or salary\")\r\n    # Also, do not modify the above print statements for verification to work\r\n    \r\n    \r\n    if loan_type == \"Car\" and salary > 25000 and salary <= 49999 :\r\n        eligible_loan_amount = 500000\r\n        bank_emi_expected = 36\r\n        approved = 1\r\n         \r\n       \r\n    elif loan_type == \"House\" and salary > 50000 and salary < 75000 :\r\n        eligible_loan_amount = 6000000\r\n        bank_emi_expected = 60\r\n        approved = 1\r\n    \r\n    elif loan_type == \"Business\" and salary > 75000  :\r\n        eligible_loan_amount = 7500000\r\n        bank_emi_expected = 84\r\n        approved = 1\r\n         \r\n         \r\n         \r\n         \r\n    if approved == 1 :\r\n        if account_number > 1000 and account_number <= 1999 :\r\n            if account_balance >= 100000 :\r\n                if loan_amount_expected <= eligible_loan_amount and customer_emi_expected <= bank_emi_expected :\r\n                    \r\n                    '''\r\n                    print(\"Account number:\", account_number)\r\n                    print(\"The customer can avail the amount of Rs.\", eligible_loan_amount)\r\n                    print(\"Eligible EMIs :\", bank_emi_expected)\r\n                    print(\"Requested loan amount:\", loan_amount_expected )\r\n                    print(\"Requested EMIs:\", customer_emi_expected)\r\n                    '''\r\n                    \r\n                    print(\"Account number:\", account_number) \r\n                    print(\"The customer can avail the amount of Rs.\", eligible_loan_amount)\r\n                    print(\"Eligible EMIs :\", bank_emi_expected)\r\n                    print(\"Requested loan amount:\", loan_amount_expected)\r\n                    print(\"Requested EMI's:\",customer_emi_expected)\r\n                    #Account number: 1005The customer can avail the amount of Rs. 500000Eligible EMIs : 36Requested loan amount: 300000Requested EMIs: 30 \r\n                else :\r\n                    print(\"The customer is not eligible for the loan \")\r\n            else :\r\n                print(\"Insufficient account balance\")\r\n        else :\r\n            print(\"Invalid account number\")  \r\n    else :\r\n        print(\"Invalid loan type or salary\")\r\n#Test your code for different values and observe the results\r\ncalculate_loan(1001,40000,250000,\"Car\",300000,30)\r\nprint(\"Hello2\")\r\ncalculate_loan(1005,30000,255000,\"Car\",300000,30)\r\n","asgnmtId":"20","SolutionFileName":"Assignment20.py","AsgnmtTyp":"A","TestcaseFileName":""}
2017-01-19 22:08:06,449 INFO  Successfully processed and prepared the input for the verify service
2017-01-19 22:08:06,450 INFO  Successfully set the request parameters for VerifySolution
2017-01-19 22:08:06,450 INFO  Invoking the service to verify the user solution
2017-01-19 22:08:06,451 INFO  Time before invoking service:Thu Jan 19 22:08:06 IST 2017
2017-01-19 22:08:06,452 INFO  Initialising service address for VerifySolution
2017-01-19 22:08:06,453 INFO  Time before invoking service In SUPER:Thu Jan 19 22:08:06 IST 2017
2017-01-19 22:08:08,590 INFO  Time after invoking service In SUPER:Thu Jan 19 22:08:08 IST 2017
2017-01-19 22:08:08,591 INFO  Service responded successfully with required details
2017-01-19 22:08:08,593 INFO  Time after invoking service:Thu Jan 19 22:08:08 IST 2017
2017-01-19 22:08:08,594 INFO  User solution successfully verified
2017-01-19 22:08:08,594 INFO  Processing the response from verify service
2017-01-19 22:08:08,596 INFO  Starting to parse JSON response
2017-01-19 22:08:08,597 ERROR Keys used to parse test result JSON might be incorrect
2017-01-19 22:08:08,597 ERROR Keys used to parse test result JSON might be incorrect
2017-01-19 22:08:08,598 ERROR Keys used to parse test result JSON might be incorrect
2017-01-19 22:08:08,598 ERROR Keys used to parse test result JSON might be incorrect
2017-01-19 22:08:08,600 ERROR Keys used to parse test result JSON might be incorrect
2017-01-19 22:08:08,600 ERROR Keys used to parse test result JSON might be incorrect
2017-01-19 22:08:08,600 ERROR Keys used to parse test result JSON might be incorrect
2017-01-19 22:08:08,601 ERROR Keys used to parse test result JSON might be incorrect
2017-01-19 22:08:08,601 ERROR Keys used to parse test result JSON might be incorrect
2017-01-19 22:08:08,602 ERROR Keys used to parse test result JSON might be incorrect
2017-01-19 22:08:08,602 INFO  Successfully parsed JSON response
2017-01-19 22:08:08,603 INFO  In the process of generating verify response in HTML
2017-01-19 22:08:08,660 INFO  Successfully generated verify response in HTML
2017-01-19 22:08:08,661 INFO  Successfully processed the response from service
2017-01-19 22:08:32,680 INFO  Setting request parameters for VerifySolution
2017-01-19 22:08:32,682 INFO  Initiating to process and prepare Input for the verify service
2017-01-19 22:08:32,683 INFO  Starting to parse the user solution
2017-01-19 22:08:32,684 INFO  Displaying user solution
2017-01-19 22:08:33,532 INFO  Successfully parsed the user solution{"CourseShortName":"PF","UserSolution":"#PF-Assgn-20\r\n\r\ndef calculate_loan(account_number,salary,account_balance,loan_type,loan_amount_expected,customer_emi_expected):\r\n    eligible_loan_amount=0\r\n    bank_emi_expected=0\r\n    approved = 0\r\n    \r\n    #Start writing your code here\r\n    \r\n    \r\n    \r\n    #Populate the variables: eligible_loan_amount and bank_emi_expected \r\n \r\n    #Use the below given print statements to display the output, in case of success\r\n    #print(\"Account number:\", account_number) \r\n    #print(\"The customer can avail the amount of Rs.\", eligible_loan_amount)\r\n    #print(\"Eligible EMIs :\", bank_emi_expected)\r\n    #print(\"Requested loan amount:\", loan_amount_expected)\r\n    #print(\"Requested EMI's:\",customer_emi_expected)\r\n    \r\n    #Use the below given print statements to display the output, in case of invalid data.\r\n    #print(\"Insufficient account balance\")\r\n    #print(\"The customer is not eligible for the loan\")\r\n    #print(\"Invalid account number\")\r\n    #print(\"Invalid loan type or salary\")\r\n    # Also, do not modify the above print statements for verification to work\r\n    \r\n    \r\n    if loan_type == \"Car\" and salary > 25000 and salary <= 50000 :\r\n        eligible_loan_amount = 500000\r\n        bank_emi_expected = 36\r\n        approved = 1\r\n         \r\n       \r\n    elif loan_type == \"House\" and salary > 50000 and salary < 75000 :\r\n        eligible_loan_amount = 6000000\r\n        bank_emi_expected = 60\r\n        approved = 1\r\n    \r\n    elif loan_type == \"Business\" and salary > 75000  :\r\n        eligible_loan_amount = 7500000\r\n        bank_emi_expected = 84\r\n        approved = 1\r\n         \r\n         \r\n         \r\n         \r\n    if approved == 1 :\r\n        if account_number > 1000 and account_number <= 1999 :\r\n            if account_balance >= 100000 :\r\n                if loan_amount_expected <= eligible_loan_amount and customer_emi_expected <= bank_emi_expected :\r\n                    \r\n                    '''\r\n                    print(\"Account number:\", account_number)\r\n                    print(\"The customer can avail the amount of Rs.\", eligible_loan_amount)\r\n                    print(\"Eligible EMIs :\", bank_emi_expected)\r\n                    print(\"Requested loan amount:\", loan_amount_expected )\r\n                    print(\"Requested EMIs:\", customer_emi_expected)\r\n                    '''\r\n                    \r\n                    print(\"Account number:\", account_number) \r\n                    print(\"The customer can avail the amount of Rs.\", eligible_loan_amount)\r\n                    print(\"Eligible EMIs :\", bank_emi_expected)\r\n                    print(\"Requested loan amount:\", loan_amount_expected)\r\n                    print(\"Requested EMI's:\",customer_emi_expected)\r\n                    #Account number: 1005The customer can avail the amount of Rs. 500000Eligible EMIs : 36Requested loan amount: 300000Requested EMIs: 30 \r\n                else :\r\n                    print(\"The customer is not eligible for the loan \")\r\n            else :\r\n                print(\"Insufficient account balance\")\r\n        else :\r\n            print(\"Invalid account number\")  \r\n    else :\r\n        print(\"Invalid loan type or salary\")\r\n#Test your code for different values and observe the results\r\ncalculate_loan(1001,40000,250000,\"Car\",300000,30)\r\nprint(\"Hello2\")\r\ncalculate_loan(1005,30000,255000,\"Car\",300000,30)\r\n","asgnmtId":"20","SolutionFileName":"Assignment20.py","AsgnmtTyp":"A","TestcaseFileName":""}
2017-01-19 22:08:33,533 INFO  Successfully processed and prepared the input for the verify service
2017-01-19 22:08:33,534 INFO  Successfully set the request parameters for VerifySolution
2017-01-19 22:08:33,535 INFO  Invoking the service to verify the user solution
2017-01-19 22:08:33,536 INFO  Time before invoking service:Thu Jan 19 22:08:33 IST 2017
2017-01-19 22:08:33,536 INFO  Initialising service address for VerifySolution
2017-01-19 22:08:33,537 INFO  Time before invoking service In SUPER:Thu Jan 19 22:08:33 IST 2017
2017-01-19 22:08:35,666 INFO  Time after invoking service In SUPER:Thu Jan 19 22:08:35 IST 2017
2017-01-19 22:08:35,667 INFO  Service responded successfully with required details
2017-01-19 22:08:35,668 INFO  Time after invoking service:Thu Jan 19 22:08:35 IST 2017
2017-01-19 22:08:35,669 INFO  User solution successfully verified
2017-01-19 22:08:35,670 INFO  Processing the response from verify service
2017-01-19 22:08:35,670 INFO  Starting to parse JSON response
2017-01-19 22:08:35,673 ERROR Keys used to parse test result JSON might be incorrect
2017-01-19 22:08:35,674 ERROR Keys used to parse test result JSON might be incorrect
2017-01-19 22:08:35,675 ERROR Keys used to parse test result JSON might be incorrect
2017-01-19 22:08:35,675 ERROR Keys used to parse test result JSON might be incorrect
2017-01-19 22:08:35,676 ERROR Keys used to parse test result JSON might be incorrect
2017-01-19 22:08:35,676 ERROR Keys used to parse test result JSON might be incorrect
2017-01-19 22:08:35,677 ERROR Keys used to parse test result JSON might be incorrect
2017-01-19 22:08:35,677 ERROR Keys used to parse test result JSON might be incorrect
2017-01-19 22:08:35,678 ERROR Keys used to parse test result JSON might be incorrect
2017-01-19 22:08:35,682 ERROR Keys used to parse test result JSON might be incorrect
2017-01-19 22:08:35,683 INFO  Successfully parsed JSON response
2017-01-19 22:08:35,685 INFO  In the process of generating verify response in HTML
2017-01-19 22:08:35,753 INFO  Successfully generated verify response in HTML
2017-01-19 22:08:35,754 INFO  Successfully processed the response from service
2017-01-19 22:08:48,673 INFO  Setting request parameters for VerifySolution
2017-01-19 22:08:48,675 INFO  Initiating to process and prepare Input for the verify service
2017-01-19 22:08:48,675 INFO  Starting to parse the user solution
2017-01-19 22:08:48,676 INFO  Displaying user solution
2017-01-19 22:08:49,177 INFO  Successfully parsed the user solution{"CourseShortName":"PF","UserSolution":"#PF-Assgn-20\r\n\r\ndef calculate_loan(account_number,salary,account_balance,loan_type,loan_amount_expected,customer_emi_expected):\r\n    eligible_loan_amount=0\r\n    bank_emi_expected=0\r\n    approved = 0\r\n    \r\n    #Start writing your code here\r\n    \r\n    \r\n    \r\n    #Populate the variables: eligible_loan_amount and bank_emi_expected \r\n \r\n    #Use the below given print statements to display the output, in case of success\r\n    #print(\"Account number:\", account_number) \r\n    #print(\"The customer can avail the amount of Rs.\", eligible_loan_amount)\r\n    #print(\"Eligible EMIs :\", bank_emi_expected)\r\n    #print(\"Requested loan amount:\", loan_amount_expected)\r\n    #print(\"Requested EMI's:\",customer_emi_expected)\r\n    \r\n    #Use the below given print statements to display the output, in case of invalid data.\r\n    #print(\"Insufficient account balance\")\r\n    #print(\"The customer is not eligible for the loan\")\r\n    #print(\"Invalid account number\")\r\n    #print(\"Invalid loan type or salary\")\r\n    # Also, do not modify the above print statements for verification to work\r\n    \r\n    \r\n    if loan_type == \"Car\" and salary >= 25000 and salary <= 50000 :\r\n        eligible_loan_amount = 500000\r\n        bank_emi_expected = 36\r\n        approved = 1\r\n         \r\n       \r\n    elif loan_type == \"House\" and salary > 50000 and salary < 75000 :\r\n        eligible_loan_amount = 6000000\r\n        bank_emi_expected = 60\r\n        approved = 1\r\n    \r\n    elif loan_type == \"Business\" and salary > 75000  :\r\n        eligible_loan_amount = 7500000\r\n        bank_emi_expected = 84\r\n        approved = 1\r\n         \r\n         \r\n         \r\n         \r\n    if approved == 1 :\r\n        if account_number > 1000 and account_number <= 1999 :\r\n            if account_balance >= 100000 :\r\n                if loan_amount_expected <= eligible_loan_amount and customer_emi_expected <= bank_emi_expected :\r\n                    \r\n                    '''\r\n                    print(\"Account number:\", account_number)\r\n                    print(\"The customer can avail the amount of Rs.\", eligible_loan_amount)\r\n                    print(\"Eligible EMIs :\", bank_emi_expected)\r\n                    print(\"Requested loan amount:\", loan_amount_expected )\r\n                    print(\"Requested EMIs:\", customer_emi_expected)\r\n                    '''\r\n                    \r\n                    print(\"Account number:\", account_number) \r\n                    print(\"The customer can avail the amount of Rs.\", eligible_loan_amount)\r\n                    print(\"Eligible EMIs :\", bank_emi_expected)\r\n                    print(\"Requested loan amount:\", loan_amount_expected)\r\n                    print(\"Requested EMI's:\",customer_emi_expected)\r\n                    #Account number: 1005The customer can avail the amount of Rs. 500000Eligible EMIs : 36Requested loan amount: 300000Requested EMIs: 30 \r\n                else :\r\n                    print(\"The customer is not eligible for the loan \")\r\n            else :\r\n                print(\"Insufficient account balance\")\r\n        else :\r\n            print(\"Invalid account number\")  \r\n    else :\r\n        print(\"Invalid loan type or salary\")\r\n#Test your code for different values and observe the results\r\ncalculate_loan(1001,40000,250000,\"Car\",300000,30)\r\nprint(\"Hello2\")\r\ncalculate_loan(1005,30000,255000,\"Car\",300000,30)\r\n","asgnmtId":"20","SolutionFileName":"Assignment20.py","AsgnmtTyp":"A","TestcaseFileName":""}
2017-01-19 22:08:49,178 INFO  Successfully processed and prepared the input for the verify service
2017-01-19 22:08:49,181 INFO  Successfully set the request parameters for VerifySolution
2017-01-19 22:08:49,181 INFO  Invoking the service to verify the user solution
2017-01-19 22:08:49,182 INFO  Time before invoking service:Thu Jan 19 22:08:49 IST 2017
2017-01-19 22:08:49,183 INFO  Initialising service address for VerifySolution
2017-01-19 22:08:49,183 INFO  Time before invoking service In SUPER:Thu Jan 19 22:08:49 IST 2017
2017-01-19 22:08:51,474 INFO  Time after invoking service In SUPER:Thu Jan 19 22:08:51 IST 2017
2017-01-19 22:08:51,474 INFO  Service responded successfully with required details
2017-01-19 22:08:51,476 INFO  Time after invoking service:Thu Jan 19 22:08:51 IST 2017
2017-01-19 22:08:51,477 INFO  User solution successfully verified
2017-01-19 22:08:51,477 INFO  Processing the response from verify service
2017-01-19 22:08:51,479 INFO  Starting to parse JSON response
2017-01-19 22:08:51,480 ERROR Keys used to parse test result JSON might be incorrect
2017-01-19 22:08:51,481 ERROR Keys used to parse test result JSON might be incorrect
2017-01-19 22:08:51,481 ERROR Keys used to parse test result JSON might be incorrect
2017-01-19 22:08:51,482 ERROR Keys used to parse test result JSON might be incorrect
2017-01-19 22:08:51,482 ERROR Keys used to parse test result JSON might be incorrect
2017-01-19 22:08:51,483 ERROR Keys used to parse test result JSON might be incorrect
2017-01-19 22:08:51,483 INFO  Successfully parsed JSON response
2017-01-19 22:08:51,485 INFO  In the process of generating verify response in HTML
2017-01-19 22:08:51,546 INFO  Successfully generated verify response in HTML
2017-01-19 22:08:51,547 INFO  Successfully processed the response from service
2017-01-19 22:08:56,426 INFO  Setting request parameters for VerifySolution
2017-01-19 22:08:56,429 INFO  Initiating to process and prepare Input for the verify service
2017-01-19 22:08:56,430 INFO  Starting to parse the user solution
2017-01-19 22:08:56,432 INFO  Displaying user solution
2017-01-19 22:08:56,434 INFO   User Solution is unchanged since the last verification.
2017-01-19 22:08:56,438 INFO  Problem in processing and preparing Input for the verify service
2017-01-19 22:09:10,322 INFO  Setting request parameters for VerifySolution
2017-01-19 22:09:10,323 INFO  Initiating to process and prepare Input for the verify service
2017-01-19 22:09:10,323 INFO  Starting to parse the user solution
2017-01-19 22:09:10,326 INFO  Displaying user solution
2017-01-19 22:09:11,143 INFO  Successfully parsed the user solution{"CourseShortName":"PF","UserSolution":"#PF-Assgn-20\r\n\r\ndef calculate_loan(account_number,salary,account_balance,loan_type,loan_amount_expected,customer_emi_expected):\r\n    eligible_loan_amount=0\r\n    bank_emi_expected=0\r\n    approved = 0\r\n    \r\n    #Start writing your code here\r\n    \r\n    \r\n    \r\n    #Populate the variables: eligible_loan_amount and bank_emi_expected \r\n \r\n    #Use the below given print statements to display the output, in case of success\r\n    #print(\"Account number:\", account_number) \r\n    #print(\"The customer can avail the amount of Rs.\", eligible_loan_amount)\r\n    #print(\"Eligible EMIs :\", bank_emi_expected)\r\n    #print(\"Requested loan amount:\", loan_amount_expected)\r\n    #print(\"Requested EMI's:\",customer_emi_expected)\r\n    \r\n    #Use the below given print statements to display the output, in case of invalid data.\r\n    #print(\"Insufficient account balance\")\r\n    #print(\"The customer is not eligible for the loan\")\r\n    #print(\"Invalid account number\")\r\n    #print(\"Invalid loan type or salary\")\r\n    # Also, do not modify the above print statements for verification to work\r\n    \r\n    \r\n    if loan_type == \"Car\" and salary > 25000 and salary <= 50000 :\r\n        eligible_loan_amount = 500000\r\n        bank_emi_expected = 36\r\n        approved = 1\r\n         \r\n       \r\n    elif loan_type == \"House\" and salary > 50000 and salary < 75000 :\r\n        eligible_loan_amount = 6000000\r\n        bank_emi_expected = 60\r\n        approved = 1\r\n    \r\n    elif loan_type == \"Business\" and salary > 75000  :\r\n        eligible_loan_amount = 7500000\r\n        bank_emi_expected = 84\r\n        approved = 1\r\n         \r\n         \r\n         \r\n         \r\n    if approved == 1 :\r\n        if account_number > 1000 and account_number <= 1999 :\r\n            if account_balance >= 100000 :\r\n                if loan_amount_expected <= eligible_loan_amount and customer_emi_expected <= bank_emi_expected :\r\n                    \r\n                    '''\r\n                    print(\"Account number:\", account_number)\r\n                    print(\"The customer can avail the amount of Rs.\", eligible_loan_amount)\r\n                    print(\"Eligible EMIs :\", bank_emi_expected)\r\n                    print(\"Requested loan amount:\", loan_amount_expected )\r\n                    print(\"Requested EMIs:\", customer_emi_expected)\r\n                    '''\r\n                    \r\n                    print(\"Account number:\", account_number) \r\n                    print(\"The customer can avail the amount of Rs.\", eligible_loan_amount)\r\n                    print(\"Eligible EMIs :\", bank_emi_expected)\r\n                    print(\"Requested loan amount:\", loan_amount_expected)\r\n                    print(\"Requested EMI's:\",customer_emi_expected)\r\n                    #Account number: 1005The customer can avail the amount of Rs. 500000Eligible EMIs : 36Requested loan amount: 300000Requested EMIs: 30 \r\n                else :\r\n                    print(\"The customer is not eligible for the loan \")\r\n            else :\r\n                print(\"Insufficient account balance\")\r\n        else :\r\n            print(\"Invalid account number\")  \r\n    else :\r\n        print(\"Invalid loan type or salary\")\r\n#Test your code for different values and observe the results\r\ncalculate_loan(1001,40000,250000,\"Car\",300000,30)\r\nprint(\"Hello2\")\r\ncalculate_loan(1005,30000,255000,\"Car\",300000,30)\r\n","asgnmtId":"20","SolutionFileName":"Assignment20.py","AsgnmtTyp":"A","TestcaseFileName":""}
2017-01-19 22:09:11,144 INFO  Successfully processed and prepared the input for the verify service
2017-01-19 22:09:11,145 INFO  Successfully set the request parameters for VerifySolution
2017-01-19 22:09:11,145 INFO  Invoking the service to verify the user solution
2017-01-19 22:09:11,145 INFO  Time before invoking service:Thu Jan 19 22:09:11 IST 2017
2017-01-19 22:09:11,146 INFO  Initialising service address for VerifySolution
2017-01-19 22:09:11,146 INFO  Time before invoking service In SUPER:Thu Jan 19 22:09:11 IST 2017
2017-01-19 22:09:13,360 INFO  Time after invoking service In SUPER:Thu Jan 19 22:09:13 IST 2017
2017-01-19 22:09:13,361 INFO  Service responded successfully with required details
2017-01-19 22:09:13,362 INFO  Time after invoking service:Thu Jan 19 22:09:13 IST 2017
2017-01-19 22:09:13,363 INFO  User solution successfully verified
2017-01-19 22:09:13,363 INFO  Processing the response from verify service
2017-01-19 22:09:13,365 INFO  Starting to parse JSON response
2017-01-19 22:09:13,366 ERROR Keys used to parse test result JSON might be incorrect
2017-01-19 22:09:13,368 ERROR Keys used to parse test result JSON might be incorrect
2017-01-19 22:09:13,369 ERROR Keys used to parse test result JSON might be incorrect
2017-01-19 22:09:13,370 ERROR Keys used to parse test result JSON might be incorrect
2017-01-19 22:09:13,370 ERROR Keys used to parse test result JSON might be incorrect
2017-01-19 22:09:13,371 ERROR Keys used to parse test result JSON might be incorrect
2017-01-19 22:09:13,371 ERROR Keys used to parse test result JSON might be incorrect
2017-01-19 22:09:13,372 ERROR Keys used to parse test result JSON might be incorrect
2017-01-19 22:09:13,372 ERROR Keys used to parse test result JSON might be incorrect
2017-01-19 22:09:13,373 ERROR Keys used to parse test result JSON might be incorrect
2017-01-19 22:09:13,373 INFO  Successfully parsed JSON response
2017-01-19 22:09:13,374 INFO  In the process of generating verify response in HTML
2017-01-19 22:09:13,426 INFO  Successfully generated verify response in HTML
2017-01-19 22:09:13,427 INFO  Successfully processed the response from service
2017-01-19 22:09:30,826 INFO  Setting request parameters for VerifySolution
2017-01-19 22:09:30,827 INFO  Initiating to process and prepare Input for the verify service
2017-01-19 22:09:30,828 INFO  Starting to parse the user solution
2017-01-19 22:09:30,829 INFO  Displaying user solution
2017-01-19 22:09:31,666 INFO  Successfully parsed the user solution{"CourseShortName":"PF","UserSolution":"#PF-Assgn-20\r\n\r\ndef calculate_loan(account_number,salary,account_balance,loan_type,loan_amount_expected,customer_emi_expected):\r\n    eligible_loan_amount=0\r\n    bank_emi_expected=0\r\n    approved = 0\r\n    \r\n    #Start writing your code here\r\n    \r\n    \r\n    \r\n    #Populate the variables: eligible_loan_amount and bank_emi_expected \r\n \r\n    #Use the below given print statements to display the output, in case of success\r\n    #print(\"Account number:\", account_number) \r\n    #print(\"The customer can avail the amount of Rs.\", eligible_loan_amount)\r\n    #print(\"Eligible EMIs :\", bank_emi_expected)\r\n    #print(\"Requested loan amount:\", loan_amount_expected)\r\n    #print(\"Requested EMI's:\",customer_emi_expected)\r\n    \r\n    #Use the below given print statements to display the output, in case of invalid data.\r\n    #print(\"Insufficient account balance\")\r\n    #print(\"The customer is not eligible for the loan\")\r\n    #print(\"Invalid account number\")\r\n    #print(\"Invalid loan type or salary\")\r\n    # Also, do not modify the above print statements for verification to work\r\n    \r\n    \r\n    if loan_type == \"Car\" and salary >= 25000 and salary <= 50000 :\r\n        eligible_loan_amount = 500000\r\n        bank_emi_expected = 36\r\n        approved = 1\r\n         \r\n       \r\n    elif loan_type == \"House\" and salary > 50000 and salary < 75000 :\r\n        eligible_loan_amount = 6000000\r\n        bank_emi_expected = 60\r\n        approved = 1\r\n    \r\n    elif loan_type == \"Business\" and salary > 75000  :\r\n        eligible_loan_amount = 7500000\r\n        bank_emi_expected = 84\r\n        approved = 1\r\n         \r\n         \r\n         \r\n         \r\n    if approved == 1 :\r\n        if account_number > 1000 and account_number <= 1999 :\r\n            if account_balance >= 100000 :\r\n                if loan_amount_expected <= eligible_loan_amount and customer_emi_expected <= bank_emi_expected :\r\n                    \r\n                    '''\r\n                    print(\"Account number:\", account_number)\r\n                    print(\"The customer can avail the amount of Rs.\", eligible_loan_amount)\r\n                    print(\"Eligible EMIs :\", bank_emi_expected)\r\n                    print(\"Requested loan amount:\", loan_amount_expected )\r\n                    print(\"Requested EMIs:\", customer_emi_expected)\r\n                    '''\r\n                    \r\n                    print(\"Account number:\", account_number) \r\n                    print(\"The customer can avail the amount of Rs.\", eligible_loan_amount)\r\n                    print(\"Eligible EMIs :\", bank_emi_expected)\r\n                    print(\"Requested loan amount:\", loan_amount_expected)\r\n                    print(\"Requested EMI's:\",customer_emi_expected)\r\n                    #Account number: 1005The customer can avail the amount of Rs. 500000Eligible EMIs : 36Requested loan amount: 300000Requested EMIs: 30 \r\n                else :\r\n                    print(\"The customer is not eligible for the loan \")\r\n            else :\r\n                print(\"Insufficient account balance\")\r\n        else :\r\n            print(\"Invalid account number\")  \r\n    else :\r\n        print(\"Invalid loan type or salary\")\r\n#Test your code for different values and observe the results\r\ncalculate_loan(1001,40000,250000,\"Car\",300000,30)\r\nprint(\"Hello2\")\r\ncalculate_loan(1005,30000,255000,\"Car\",300000,30)\r\n","asgnmtId":"20","SolutionFileName":"Assignment20.py","AsgnmtTyp":"A","TestcaseFileName":""}
2017-01-19 22:09:31,669 INFO  Successfully processed and prepared the input for the verify service
2017-01-19 22:09:31,670 INFO  Successfully set the request parameters for VerifySolution
2017-01-19 22:09:31,670 INFO  Invoking the service to verify the user solution
2017-01-19 22:09:31,671 INFO  Time before invoking service:Thu Jan 19 22:09:31 IST 2017
2017-01-19 22:09:31,671 INFO  Initialising service address for VerifySolution
2017-01-19 22:09:31,672 INFO  Time before invoking service In SUPER:Thu Jan 19 22:09:31 IST 2017
2017-01-19 22:09:33,801 INFO  Time after invoking service In SUPER:Thu Jan 19 22:09:33 IST 2017
2017-01-19 22:09:33,802 INFO  Service responded successfully with required details
2017-01-19 22:09:33,802 INFO  Time after invoking service:Thu Jan 19 22:09:33 IST 2017
2017-01-19 22:09:33,803 INFO  User solution successfully verified
2017-01-19 22:09:33,804 INFO  Processing the response from verify service
2017-01-19 22:09:33,805 INFO  Starting to parse JSON response
2017-01-19 22:09:33,806 ERROR Keys used to parse test result JSON might be incorrect
2017-01-19 22:09:33,807 ERROR Keys used to parse test result JSON might be incorrect
2017-01-19 22:09:33,807 ERROR Keys used to parse test result JSON might be incorrect
2017-01-19 22:09:33,807 ERROR Keys used to parse test result JSON might be incorrect
2017-01-19 22:09:33,807 ERROR Keys used to parse test result JSON might be incorrect
2017-01-19 22:09:33,808 ERROR Keys used to parse test result JSON might be incorrect
2017-01-19 22:09:33,809 INFO  Successfully parsed JSON response
2017-01-19 22:09:33,810 INFO  In the process of generating verify response in HTML
2017-01-19 22:09:33,864 INFO  Successfully generated verify response in HTML
2017-01-19 22:09:33,865 INFO  Successfully processed the response from service
2017-01-19 22:11:44,925 INFO  Setting request parameters for VerifySolution
2017-01-19 22:11:44,926 INFO  Initiating to process and prepare Input for the verify service
2017-01-19 22:11:44,927 INFO  Starting to parse the user solution
2017-01-19 22:11:44,928 INFO  Displaying user solution
2017-01-19 22:11:45,394 INFO  Successfully parsed the user solution{"CourseShortName":"PF","UserSolution":"#PF-Assgn-20\r\n\r\ndef calculate_loan(account_number,salary,account_balance,loan_type,loan_amount_expected,customer_emi_expected):\r\n    eligible_loan_amount=0\r\n    bank_emi_expected=0\r\n    approved = 0\r\n    \r\n    #Start writing your code here\r\n    \r\n    \r\n    \r\n    #Populate the variables: eligible_loan_amount and bank_emi_expected \r\n \r\n    #Use the below given print statements to display the output, in case of success\r\n    #print(\"Account number:\", account_number) \r\n    #print(\"The customer can avail the amount of Rs.\", eligible_loan_amount)\r\n    #print(\"Eligible EMIs :\", bank_emi_expected)\r\n    #print(\"Requested loan amount:\", loan_amount_expected)\r\n    #print(\"Requested EMI's:\",customer_emi_expected)\r\n    \r\n    #Use the below given print statements to display the output, in case of invalid data.\r\n    #print(\"Insufficient account balance\")\r\n    #print(\"The customer is not eligible for the loan\")\r\n    #print(\"Invalid account number\")\r\n    #print(\"Invalid loan type or salary\")\r\n    # Also, do not modify the above print statements for verification to work\r\n    \r\n    \r\n    if loan_type == \"Car\" and salary > 25000 and salary <= 50000 :\r\n        eligible_loan_amount = 500000\r\n        bank_emi_expected = 36\r\n        approved = 1\r\n         \r\n       \r\n    elif loan_type == \"House\" and salary > 50000 and salary < 75000 :\r\n        eligible_loan_amount = 6000000\r\n        bank_emi_expected = 60\r\n        approved = 1\r\n    \r\n    elif loan_type == \"Business\" and salary > 75000  :\r\n        eligible_loan_amount = 7500000\r\n        bank_emi_expected = 84\r\n        approved = 1\r\n         \r\n         \r\n         \r\n         \r\n    if approved == 1 :\r\n        if account_number > 1000 and account_number <= 1999 :\r\n            if account_balance >= 100000 :\r\n                if loan_amount_expected <= eligible_loan_amount and customer_emi_expected <= bank_emi_expected :\r\n                    \r\n                    '''\r\n                    print(\"Account number:\", account_number)\r\n                    print(\"The customer can avail the amount of Rs.\", eligible_loan_amount)\r\n                    print(\"Eligible EMIs :\", bank_emi_expected)\r\n                    print(\"Requested loan amount:\", loan_amount_expected )\r\n                    print(\"Requested EMIs:\", customer_emi_expected)\r\n                    '''\r\n                    \r\n                    print(\"Account number:\", account_number) \r\n                    print(\"The customer can avail the amount of Rs.\", eligible_loan_amount)\r\n                    print(\"Eligible EMIs :\", bank_emi_expected)\r\n                    print(\"Requested loan amount:\", loan_amount_expected)\r\n                    print(\"Requested EMI's:\",customer_emi_expected)\r\n                    #Account number: 1005The customer can avail the amount of Rs. 500000Eligible EMIs : 36Requested loan amount: 300000Requested EMIs: 30 \r\n                else :\r\n                    print(\"The customer is not eligible for the loan \")\r\n            else :\r\n                print(\"Insufficient account balance\")\r\n        else :\r\n            print(\"Invalid account number\")  \r\n    else :\r\n        print(\"Invalid loan type or salary\")\r\n#Test your code for different values and observe the results\r\ncalculate_loan(1001,40000,250000,\"Car\",300000,30)\r\nprint(\"Hello2\")\r\ncalculate_loan(1005,30000,255000,\"Car\",300000,30)\r\n","asgnmtId":"20","SolutionFileName":"Assignment20.py","AsgnmtTyp":"A","TestcaseFileName":""}
2017-01-19 22:11:45,396 INFO  Successfully processed and prepared the input for the verify service
2017-01-19 22:11:45,396 INFO  Successfully set the request parameters for VerifySolution
2017-01-19 22:11:45,397 INFO  Invoking the service to verify the user solution
2017-01-19 22:11:45,398 INFO  Time before invoking service:Thu Jan 19 22:11:45 IST 2017
2017-01-19 22:11:45,398 INFO  Initialising service address for VerifySolution
2017-01-19 22:11:45,398 INFO  Time before invoking service In SUPER:Thu Jan 19 22:11:45 IST 2017
2017-01-19 22:11:47,582 INFO  Time after invoking service In SUPER:Thu Jan 19 22:11:47 IST 2017
2017-01-19 22:11:47,583 INFO  Service responded successfully with required details
2017-01-19 22:11:47,584 INFO  Time after invoking service:Thu Jan 19 22:11:47 IST 2017
2017-01-19 22:11:47,584 INFO  User solution successfully verified
2017-01-19 22:11:47,585 INFO  Processing the response from verify service
2017-01-19 22:11:47,588 INFO  Starting to parse JSON response
2017-01-19 22:11:47,590 ERROR Keys used to parse test result JSON might be incorrect
2017-01-19 22:11:47,591 ERROR Keys used to parse test result JSON might be incorrect
2017-01-19 22:11:47,591 ERROR Keys used to parse test result JSON might be incorrect
2017-01-19 22:11:47,591 ERROR Keys used to parse test result JSON might be incorrect
2017-01-19 22:11:47,592 ERROR Keys used to parse test result JSON might be incorrect
2017-01-19 22:11:47,593 ERROR Keys used to parse test result JSON might be incorrect
2017-01-19 22:11:47,593 ERROR Keys used to parse test result JSON might be incorrect
2017-01-19 22:11:47,594 ERROR Keys used to parse test result JSON might be incorrect
2017-01-19 22:11:47,594 ERROR Keys used to parse test result JSON might be incorrect
2017-01-19 22:11:47,594 ERROR Keys used to parse test result JSON might be incorrect
2017-01-19 22:11:47,595 INFO  Successfully parsed JSON response
2017-01-19 22:11:47,596 INFO  In the process of generating verify response in HTML
2017-01-19 22:11:47,684 INFO  Successfully generated verify response in HTML
2017-01-19 22:11:47,684 INFO  Successfully processed the response from service
2017-01-19 22:12:18,022 INFO  Setting request parameters for VerifySolution
2017-01-19 22:12:18,026 INFO  Initiating to process and prepare Input for the verify service
2017-01-19 22:12:18,026 INFO  Starting to parse the user solution
2017-01-19 22:12:18,027 INFO  Displaying user solution
2017-01-19 22:12:18,544 INFO  Successfully parsed the user solution{"CourseShortName":"PF","UserSolution":"#PF-Assgn-20\r\n\r\ndef calculate_loan(account_number,salary,account_balance,loan_type,loan_amount_expected,customer_emi_expected):\r\n    eligible_loan_amount=0\r\n    bank_emi_expected=0\r\n    approved = 0\r\n    \r\n    #Start writing your code here\r\n    \r\n    \r\n    \r\n    #Populate the variables: eligible_loan_amount and bank_emi_expected \r\n \r\n    #Use the below given print statements to display the output, in case of success\r\n    #print(\"Account number:\", account_number) \r\n    #print(\"The customer can avail the amount of Rs.\", eligible_loan_amount)\r\n    #print(\"Eligible EMIs :\", bank_emi_expected)\r\n    #print(\"Requested loan amount:\", loan_amount_expected)\r\n    #print(\"Requested EMI's:\",customer_emi_expected)\r\n    \r\n    #Use the below given print statements to display the output, in case of invalid data.\r\n    #print(\"Insufficient account balance\")\r\n    #print(\"The customer is not eligible for the loan\")\r\n    #print(\"Invalid account number\")\r\n    #print(\"Invalid loan type or salary\")\r\n    # Also, do not modify the above print statements for verification to work\r\n    \r\n    \r\n    if loan_type == \"Car\" and salary >= 25000 and salary <= 50000 :\r\n        eligible_loan_amount = 500000\r\n        bank_emi_expected = 36\r\n        approved = 1\r\n         \r\n       \r\n    elif loan_type == \"House\" and salary > 50000 and salary < 75000 :\r\n        eligible_loan_amount = 6000000\r\n        bank_emi_expected = 60\r\n        approved = 1\r\n    \r\n    elif loan_type == \"Business\" and salary > 75000  :\r\n        eligible_loan_amount = 7500000\r\n        bank_emi_expected = 84\r\n        approved = 1\r\n         \r\n         \r\n         \r\n         \r\n    if approved == 1 :\r\n        if account_number > 1000 and account_number <= 1999 :\r\n            if account_balance >= 100000 :\r\n                if loan_amount_expected <= eligible_loan_amount and customer_emi_expected <= bank_emi_expected :\r\n                    \r\n                    '''\r\n                    print(\"Account number:\", account_number)\r\n                    print(\"The customer can avail the amount of Rs.\", eligible_loan_amount)\r\n                    print(\"Eligible EMIs :\", bank_emi_expected)\r\n                    print(\"Requested loan amount:\", loan_amount_expected )\r\n                    print(\"Requested EMIs:\", customer_emi_expected)\r\n                    '''\r\n                    \r\n                    print(\"Account number:\", account_number) \r\n                    print(\"The customer can avail the amount of Rs.\", eligible_loan_amount)\r\n                    print(\"Eligible EMIs :\", bank_emi_expected)\r\n                    print(\"Requested loan amount:\", loan_amount_expected)\r\n                    print(\"Requested EMI's:\",customer_emi_expected)\r\n                    #Account number: 1005The customer can avail the amount of Rs. 500000Eligible EMIs : 36Requested loan amount: 300000Requested EMIs: 30 \r\n                else :\r\n                    print(\"The customer is not eligible for the loan \")\r\n            else :\r\n                print(\"Insufficient account balance\")\r\n        else :\r\n            print(\"Invalid account number\")  \r\n    else :\r\n        print(\"Invalid loan type or salary\")\r\n#Test your code for different values and observe the results\r\ncalculate_loan(1001,40000,250000,\"Car\",300000,30)\r\nprint(\"Hello2\")\r\ncalculate_loan(1005,30000,255000,\"Car\",300000,30)\r\n","asgnmtId":"20","SolutionFileName":"Assignment20.py","AsgnmtTyp":"A","TestcaseFileName":""}
2017-01-19 22:12:18,545 INFO  Successfully processed and prepared the input for the verify service
2017-01-19 22:12:18,545 INFO  Successfully set the request parameters for VerifySolution
2017-01-19 22:12:18,546 INFO  Invoking the service to verify the user solution
2017-01-19 22:12:18,547 INFO  Time before invoking service:Thu Jan 19 22:12:18 IST 2017
2017-01-19 22:12:18,548 INFO  Initialising service address for VerifySolution
2017-01-19 22:12:18,548 INFO  Time before invoking service In SUPER:Thu Jan 19 22:12:18 IST 2017
2017-01-19 22:12:20,588 INFO  Time after invoking service In SUPER:Thu Jan 19 22:12:20 IST 2017
2017-01-19 22:12:20,589 INFO  Service responded successfully with required details
2017-01-19 22:12:20,590 INFO  Time after invoking service:Thu Jan 19 22:12:20 IST 2017
2017-01-19 22:12:20,590 INFO  User solution successfully verified
2017-01-19 22:12:20,591 INFO  Processing the response from verify service
2017-01-19 22:12:20,592 INFO  Starting to parse JSON response
2017-01-19 22:12:20,594 ERROR Keys used to parse test result JSON might be incorrect
2017-01-19 22:12:20,594 ERROR Keys used to parse test result JSON might be incorrect
2017-01-19 22:12:20,595 ERROR Keys used to parse test result JSON might be incorrect
2017-01-19 22:12:20,595 ERROR Keys used to parse test result JSON might be incorrect
2017-01-19 22:12:20,596 ERROR Keys used to parse test result JSON might be incorrect
2017-01-19 22:12:20,596 ERROR Keys used to parse test result JSON might be incorrect
2017-01-19 22:12:20,598 INFO  Successfully parsed JSON response
2017-01-19 22:12:20,599 INFO  In the process of generating verify response in HTML
2017-01-19 22:12:20,659 INFO  Successfully generated verify response in HTML
2017-01-19 22:12:20,660 INFO  Successfully processed the response from service
2017-01-19 22:13:27,295 INFO  Setting request parameters for VerifySolution
2017-01-19 22:13:27,296 INFO  Initiating to process and prepare Input for the verify service
2017-01-19 22:13:27,296 INFO  Starting to parse the user solution
2017-01-19 22:13:27,299 INFO  Displaying user solution
2017-01-19 22:13:28,511 INFO  Successfully parsed the user solution{"CourseShortName":"PF","UserSolution":"#PF-Assgn-20\r\n\r\ndef calculate_loan(account_number,salary,account_balance,loan_type,loan_amount_expected,customer_emi_expected):\r\n    eligible_loan_amount=0\r\n    bank_emi_expected=0\r\n    approved = 0\r\n    \r\n    #Start writing your code here\r\n    \r\n    \r\n    \r\n    #Populate the variables: eligible_loan_amount and bank_emi_expected \r\n \r\n    #Use the below given print statements to display the output, in case of success\r\n    #print(\"Account number:\", account_number) \r\n    #print(\"The customer can avail the amount of Rs.\", eligible_loan_amount)\r\n    #print(\"Eligible EMIs :\", bank_emi_expected)\r\n    #print(\"Requested loan amount:\", loan_amount_expected)\r\n    #print(\"Requested EMI's:\",customer_emi_expected)\r\n    \r\n    #Use the below given print statements to display the output, in case of invalid data.\r\n    #print(\"Insufficient account balance\")\r\n    #print(\"The customer is not eligible for the loan\")\r\n    #print(\"Invalid account number\")\r\n    #print(\"Invalid loan type or salary\")\r\n    # Also, do not modify the above print statements for verification to work\r\n    \r\n    \r\n    if loan_type == \"Car\" and salary > 25000 and salary <= 50000 :\r\n        eligible_loan_amount = 500000\r\n        bank_emi_expected = 36\r\n        approved = 1\r\n         \r\n       \r\n    elif loan_type == \"House\" and salary > 50000 and salary < 75000 :\r\n        eligible_loan_amount = 6000000\r\n        bank_emi_expected = 60\r\n        approved = 1\r\n    \r\n    elif loan_type == \"Business\" and salary > 75000  :\r\n        eligible_loan_amount = 7500000\r\n        bank_emi_expected = 84\r\n        approved = 1\r\n         \r\n         \r\n         \r\n         \r\n    if approved == 1 :\r\n        if account_number > 1000 and account_number <= 1999 :\r\n            if account_balance >= 100000 :\r\n                if loan_amount_expected <= eligible_loan_amount and customer_emi_expected <= bank_emi_expected :\r\n                    \r\n                    '''\r\n                    print(\"Account number:\", account_number)\r\n                    print(\"The customer can avail the amount of Rs.\", eligible_loan_amount)\r\n                    print(\"Eligible EMIs :\", bank_emi_expected)\r\n                    print(\"Requested loan amount:\", loan_amount_expected )\r\n                    print(\"Requested EMIs:\", customer_emi_expected)\r\n                    '''\r\n                    \r\n                    print(\"Account number:\", account_number) \r\n                    print(\"The customer can avail the amount of Rs.\", eligible_loan_amount)\r\n                    print(\"Eligible EMIs :\", bank_emi_expected)\r\n                    print(\"Requested loan amount:\", loan_amount_expected)\r\n                    print(\"Requested EMI's:\",customer_emi_expected)\r\n                    #Account number: 1005The customer can avail the amount of Rs. 500000Eligible EMIs : 36Requested loan amount: 300000Requested EMIs: 30 \r\n                else :\r\n                    print(\"The customer is not eligible for the loan \")\r\n            else :\r\n                print(\"Insufficient account balance\")\r\n        else :\r\n            print(\"Invalid account number\")  \r\n    else :\r\n        print(\"Invalid loan type or salary\")\r\n#Test your code for different values and observe the results\r\ncalculate_loan(1001,40000,250000,\"Car\",300000,30)\r\nprint(\"Hello2\")\r\ncalculate_loan(1005,30000,255000,\"Car\",300000,30)\r\n","asgnmtId":"20","SolutionFileName":"Assignment20.py","AsgnmtTyp":"A","TestcaseFileName":""}
2017-01-19 22:13:28,704 INFO  Successfully processed and prepared the input for the verify service
2017-01-19 22:13:28,706 INFO  Successfully set the request parameters for VerifySolution
2017-01-19 22:13:28,706 INFO  Invoking the service to verify the user solution
2017-01-19 22:13:28,707 INFO  Time before invoking service:Thu Jan 19 22:13:28 IST 2017
2017-01-19 22:13:28,707 INFO  Initialising service address for VerifySolution
2017-01-19 22:13:28,708 INFO  Time before invoking service In SUPER:Thu Jan 19 22:13:28 IST 2017
2017-01-19 22:13:30,779 INFO  Time after invoking service In SUPER:Thu Jan 19 22:13:30 IST 2017
2017-01-19 22:13:30,780 INFO  Service responded successfully with required details
2017-01-19 22:13:30,781 INFO  Time after invoking service:Thu Jan 19 22:13:30 IST 2017
2017-01-19 22:13:30,781 INFO  User solution successfully verified
2017-01-19 22:13:30,782 INFO  Processing the response from verify service
2017-01-19 22:13:30,784 INFO  Starting to parse JSON response
2017-01-19 22:13:30,786 ERROR Keys used to parse test result JSON might be incorrect
2017-01-19 22:13:30,787 ERROR Keys used to parse test result JSON might be incorrect
2017-01-19 22:13:30,787 ERROR Keys used to parse test result JSON might be incorrect
2017-01-19 22:13:30,788 ERROR Keys used to parse test result JSON might be incorrect
2017-01-19 22:13:30,788 ERROR Keys used to parse test result JSON might be incorrect
2017-01-19 22:13:30,788 ERROR Keys used to parse test result JSON might be incorrect
2017-01-19 22:13:30,789 ERROR Keys used to parse test result JSON might be incorrect
2017-01-19 22:13:30,789 ERROR Keys used to parse test result JSON might be incorrect
2017-01-19 22:13:30,789 ERROR Keys used to parse test result JSON might be incorrect
2017-01-19 22:13:30,790 ERROR Keys used to parse test result JSON might be incorrect
2017-01-19 22:13:30,790 INFO  Successfully parsed JSON response
2017-01-19 22:13:30,792 INFO  In the process of generating verify response in HTML
2017-01-19 22:13:30,851 INFO  Successfully generated verify response in HTML
2017-01-19 22:13:30,851 INFO  Successfully processed the response from service
2017-01-19 22:14:35,912 INFO  Setting request parameters for VerifySolution
2017-01-19 22:14:35,917 INFO  Initiating to process and prepare Input for the verify service
2017-01-19 22:14:35,917 INFO  Starting to parse the user solution
2017-01-19 22:14:35,919 INFO  Displaying user solution
2017-01-19 22:14:36,769 INFO  Successfully parsed the user solution{"CourseShortName":"PF","UserSolution":"#PF-Assgn-20\r\n\r\ndef calculate_loan(account_number,salary,account_balance,loan_type,loan_amount_expected,customer_emi_expected):\r\n    eligible_loan_amount=0\r\n    bank_emi_expected=0\r\n    approved = 0\r\n    \r\n    #Start writing your code here\r\n    \r\n    \r\n    \r\n    #Populate the variables: eligible_loan_amount and bank_emi_expected \r\n \r\n    #Use the below given print statements to display the output, in case of success\r\n    #print(\"Account number:\", account_number) \r\n    #print(\"The customer can avail the amount of Rs.\", eligible_loan_amount)\r\n    #print(\"Eligible EMIs :\", bank_emi_expected)\r\n    #print(\"Requested loan amount:\", loan_amount_expected)\r\n    #print(\"Requested EMI's:\",customer_emi_expected)\r\n    \r\n    #Use the below given print statements to display the output, in case of invalid data.\r\n    #print(\"Insufficient account balance\")\r\n    #print(\"The customer is not eligible for the loan\")\r\n    #print(\"Invalid account number\")\r\n    #print(\"Invalid loan type or salary\")\r\n    # Also, do not modify the above print statements for verification to work\r\n    \r\n    \r\n    if loan_type == \"Car\" and salary > 25000 and salary <= 50000 :\r\n        eligible_loan_amount = 500000\r\n        bank_emi_expected = 36\r\n        approved = 1\r\n         \r\n       \r\n    elif loan_type == \"House\" and salary > 50000 and salary < 75000 :\r\n        eligible_loan_amount = 6000000\r\n        bank_emi_expected = 60\r\n        approved = 1\r\n    \r\n    elif loan_type == \"Business\" and salary > 75000  :\r\n        eligible_loan_amount = 7500000\r\n        bank_emi_expected = 84\r\n        approved = 1\r\n         \r\n         \r\n         \r\n         \r\n    if approved == 1 :\r\n        if account_number > 1000 and account_number <= 1999 :\r\n            if account_balance >= 100000 :\r\n                if loan_amount_expected <= eligible_loan_amount and customer_emi_expected <= bank_emi_expected :\r\n                    \r\n                    '''\r\n                    print(\"Account number:\", account_number)\r\n                    print(\"The customer can avail the amount of Rs.\", eligible_loan_amount)\r\n                    print(\"Eligible EMIs :\", bank_emi_expected)\r\n                    print(\"Requested loan amount:\", loan_amount_expected )\r\n                    print(\"Requested EMIs:\", customer_emi_expected)\r\n                    '''\r\n                    \r\n                    print(\"Account number:\", account_number) \r\n                    print(\"The customer can avail the amount of Rs.\", eligible_loan_amount)\r\n                    print(\"Eligible EMIs :\", bank_emi_expected)\r\n                    print(\"Requested loan amount:\", loan_amount_expected)\r\n                    print(\"Requested EMI's:\",customer_emi_expected)\r\n                    #Account number: 1005The customer can avail the amount of Rs. 500000Eligible EMIs : 36Requested loan amount: 300000Requested EMIs: 30 \r\n                else :\r\n                    print(\"The customer is not eligible for the loan \")\r\n            else :\r\n                print(\"Insufficient account balance\")\r\n        else :\r\n            print(\"Invalid account number\")  \r\n    else :\r\n        print(\"Invalid loan type or salary\")\r\n#Test your code for different values and observe the results\r\ncalculate_loan(1001,40000,250000,\"Car\",300000,30)\r\nprint(\"Hello2\")\r\ncalculate_loan(1005,30000,255000,\"Car\",300000,30)\r\n\r\n","asgnmtId":"20","SolutionFileName":"Assignment20.py","AsgnmtTyp":"A","TestcaseFileName":""}
2017-01-19 22:14:36,771 INFO  Successfully processed and prepared the input for the verify service
2017-01-19 22:14:36,772 INFO  Successfully set the request parameters for VerifySolution
2017-01-19 22:14:36,773 INFO  Invoking the service to verify the user solution
2017-01-19 22:14:36,773 INFO  Time before invoking service:Thu Jan 19 22:14:36 IST 2017
2017-01-19 22:14:36,774 INFO  Initialising service address for VerifySolution
2017-01-19 22:14:36,775 INFO  Time before invoking service In SUPER:Thu Jan 19 22:14:36 IST 2017
2017-01-19 22:14:38,894 INFO  Time after invoking service In SUPER:Thu Jan 19 22:14:38 IST 2017
2017-01-19 22:14:38,895 INFO  Service responded successfully with required details
2017-01-19 22:14:38,896 INFO  Time after invoking service:Thu Jan 19 22:14:38 IST 2017
2017-01-19 22:14:38,897 INFO  User solution successfully verified
2017-01-19 22:14:38,898 INFO  Processing the response from verify service
2017-01-19 22:14:38,902 INFO  Starting to parse JSON response
2017-01-19 22:14:38,903 ERROR Keys used to parse test result JSON might be incorrect
2017-01-19 22:14:38,904 ERROR Keys used to parse test result JSON might be incorrect
2017-01-19 22:14:38,904 ERROR Keys used to parse test result JSON might be incorrect
2017-01-19 22:14:38,905 ERROR Keys used to parse test result JSON might be incorrect
2017-01-19 22:14:38,905 ERROR Keys used to parse test result JSON might be incorrect
2017-01-19 22:14:38,906 ERROR Keys used to parse test result JSON might be incorrect
2017-01-19 22:14:38,906 ERROR Keys used to parse test result JSON might be incorrect
2017-01-19 22:14:38,907 ERROR Keys used to parse test result JSON might be incorrect
2017-01-19 22:14:38,907 ERROR Keys used to parse test result JSON might be incorrect
2017-01-19 22:14:38,908 ERROR Keys used to parse test result JSON might be incorrect
2017-01-19 22:14:38,909 INFO  Successfully parsed JSON response
2017-01-19 22:14:38,912 INFO  In the process of generating verify response in HTML
2017-01-19 22:14:38,971 INFO  Successfully generated verify response in HTML
2017-01-19 22:14:38,971 INFO  Successfully processed the response from service
2017-01-19 22:14:46,888 INFO  Setting request parameters for VerifySolution
2017-01-19 22:14:46,893 INFO  Initiating to process and prepare Input for the verify service
2017-01-19 22:14:46,893 INFO  Starting to parse the user solution
2017-01-19 22:14:46,894 INFO  Displaying user solution
2017-01-19 22:14:47,807 INFO  Successfully parsed the user solution{"CourseShortName":"PF","UserSolution":"#PF-Assgn-20\r\n\r\ndef calculate_loan(account_number,salary,account_balance,loan_type,loan_amount_expected,customer_emi_expected):\r\n    eligible_loan_amount=0\r\n    bank_emi_expected=0\r\n    approved = 0\r\n    \r\n    #Start writing your code here\r\n    \r\n    \r\n    \r\n    #Populate the variables: eligible_loan_amount and bank_emi_expected \r\n \r\n    #Use the below given print statements to display the output, in case of success\r\n    #print(\"Account number:\", account_number) \r\n    #print(\"The customer can avail the amount of Rs.\", eligible_loan_amount)\r\n    #print(\"Eligible EMIs :\", bank_emi_expected)\r\n    #print(\"Requested loan amount:\", loan_amount_expected)\r\n    #print(\"Requested EMI's:\",customer_emi_expected)\r\n    \r\n    #Use the below given print statements to display the output, in case of invalid data.\r\n    #print(\"Insufficient account balance\")\r\n    #print(\"The customer is not eligible for the loan\")\r\n    #print(\"Invalid account number\")\r\n    #print(\"Invalid loan type or salary\")\r\n    # Also, do not modify the above print statements for verification to work\r\n    \r\n    \r\n    if loan_type == \"Car\" and salary >= 25000 and salary <= 50000 :\r\n        eligible_loan_amount = 500000\r\n        bank_emi_expected = 36\r\n        approved = 1\r\n         \r\n       \r\n    elif loan_type == \"House\" and salary > 50000 and salary < 75000 :\r\n        eligible_loan_amount = 6000000\r\n        bank_emi_expected = 60\r\n        approved = 1\r\n    \r\n    elif loan_type == \"Business\" and salary > 75000  :\r\n        eligible_loan_amount = 7500000\r\n        bank_emi_expected = 84\r\n        approved = 1\r\n         \r\n         \r\n         \r\n         \r\n    if approved == 1 :\r\n        if account_number > 1000 and account_number <= 1999 :\r\n            if account_balance >= 100000 :\r\n                if loan_amount_expected <= eligible_loan_amount and customer_emi_expected <= bank_emi_expected :\r\n                    \r\n                    '''\r\n                    print(\"Account number:\", account_number)\r\n                    print(\"The customer can avail the amount of Rs.\", eligible_loan_amount)\r\n                    print(\"Eligible EMIs :\", bank_emi_expected)\r\n                    print(\"Requested loan amount:\", loan_amount_expected )\r\n                    print(\"Requested EMIs:\", customer_emi_expected)\r\n                    '''\r\n                    \r\n                    print(\"Account number:\", account_number) \r\n                    print(\"The customer can avail the amount of Rs.\", eligible_loan_amount)\r\n                    print(\"Eligible EMIs :\", bank_emi_expected)\r\n                    print(\"Requested loan amount:\", loan_amount_expected)\r\n                    print(\"Requested EMI's:\",customer_emi_expected)\r\n                    #Account number: 1005The customer can avail the amount of Rs. 500000Eligible EMIs : 36Requested loan amount: 300000Requested EMIs: 30 \r\n                else :\r\n                    print(\"The customer is not eligible for the loan \")\r\n            else :\r\n                print(\"Insufficient account balance\")\r\n        else :\r\n            print(\"Invalid account number\")  \r\n    else :\r\n        print(\"Invalid loan type or salary\")\r\n#Test your code for different values and observe the results\r\ncalculate_loan(1001,40000,250000,\"Car\",300000,30)\r\nprint(\"Hello2\")\r\ncalculate_loan(1005,30000,255000,\"Car\",300000,30)\r\n\r\n","asgnmtId":"20","SolutionFileName":"Assignment20.py","AsgnmtTyp":"A","TestcaseFileName":""}
2017-01-19 22:14:47,808 INFO  Successfully processed and prepared the input for the verify service
2017-01-19 22:14:47,809 INFO  Successfully set the request parameters for VerifySolution
2017-01-19 22:14:47,809 INFO  Invoking the service to verify the user solution
2017-01-19 22:14:47,810 INFO  Time before invoking service:Thu Jan 19 22:14:47 IST 2017
2017-01-19 22:14:47,810 INFO  Initialising service address for VerifySolution
2017-01-19 22:14:47,811 INFO  Time before invoking service In SUPER:Thu Jan 19 22:14:47 IST 2017
2017-01-19 22:14:49,889 INFO  Time after invoking service In SUPER:Thu Jan 19 22:14:49 IST 2017
2017-01-19 22:14:49,889 INFO  Service responded successfully with required details
2017-01-19 22:14:49,890 INFO  Time after invoking service:Thu Jan 19 22:14:49 IST 2017
2017-01-19 22:14:49,891 INFO  User solution successfully verified
2017-01-19 22:14:49,891 INFO  Processing the response from verify service
2017-01-19 22:14:49,892 INFO  Starting to parse JSON response
2017-01-19 22:14:49,893 ERROR Keys used to parse test result JSON might be incorrect
2017-01-19 22:14:49,894 ERROR Keys used to parse test result JSON might be incorrect
2017-01-19 22:14:49,894 ERROR Keys used to parse test result JSON might be incorrect
2017-01-19 22:14:49,895 ERROR Keys used to parse test result JSON might be incorrect
2017-01-19 22:14:49,895 ERROR Keys used to parse test result JSON might be incorrect
2017-01-19 22:14:49,895 ERROR Keys used to parse test result JSON might be incorrect
2017-01-19 22:14:49,896 INFO  Successfully parsed JSON response
2017-01-19 22:14:49,898 INFO  In the process of generating verify response in HTML
2017-01-19 22:14:49,954 INFO  Successfully generated verify response in HTML
2017-01-19 22:14:49,954 INFO  Successfully processed the response from service
2017-01-19 22:16:05,600 INFO  Setting request parameters for VerifySolution
2017-01-19 22:16:05,607 INFO  Initiating to process and prepare Input for the verify service
2017-01-19 22:16:05,608 INFO  Starting to parse the user solution
2017-01-19 22:16:05,609 INFO  Displaying user solution
2017-01-19 22:16:06,430 INFO  Successfully parsed the user solution{"CourseShortName":"PF","UserSolution":"#PF-Assgn-20\r\n\r\ndef calculate_loan(account_number,salary,account_balance,loan_type,loan_amount_expected,customer_emi_expected):\r\n    eligible_loan_amount=0\r\n    bank_emi_expected=0\r\n    approved = 0\r\n    \r\n    #Start writing your code here\r\n    \r\n    \r\n    \r\n    #Populate the variables: eligible_loan_amount and bank_emi_expected \r\n \r\n    #Use the below given print statements to display the output, in case of success\r\n    #print(\"Account number:\", account_number) \r\n    #print(\"The customer can avail the amount of Rs.\", eligible_loan_amount)\r\n    #print(\"Eligible EMIs :\", bank_emi_expected)\r\n    #print(\"Requested loan amount:\", loan_amount_expected)\r\n    #print(\"Requested EMI's:\",customer_emi_expected)\r\n    \r\n    #Use the below given print statements to display the output, in case of invalid data.\r\n    #print(\"Insufficient account balance\")\r\n    #print(\"The customer is not eligible for the loan\")\r\n    #print(\"Invalid account number\")\r\n    #print(\"Invalid loan type or salary\")\r\n    # Also, do not modify the above print statements for verification to work\r\n    \r\n    \r\n    if loan_type == \"Car\" and salary > 25000 and salary <= 50000 :\r\n        eligible_loan_amount = 500000\r\n        bank_emi_expected = 36\r\n        approved = 1\r\n         \r\n       \r\n    elif loan_type == \"House\" and salary > 50000 and salary < 75000 :\r\n        eligible_loan_amount = 6000000\r\n        bank_emi_expected = 60\r\n        approved = 1\r\n    \r\n    elif loan_type == \"Business\" and salary > 75000  :\r\n        eligible_loan_amount = 7500000\r\n        bank_emi_expected = 84\r\n        approved = 1\r\n         \r\n         \r\n         \r\n         \r\n    if approved == 1 :\r\n        if account_number > 1000 and account_number <= 1999 :\r\n            if account_balance >= 100000 :\r\n                if loan_amount_expected <= eligible_loan_amount and customer_emi_expected <= bank_emi_expected :\r\n                    \r\n                    '''\r\n                    print(\"Account number:\", account_number)\r\n                    print(\"The customer can avail the amount of Rs.\", eligible_loan_amount)\r\n                    print(\"Eligible EMIs :\", bank_emi_expected)\r\n                    print(\"Requested loan amount:\", loan_amount_expected )\r\n                    print(\"Requested EMIs:\", customer_emi_expected)\r\n                    '''\r\n                    \r\n                    print(\"Account number:\", account_number) \r\n                    print(\"The customer can avail the amount of Rs.\", eligible_loan_amount)\r\n                    print(\"Eligible EMIs :\", bank_emi_expected)\r\n                    print(\"Requested loan amount:\", loan_amount_expected)\r\n                    print(\"Requested EMI's:\",customer_emi_expected)\r\n                    #Account number: 1005The customer can avail the amount of Rs. 500000Eligible EMIs : 36Requested loan amount: 300000Requested EMIs: 30 \r\n                else :\r\n                    print(\"The customer is not eligible for the loan \")\r\n            else :\r\n                print(\"Insufficient account balance\")\r\n        else :\r\n            print(\"Invalid account number\")  \r\n    else :\r\n        print(\"Invalid loan type or salary\")\r\n#Test your code for different values and observe the results\r\ncalculate_loan(1001,40000,250000,\"Car\",300000,30)\r\nprint(\"Hello2\")\r\ncalculate_loan(1005,30000,255000,\"Car\",300000,30)\r\nprint(\"Hello3\")\r\ncalculate_loan(1005,25000,255000,\"Car\",300000,30)\r\n\r\n","asgnmtId":"20","SolutionFileName":"Assignment20.py","AsgnmtTyp":"A","TestcaseFileName":""}
2017-01-19 22:16:06,432 INFO  Successfully processed and prepared the input for the verify service
2017-01-19 22:16:06,433 INFO  Successfully set the request parameters for VerifySolution
2017-01-19 22:16:06,433 INFO  Invoking the service to verify the user solution
2017-01-19 22:16:06,434 INFO  Time before invoking service:Thu Jan 19 22:16:06 IST 2017
2017-01-19 22:16:06,435 INFO  Initialising service address for VerifySolution
2017-01-19 22:16:06,435 INFO  Time before invoking service In SUPER:Thu Jan 19 22:16:06 IST 2017
2017-01-19 22:16:08,844 INFO  Time after invoking service In SUPER:Thu Jan 19 22:16:08 IST 2017
2017-01-19 22:16:08,844 INFO  Service responded successfully with required details
2017-01-19 22:16:08,845 INFO  Time after invoking service:Thu Jan 19 22:16:08 IST 2017
2017-01-19 22:16:08,846 INFO  User solution successfully verified
2017-01-19 22:16:08,846 INFO  Processing the response from verify service
2017-01-19 22:16:08,850 INFO  Starting to parse JSON response
2017-01-19 22:16:08,851 ERROR Keys used to parse test result JSON might be incorrect
2017-01-19 22:16:08,852 ERROR Keys used to parse test result JSON might be incorrect
2017-01-19 22:16:08,853 ERROR Keys used to parse test result JSON might be incorrect
2017-01-19 22:16:08,853 ERROR Keys used to parse test result JSON might be incorrect
2017-01-19 22:16:08,854 ERROR Keys used to parse test result JSON might be incorrect
2017-01-19 22:16:08,854 ERROR Keys used to parse test result JSON might be incorrect
2017-01-19 22:16:08,855 ERROR Keys used to parse test result JSON might be incorrect
2017-01-19 22:16:08,855 ERROR Keys used to parse test result JSON might be incorrect
2017-01-19 22:16:08,855 ERROR Keys used to parse test result JSON might be incorrect
2017-01-19 22:16:08,856 ERROR Keys used to parse test result JSON might be incorrect
2017-01-19 22:16:08,856 INFO  Successfully parsed JSON response
2017-01-19 22:16:08,858 INFO  In the process of generating verify response in HTML
2017-01-19 22:16:08,915 INFO  Successfully generated verify response in HTML
2017-01-19 22:16:08,916 INFO  Successfully processed the response from service
2017-01-19 22:16:23,973 INFO  Setting request parameters for VerifySolution
2017-01-19 22:16:23,974 INFO  Initiating to process and prepare Input for the verify service
2017-01-19 22:16:23,975 INFO  Starting to parse the user solution
2017-01-19 22:16:23,976 INFO  Displaying user solution
2017-01-19 22:16:25,139 INFO  Successfully parsed the user solution{"CourseShortName":"PF","UserSolution":"#PF-Assgn-20\r\n\r\ndef calculate_loan(account_number,salary,account_balance,loan_type,loan_amount_expected,customer_emi_expected):\r\n    eligible_loan_amount=0\r\n    bank_emi_expected=0\r\n    approved = 0\r\n    \r\n    #Start writing your code here\r\n    \r\n    \r\n    \r\n    #Populate the variables: eligible_loan_amount and bank_emi_expected \r\n \r\n    #Use the below given print statements to display the output, in case of success\r\n    #print(\"Account number:\", account_number) \r\n    #print(\"The customer can avail the amount of Rs.\", eligible_loan_amount)\r\n    #print(\"Eligible EMIs :\", bank_emi_expected)\r\n    #print(\"Requested loan amount:\", loan_amount_expected)\r\n    #print(\"Requested EMI's:\",customer_emi_expected)\r\n    \r\n    #Use the below given print statements to display the output, in case of invalid data.\r\n    #print(\"Insufficient account balance\")\r\n    #print(\"The customer is not eligible for the loan\")\r\n    #print(\"Invalid account number\")\r\n    #print(\"Invalid loan type or salary\")\r\n    # Also, do not modify the above print statements for verification to work\r\n    \r\n    \r\n    if loan_type == \"Car\" and salary >= 25000 and salary <= 50000 :\r\n        eligible_loan_amount = 500000\r\n        bank_emi_expected = 36\r\n        approved = 1\r\n         \r\n       \r\n    elif loan_type == \"House\" and salary > 50000 and salary < 75000 :\r\n        eligible_loan_amount = 6000000\r\n        bank_emi_expected = 60\r\n        approved = 1\r\n    \r\n    elif loan_type == \"Business\" and salary > 75000  :\r\n        eligible_loan_amount = 7500000\r\n        bank_emi_expected = 84\r\n        approved = 1\r\n         \r\n         \r\n         \r\n         \r\n    if approved == 1 :\r\n        if account_number > 1000 and account_number <= 1999 :\r\n            if account_balance >= 100000 :\r\n                if loan_amount_expected <= eligible_loan_amount and customer_emi_expected <= bank_emi_expected :\r\n                    \r\n                    '''\r\n                    print(\"Account number:\", account_number)\r\n                    print(\"The customer can avail the amount of Rs.\", eligible_loan_amount)\r\n                    print(\"Eligible EMIs :\", bank_emi_expected)\r\n                    print(\"Requested loan amount:\", loan_amount_expected )\r\n                    print(\"Requested EMIs:\", customer_emi_expected)\r\n                    '''\r\n                    \r\n                    print(\"Account number:\", account_number) \r\n                    print(\"The customer can avail the amount of Rs.\", eligible_loan_amount)\r\n                    print(\"Eligible EMIs :\", bank_emi_expected)\r\n                    print(\"Requested loan amount:\", loan_amount_expected)\r\n                    print(\"Requested EMI's:\",customer_emi_expected)\r\n                    #Account number: 1005The customer can avail the amount of Rs. 500000Eligible EMIs : 36Requested loan amount: 300000Requested EMIs: 30 \r\n                else :\r\n                    print(\"The customer is not eligible for the loan \")\r\n            else :\r\n                print(\"Insufficient account balance\")\r\n        else :\r\n            print(\"Invalid account number\")  \r\n    else :\r\n        print(\"Invalid loan type or salary\")\r\n#Test your code for different values and observe the results\r\ncalculate_loan(1001,40000,250000,\"Car\",300000,30)\r\nprint(\"Hello2\")\r\ncalculate_loan(1005,30000,255000,\"Car\",300000,30)\r\nprint(\"Hello3\")\r\ncalculate_loan(1005,25000,255000,\"Car\",300000,30)\r\n\r\n","asgnmtId":"20","SolutionFileName":"Assignment20.py","AsgnmtTyp":"A","TestcaseFileName":""}
2017-01-19 22:16:25,140 INFO  Successfully processed and prepared the input for the verify service
2017-01-19 22:16:25,141 INFO  Successfully set the request parameters for VerifySolution
2017-01-19 22:16:25,141 INFO  Invoking the service to verify the user solution
2017-01-19 22:16:25,142 INFO  Time before invoking service:Thu Jan 19 22:16:25 IST 2017
2017-01-19 22:16:25,142 INFO  Initialising service address for VerifySolution
2017-01-19 22:16:25,143 INFO  Time before invoking service In SUPER:Thu Jan 19 22:16:25 IST 2017
2017-01-19 22:16:27,726 INFO  Time after invoking service In SUPER:Thu Jan 19 22:16:27 IST 2017
2017-01-19 22:16:27,728 INFO  Service responded successfully with required details
2017-01-19 22:16:27,729 INFO  Time after invoking service:Thu Jan 19 22:16:27 IST 2017
2017-01-19 22:16:27,730 INFO  User solution successfully verified
2017-01-19 22:16:27,730 INFO  Processing the response from verify service
2017-01-19 22:16:27,731 INFO  Starting to parse JSON response
2017-01-19 22:16:27,732 ERROR Keys used to parse test result JSON might be incorrect
2017-01-19 22:16:27,733 ERROR Keys used to parse test result JSON might be incorrect
2017-01-19 22:16:27,733 ERROR Keys used to parse test result JSON might be incorrect
2017-01-19 22:16:27,734 ERROR Keys used to parse test result JSON might be incorrect
2017-01-19 22:16:27,734 ERROR Keys used to parse test result JSON might be incorrect
2017-01-19 22:16:27,735 ERROR Keys used to parse test result JSON might be incorrect
2017-01-19 22:16:27,735 INFO  Successfully parsed JSON response
2017-01-19 22:16:27,736 INFO  In the process of generating verify response in HTML
2017-01-19 22:16:27,793 INFO  Successfully generated verify response in HTML
2017-01-19 22:16:27,794 INFO  Successfully processed the response from service
2017-01-19 22:17:22,125 INFO  Setting request parameters for VerifySolution
2017-01-19 22:17:22,127 INFO  Initiating to process and prepare Input for the verify service
2017-01-19 22:17:22,128 INFO  Starting to parse the user solution
2017-01-19 22:17:22,129 INFO  Displaying user solution
2017-01-19 22:17:22,131 INFO   User Solution is unchanged since the last verification.
2017-01-19 22:17:22,134 INFO  Problem in processing and preparing Input for the verify service
2017-01-19 22:17:24,323 INFO  Setting request parameters for VerifySolution
2017-01-19 22:17:24,325 INFO  Initiating to process and prepare Input for the verify service
2017-01-19 22:17:24,329 INFO  Starting to parse the user solution
2017-01-19 22:17:24,332 INFO  Displaying user solution
2017-01-19 22:17:24,338 INFO   User Solution is unchanged since the last verification.
2017-01-19 22:17:24,347 INFO  Problem in processing and preparing Input for the verify service
2017-01-19 22:17:52,871 INFO  Setting request parameters for VerifySolution
2017-01-19 22:17:52,872 INFO  Initiating to process and prepare Input for the verify service
2017-01-19 22:17:52,873 INFO  Starting to parse the user solution
2017-01-19 22:17:52,874 INFO  Displaying user solution
2017-01-19 22:17:53,702 INFO  Successfully parsed the user solution{"CourseShortName":"PF","UserSolution":"#PF-Assgn-20\r\n\r\ndef calculate_loan(account_number,salary,account_balance,loan_type,loan_amount_expected,customer_emi_expected):\r\n    eligible_loan_amount=0\r\n    bank_emi_expected=0\r\n    approved = 0\r\n    \r\n    #Start writing your code here\r\n    \r\n    \r\n    \r\n    #Populate the variables: eligible_loan_amount and bank_emi_expected \r\n \r\n    #Use the below given print statements to display the output, in case of success\r\n    #print(\"Account number:\", account_number) \r\n    #print(\"The customer can avail the amount of Rs.\", eligible_loan_amount)\r\n    #print(\"Eligible EMIs :\", bank_emi_expected)\r\n    #print(\"Requested loan amount:\", loan_amount_expected)\r\n    #print(\"Requested EMI's:\",customer_emi_expected)\r\n    \r\n    #Use the below given print statements to display the output, in case of invalid data.\r\n    #print(\"Insufficient account balance\")\r\n    #print(\"The customer is not eligible for the loan\")\r\n    #print(\"Invalid account number\")\r\n    #print(\"Invalid loan type or salary\")\r\n    # Also, do not modify the above print statements for verification to work\r\n    \r\n    \r\n    if loan_type == \"Car\" and salary >= 25000 and salary <= 50000 :\r\n        eligible_loan_amount = 500000\r\n        bank_emi_expected = 36\r\n        approved = 1\r\n         \r\n       \r\n    elif loan_type == \"House\" and salary > 50000 and salary < 75000 :\r\n        eligible_loan_amount = 6000000\r\n        bank_emi_expected = 60\r\n        approved = 1\r\n    \r\n    elif loan_type == \"Business\" and salary > 75000  :\r\n        eligible_loan_amount = 7500000\r\n        bank_emi_expected = 84\r\n        approved = 1\r\n         \r\n         \r\n         \r\n         \r\n    if approved == 1 :\r\n        if account_number > 1000 and account_number <= 1999 :\r\n            if account_balance >= 100000 :\r\n                if loan_amount_expected <= eligible_loan_amount and customer_emi_expected <= bank_emi_expected :\r\n                    \r\n                    '''\r\n                    print(\"Account number:\", account_number)\r\n                    print(\"The customer can avail the amount of Rs.\", eligible_loan_amount)\r\n                    print(\"Eligible EMIs :\", bank_emi_expected)\r\n                    print(\"Requested loan amount:\", loan_amount_expected )\r\n                    print(\"Requested EMIs:\", customer_emi_expected)\r\n                    '''\r\n                    \r\n                    print(\"Account number:\", account_number) \r\n                    print(\"The customer can avail the amount of Rs.\", eligible_loan_amount)\r\n                    print(\"Eligible EMIs :\", bank_emi_expected)\r\n                    print(\"Requested loan amount:\", loan_amount_expected)\r\n                    print(\"Requested EMI's:\",customer_emi_expected)\r\n                    #Account number: 1005The customer can avail the amount of Rs. 500000Eligible EMIs : 36Requested loan amount: 300000Requested EMIs: 30 \r\n                else :\r\n                    print(\"The customer is not eligible for the loan \")\r\n            else :\r\n                print(\"Insufficient account balance\")\r\n        else :\r\n            print(\"Invalid account number\")  \r\n    else :\r\n        print(\"Invalid loan type or salary\")\r\n#Test your code for different values and observe the results\r\ncalculate_loan(1001,40000,250000,\"Car\",300000,30)\r\nprint(\"Hello2\")\r\ncalculate_loan(1005,30000,255000,\"Car\",300000,30)\r\nprint(\"Hello4\")\r\ncalculate_loan(1005,25000,255000,\"Car\",300000,30)\r\n\r\n","asgnmtId":"20","SolutionFileName":"Assignment20.py","AsgnmtTyp":"A","TestcaseFileName":""}
2017-01-19 22:17:53,742 INFO  Successfully processed and prepared the input for the verify service
2017-01-19 22:17:53,743 INFO  Successfully set the request parameters for VerifySolution
2017-01-19 22:17:53,744 INFO  Invoking the service to verify the user solution
2017-01-19 22:17:53,744 INFO  Time before invoking service:Thu Jan 19 22:17:53 IST 2017
2017-01-19 22:17:53,745 INFO  Initialising service address for VerifySolution
2017-01-19 22:17:53,746 INFO  Time before invoking service In SUPER:Thu Jan 19 22:17:53 IST 2017
2017-01-19 22:17:56,002 INFO  Time after invoking service In SUPER:Thu Jan 19 22:17:56 IST 2017
2017-01-19 22:17:56,003 INFO  Service responded successfully with required details
2017-01-19 22:17:56,003 INFO  Time after invoking service:Thu Jan 19 22:17:56 IST 2017
2017-01-19 22:17:56,004 INFO  User solution successfully verified
2017-01-19 22:17:56,005 INFO  Processing the response from verify service
2017-01-19 22:17:56,005 INFO  Starting to parse JSON response
2017-01-19 22:17:56,006 ERROR Keys used to parse test result JSON might be incorrect
2017-01-19 22:17:56,006 ERROR Keys used to parse test result JSON might be incorrect
2017-01-19 22:17:56,007 ERROR Keys used to parse test result JSON might be incorrect
2017-01-19 22:17:56,007 ERROR Keys used to parse test result JSON might be incorrect
2017-01-19 22:17:56,008 ERROR Keys used to parse test result JSON might be incorrect
2017-01-19 22:17:56,008 ERROR Keys used to parse test result JSON might be incorrect
2017-01-19 22:17:56,009 INFO  Successfully parsed JSON response
2017-01-19 22:17:56,010 INFO  In the process of generating verify response in HTML
2017-01-19 22:17:56,054 INFO  Successfully generated verify response in HTML
2017-01-19 22:17:56,054 INFO  Successfully processed the response from service
2017-01-19 22:18:06,884 INFO  Setting request parameters for VerifySolution
2017-01-19 22:18:06,885 INFO  Initiating to process and prepare Input for the verify service
2017-01-19 22:18:06,886 INFO  Starting to parse the user solution
2017-01-19 22:18:06,889 INFO  Displaying user solution
2017-01-19 22:18:07,745 INFO  Successfully parsed the user solution{"CourseShortName":"PF","UserSolution":"#PF-Assgn-20\r\n\r\ndef calculate_loan(account_number,salary,account_balance,loan_type,loan_amount_expected,customer_emi_expected):\r\n    eligible_loan_amount=0\r\n    bank_emi_expected=0\r\n    approved = 0\r\n    \r\n    #Start writing your code here\r\n    \r\n    \r\n    \r\n    #Populate the variables: eligible_loan_amount and bank_emi_expected \r\n \r\n    #Use the below given print statements to display the output, in case of success\r\n    #print(\"Account number:\", account_number) \r\n    #print(\"The customer can avail the amount of Rs.\", eligible_loan_amount)\r\n    #print(\"Eligible EMIs :\", bank_emi_expected)\r\n    #print(\"Requested loan amount:\", loan_amount_expected)\r\n    #print(\"Requested EMI's:\",customer_emi_expected)\r\n    \r\n    #Use the below given print statements to display the output, in case of invalid data.\r\n    #print(\"Insufficient account balance\")\r\n    #print(\"The customer is not eligible for the loan\")\r\n    #print(\"Invalid account number\")\r\n    #print(\"Invalid loan type or salary\")\r\n    # Also, do not modify the above print statements for verification to work\r\n    \r\n    \r\n    if loan_type == \"Car\" and salary > 25000 and salary <= 50000 :\r\n        eligible_loan_amount = 500000\r\n        bank_emi_expected = 36\r\n        approved = 1\r\n         \r\n       \r\n    elif loan_type == \"House\" and salary > 50000 and salary < 75000 :\r\n        eligible_loan_amount = 6000000\r\n        bank_emi_expected = 60\r\n        approved = 1\r\n    \r\n    elif loan_type == \"Business\" and salary > 75000  :\r\n        eligible_loan_amount = 7500000\r\n        bank_emi_expected = 84\r\n        approved = 1\r\n         \r\n         \r\n         \r\n         \r\n    if approved == 1 :\r\n        if account_number > 1000 and account_number <= 1999 :\r\n            if account_balance >= 100000 :\r\n                if loan_amount_expected <= eligible_loan_amount and customer_emi_expected <= bank_emi_expected :\r\n                    \r\n                    '''\r\n                    print(\"Account number:\", account_number)\r\n                    print(\"The customer can avail the amount of Rs.\", eligible_loan_amount)\r\n                    print(\"Eligible EMIs :\", bank_emi_expected)\r\n                    print(\"Requested loan amount:\", loan_amount_expected )\r\n                    print(\"Requested EMIs:\", customer_emi_expected)\r\n                    '''\r\n                    \r\n                    print(\"Account number:\", account_number) \r\n                    print(\"The customer can avail the amount of Rs.\", eligible_loan_amount)\r\n                    print(\"Eligible EMIs :\", bank_emi_expected)\r\n                    print(\"Requested loan amount:\", loan_amount_expected)\r\n                    print(\"Requested EMI's:\",customer_emi_expected)\r\n                    #Account number: 1005The customer can avail the amount of Rs. 500000Eligible EMIs : 36Requested loan amount: 300000Requested EMIs: 30 \r\n                else :\r\n                    print(\"The customer is not eligible for the loan \")\r\n            else :\r\n                print(\"Insufficient account balance\")\r\n        else :\r\n            print(\"Invalid account number\")  \r\n    else :\r\n        print(\"Invalid loan type or salary\")\r\n#Test your code for different values and observe the results\r\ncalculate_loan(1001,40000,250000,\"Car\",300000,30)\r\nprint(\"Hello2\")\r\ncalculate_loan(1005,30000,255000,\"Car\",300000,30)\r\nprint(\"Hello4\")\r\ncalculate_loan(1005,25000,255000,\"Car\",300000,30)\r\n\r\n","asgnmtId":"20","SolutionFileName":"Assignment20.py","AsgnmtTyp":"A","TestcaseFileName":""}
2017-01-19 22:18:07,746 INFO  Successfully processed and prepared the input for the verify service
2017-01-19 22:18:07,746 INFO  Successfully set the request parameters for VerifySolution
2017-01-19 22:18:07,747 INFO  Invoking the service to verify the user solution
2017-01-19 22:18:07,748 INFO  Time before invoking service:Thu Jan 19 22:18:07 IST 2017
2017-01-19 22:18:07,748 INFO  Initialising service address for VerifySolution
2017-01-19 22:18:07,749 INFO  Time before invoking service In SUPER:Thu Jan 19 22:18:07 IST 2017
2017-01-19 22:18:09,895 INFO  Time after invoking service In SUPER:Thu Jan 19 22:18:09 IST 2017
2017-01-19 22:18:09,895 INFO  Service responded successfully with required details
2017-01-19 22:18:09,896 INFO  Time after invoking service:Thu Jan 19 22:18:09 IST 2017
2017-01-19 22:18:09,897 INFO  User solution successfully verified
2017-01-19 22:18:09,898 INFO  Processing the response from verify service
2017-01-19 22:18:09,899 INFO  Starting to parse JSON response
2017-01-19 22:18:09,900 ERROR Keys used to parse test result JSON might be incorrect
2017-01-19 22:18:09,901 ERROR Keys used to parse test result JSON might be incorrect
2017-01-19 22:18:09,901 ERROR Keys used to parse test result JSON might be incorrect
2017-01-19 22:18:09,902 ERROR Keys used to parse test result JSON might be incorrect
2017-01-19 22:18:09,902 ERROR Keys used to parse test result JSON might be incorrect
2017-01-19 22:18:09,902 ERROR Keys used to parse test result JSON might be incorrect
2017-01-19 22:18:09,903 ERROR Keys used to parse test result JSON might be incorrect
2017-01-19 22:18:09,903 ERROR Keys used to parse test result JSON might be incorrect
2017-01-19 22:18:09,903 ERROR Keys used to parse test result JSON might be incorrect
2017-01-19 22:18:09,904 ERROR Keys used to parse test result JSON might be incorrect
2017-01-19 22:18:09,905 INFO  Successfully parsed JSON response
2017-01-19 22:18:09,906 INFO  In the process of generating verify response in HTML
2017-01-19 22:18:09,955 INFO  Successfully generated verify response in HTML
2017-01-19 22:18:09,955 INFO  Successfully processed the response from service
2017-01-19 22:18:16,660 INFO  Initiating to process and prepare Input for the submit service
2017-01-19 22:18:16,664 INFO  Displaying user solution
2017-01-19 22:18:16,673 INFO  Successfully processed and prepared the input for the submit service
2017-01-19 22:18:16,673 INFO  Invoking the service to submit the user solution
2017-01-19 22:18:16,674 INFO  Initialising service address for Submit
2017-01-19 22:18:16,675 INFO  Time before invoking service In SUPER:Thu Jan 19 22:18:16 IST 2017
2017-01-19 22:18:16,825 INFO  Time after invoking service In SUPER:Thu Jan 19 22:18:16 IST 2017
2017-01-19 22:18:16,825 INFO  Service responded successfully with required details
2017-01-19 22:18:16,826 INFO  User solution successfully submitted
2017-01-19 22:18:16,828 INFO  Displaying submission status
2017-01-19 22:18:16,828 INFO  Displayed submission status successfullySuccessfully Submitted!
