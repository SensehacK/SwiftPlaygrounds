2017-02-14 09:04:07,136 INFO  Loading Baseframework Plugin
2017-02-14 09:04:07,339 INFO  Initializing the platform to load the Menu - HandsOn
2017-02-14 09:04:10,341 INFO  Loading the Menu - HandsOn
2017-02-14 09:04:10,465 INFO  Successfully loaded the Menu - HandsOn
2017-02-14 09:45:26,864 INFO  Loading Programming Assignment Plugin
2017-02-14 09:45:27,330 INFO  Setting request parameters for VerifySolution
2017-02-14 09:45:27,333 INFO  Initiating to process and prepare Input for the verify service
2017-02-14 09:45:27,339 INFO  Starting to parse the user solution
2017-02-14 09:45:27,341 INFO  Displaying user solution
2017-02-14 09:45:35,773 INFO  Successfully parsed the user solution{"CourseShortName":"DSA","UserSolution":"#DSA-Exer-18\r\n\r\ndef find_next_min(num_list,start_index):\r\n    #Remove pass and write the logic to find the minimum element in a sub-list and return the index of the identified element in the num_list.\r\n    min_index = start_index\r\n    \r\n    for i in range(start_index+1,len(num_list)) :\r\n        print(num_list[i])\r\n        print(num_list[min_index])\r\n        if num_list[i]<num_list[min_index] :\r\n            min_index = i\r\n            \r\n    return min_index\r\n        \r\n    \r\n\r\n#Pass different values to the function and test your program\r\nnum_list=[1,10,2,3,100,67]\r\nstart_index=1\r\nprint(\"Index of the next minimum element is\", find_next_min(num_list,start_index))\r\n","asgnmtId":"18","SolutionFileName":"Exercise18.py","AsgnmtTyp":"E","TestcaseFileName":""}
2017-02-14 09:45:35,775 INFO  Successfully processed and prepared the input for the verify service
2017-02-14 09:45:35,776 INFO  Successfully set the request parameters for VerifySolution
2017-02-14 09:45:35,776 INFO  Invoking the service to verify the user solution
2017-02-14 09:45:35,779 INFO  Time before invoking service:Tue Feb 14 09:45:35 IST 2017
2017-02-14 09:45:35,782 INFO  Initialising service address for VerifySolution
2017-02-14 09:45:35,785 INFO  Time before invoking service In SUPER:Tue Feb 14 09:45:35 IST 2017
2017-02-14 09:45:40,365 INFO  Time after invoking service In SUPER:Tue Feb 14 09:45:40 IST 2017
2017-02-14 09:45:40,366 INFO  Service responded successfully with required details
2017-02-14 09:45:40,367 INFO  Time after invoking service:Tue Feb 14 09:45:40 IST 2017
2017-02-14 09:45:40,368 INFO  User solution successfully verified
2017-02-14 09:45:40,369 INFO  Processing the response from verify service
2017-02-14 09:45:40,373 INFO  Starting to parse JSON response
2017-02-14 09:45:40,379 ERROR Keys used to parse test result JSON might be incorrect
2017-02-14 09:45:40,381 ERROR Keys used to parse test result JSON might be incorrect
2017-02-14 09:45:40,383 INFO  Successfully parsed JSON response
2017-02-14 09:45:40,384 INFO  In the process of generating verify response in HTML
2017-02-14 09:45:41,062 INFO  Successfully generated verify response in HTML
2017-02-14 09:45:41,063 INFO  Successfully processed the response from service
2017-02-14 16:28:59,084 INFO  Setting request parameters for VerifySolution
2017-02-14 16:28:59,097 INFO  Initiating to process and prepare Input for the verify service
2017-02-14 16:28:59,099 INFO  Starting to parse the user solution
2017-02-14 16:28:59,101 INFO  Displaying user solution
2017-02-14 16:29:07,333 INFO  Successfully parsed the user solution{"CourseShortName":"OOP","UserSolution":"#OOP-Assgn-30\r\n#Start writing your code here\r\n\r\nclass Customer :\r\n    \r\n    def __init__(self,customer_name , quantity):\r\n        self.__customer_name = customer_name\r\n        self.__quantity = quantity\r\n        \r\n    def validate_quantity(self):\r\n        if self.get_quantity() >= 1 and self.get_quantity() <= 5 :\r\n            return True\r\n        else :\r\n            return False\r\n    \r\n    def get_customer_name(self):\r\n        return self.__customer_name\r\n    \r\n    def get_quantity(self):\r\n        return  self.__quantity\r\n            \r\n\r\n\r\nclass Pizzaservice :\r\n    counter = 100\r\n    \r\n    def __init__(self,customer,pizza_type,additional_topping):\r\n        self.__customer = customer\r\n        self.__service_id = None\r\n        self.__pizza_type = pizza_type\r\n        self.__additional_topping = additional_topping\r\n        \r\n        self.pizza_cost = 0\r\n\r\n    def get_customer(self):\r\n        return self.__customer\r\n\r\n\r\n    def get_service_id(self):\r\n        return self.__service_id\r\n\r\n\r\n    def get_pizza_type(self):\r\n        return self.__pizza_type\r\n\r\n\r\n    def get_additional_topping(self):\r\n        return self.__additional_topping\r\n\r\n        \r\n    def validate_pizza_type(self):\r\n        if self.get_pizza_type() == \"small\" or self.get_pizza_type() == \"medium\" :\r\n            return True\r\n        else :\r\n            return False\r\n\r\n    def calculate_pizza_cost(self):\r\n        pizza_price = 0\r\n        #total_pizza = None\r\n        pizza_topping = 0\r\n        quantity  = self.get_customer().get_quantity()\r\n        Pizzaservice.counter += 1\r\n        \r\n        if self.validate_pizza_type() and self.get_customer().validate_quantity() :\r\n            if self.get_pizza_type().lower() == \"small\" :\r\n                pizza_price = 150\r\n                pizza_topping = 35\r\n                self.get_service_id = self.get_pizza_type()[0] + str(Pizzaservice.__counter)\r\n                if self.get_additional_topping() :\r\n                    self.pizza_cost = (pizza_price + pizza_topping) * quantity \r\n                else :\r\n                    self.pizza_cost = pizza_price * quantity\r\n            \r\n            elif self.get_pizza_type().lower() == \"medium\" :\r\n                pizza_price = 200\r\n                pizza_topping = 50\r\n                self.get_service_id = self.get_pizza_type()[0] + str(Pizzaservice.__counter)\r\n                if self.get_additional_topping() :\r\n                    self.pizza_cost = (pizza_price + pizza_topping) * quantity \r\n                else :\r\n                    self.pizza_cost = pizza_price * quantity\r\n            \r\n            \r\n            return (self.pizza_cost)\r\n        \r\n        else :\r\n            self.pizza_cost= -1\r\n            return (self.pizza_cost)\r\n        \r\n        \r\n    \r\n    \r\nclass Doordelivery(Pizzaservice) :\r\n    \r\n    def __init__(self,customer,pizza_type,additional_topping,distance_in_kms):\r\n        super().__init__(customer, pizza_type, additional_topping)\r\n        self.__delivery_charge = None\r\n        self.__distance_in_kms = distance_in_kms\r\n\r\n    def get_delivery_charge(self):\r\n        return self.__delivery_charge\r\n\r\n\r\n    def get_distance_in_kms(self):\r\n        return self.__distance_in_kms\r\n\r\n    \r\n    def validate_distance_in_kms(self):\r\n        if self.get_distance_in_kms() >= 1 and self.get_distance_in_kms() <= 10 :\r\n            return True\r\n        else :\r\n            return False\r\n\r\n    def calculate_pizza_cost(self):\r\n        pizza_total = 0\r\n        if self.validate_distance_in_kms() :\r\n            super().calculate_pizza_cost()\r\n            pizza_total = 0\r\n            if self.pizza_cost != -1 :\r\n                pizza_distance = self.get_distance_in_kms()\r\n                if pizza_distance <= 5 :\r\n                    pizza_total = self.pizza_cost + (pizza_distance * 5)\r\n                if pizza_distance > 5 and pizza_distance <= 10:\r\n                    first_five_charge = pizza_distance * 5\r\n                    remaining_kms = pizza_distance - 5 \r\n                    remaining_price_charge = remaining_kms * 7\r\n                    pizza_total = self.pizza_cost + (first_five_charge + remaining_price_charge)\r\n                    self.pizza_cost = pizza_total\r\n            \r\n            \r\n            else :\r\n                self.pizza_cost = -1\r\n                return self.pizza_cost\r\n                  \r\n        else :\r\n            self.pizza_cost = -1\r\n            return self.pizza_cost\r\n        \r\n        \r\n           \r\n   \r\n    \r\n    \r\n    \r\n    \r\ncust = Customer(\"Kautilya\" , 8)\r\npizza = Pizzaservice(cust,\"small\",True)\r\npizza.calculate_pizza_cost()\r\ndoor_d = Doordelivery(cust,\"small\",True,6)\r\ndoor_d.calculate_pizza_cost()\r\n","asgnmtId":"30","SolutionFileName":"Assignment30.py","AsgnmtTyp":"A","TestcaseFileName":""}
2017-02-14 16:29:07,338 INFO  Successfully processed and prepared the input for the verify service
2017-02-14 16:29:07,343 INFO  Successfully set the request parameters for VerifySolution
2017-02-14 16:29:07,346 INFO  Invoking the service to verify the user solution
2017-02-14 16:29:07,348 INFO  Time before invoking service:Tue Feb 14 16:29:07 IST 2017
2017-02-14 16:29:07,349 INFO  Initialising service address for VerifySolution
2017-02-14 16:29:07,351 INFO  Time before invoking service In SUPER:Tue Feb 14 16:29:07 IST 2017
2017-02-14 16:29:12,978 INFO  Time after invoking service In SUPER:Tue Feb 14 16:29:12 IST 2017
2017-02-14 16:29:13,000 INFO  Service responded successfully with required details
2017-02-14 16:29:13,009 INFO  Time after invoking service:Tue Feb 14 16:29:13 IST 2017
2017-02-14 16:29:13,026 INFO  User solution successfully verified
2017-02-14 16:29:13,027 INFO  Processing the response from verify service
2017-02-14 16:29:13,041 INFO  Starting to parse JSON response
2017-02-14 16:29:13,057 ERROR Keys used to parse test result JSON might be incorrect
2017-02-14 16:29:13,095 ERROR Keys used to parse test result JSON might be incorrect
2017-02-14 16:29:13,108 ERROR Keys used to parse test result JSON might be incorrect
2017-02-14 16:29:13,110 ERROR Keys used to parse test result JSON might be incorrect
2017-02-14 16:29:13,112 ERROR Keys used to parse test result JSON might be incorrect
2017-02-14 16:29:13,116 ERROR Keys used to parse test result JSON might be incorrect
2017-02-14 16:29:13,117 ERROR Keys used to parse test result JSON might be incorrect
2017-02-14 16:29:13,118 ERROR Keys used to parse test result JSON might be incorrect
2017-02-14 16:29:13,119 ERROR Keys used to parse test result JSON might be incorrect
2017-02-14 16:29:13,120 ERROR Keys used to parse test result JSON might be incorrect
2017-02-14 16:29:13,121 INFO  Successfully parsed JSON response
2017-02-14 16:29:13,123 INFO  In the process of generating verify response in HTML
2017-02-14 16:29:13,337 INFO  Successfully generated verify response in HTML
2017-02-14 16:29:13,339 INFO  Successfully processed the response from service
2017-02-14 16:31:13,520 INFO  Setting request parameters for VerifySolution
2017-02-14 16:31:13,531 INFO  Initiating to process and prepare Input for the verify service
2017-02-14 16:31:13,534 INFO  Starting to parse the user solution
2017-02-14 16:31:13,545 INFO  Displaying user solution
2017-02-14 16:31:20,595 INFO  Successfully parsed the user solution{"CourseShortName":"OOP","UserSolution":"#OOP-Assgn-30\r\n#Start writing your code here\r\n\r\nclass Customer :\r\n    \r\n    def __init__(self,customer_name , quantity):\r\n        self.__customer_name = customer_name\r\n        self.__quantity = quantity\r\n        \r\n    def validate_quantity(self):\r\n        if self.get_quantity() >= 1 and self.get_quantity() <= 5 :\r\n            return True\r\n        else :\r\n            return False\r\n    \r\n    def get_customer_name(self):\r\n        return self.__customer_name\r\n    \r\n    def get_quantity(self):\r\n        return  self.__quantity\r\n            \r\n\r\n\r\nclass Pizzaservice :\r\n    counter = 100\r\n    \r\n    def __init__(self,customer,pizza_type,additional_topping):\r\n        self.__customer = customer\r\n        self.__service_id = None\r\n        self.__pizza_type = pizza_type\r\n        self.__additional_topping = additional_topping\r\n        \r\n        self.pizza_cost = 0\r\n\r\n    def get_customer(self):\r\n        return self.__customer\r\n\r\n\r\n    def get_service_id(self):\r\n        return self.__service_id\r\n\r\n\r\n    def get_pizza_type(self):\r\n        return self.__pizza_type\r\n\r\n\r\n    def get_additional_topping(self):\r\n        return self.__additional_topping\r\n\r\n        \r\n    def validate_pizza_type(self):\r\n        if self.get_pizza_type() == \"small\" or self.get_pizza_type() == \"medium\" :\r\n            return True\r\n        else :\r\n            return False\r\n\r\n    def calculate_pizza_cost(self):\r\n        pizza_price = 0\r\n        #total_pizza = None\r\n        pizza_topping = 0\r\n        quantity  = self.get_customer().get_quantity()\r\n        Pizzaservice.counter += 1\r\n        \r\n        if self.validate_pizza_type() and self.get_customer().validate_quantity() :\r\n            if self.get_pizza_type().lower() == \"small\" :\r\n                pizza_price = 150\r\n                pizza_topping = 35\r\n                self.get_service_id = self.get_pizza_type()[0] + str(Pizzaservice.__counter)\r\n                if self.get_additional_topping() :\r\n                    self.pizza_cost = (pizza_price + pizza_topping) * quantity \r\n                else :\r\n                    self.pizza_cost = pizza_price * quantity\r\n            \r\n            elif self.get_pizza_type().lower() == \"medium\" :\r\n                pizza_price = 200\r\n                pizza_topping = 50\r\n                self.get_service_id = self.get_pizza_type()[0] + str(Pizzaservice.__counter)\r\n                if self.get_additional_topping() :\r\n                    self.pizza_cost = (pizza_price + pizza_topping) * quantity \r\n                else :\r\n                    self.pizza_cost = pizza_price * quantity\r\n            \r\n            \r\n            return (self.pizza_cost)\r\n        \r\n        else :\r\n            self.pizza_cost= -1\r\n            return (self.pizza_cost)\r\n        \r\n        \r\n    \r\n    \r\nclass Doordelivery(Pizzaservice) :\r\n    \r\n    def __init__(self,customer,pizza_type,additional_topping,distance_in_kms):\r\n        super().__init__(customer, pizza_type, additional_topping)\r\n        self.__delivery_charge = None\r\n        self.__distance_in_kms = distance_in_kms\r\n\r\n    def get_delivery_charge(self):\r\n        return self.__delivery_charge\r\n\r\n\r\n    def get_distance_in_kms(self):\r\n        return self.__distance_in_kms\r\n\r\n    \r\n    def validate_distance_in_kms(self):\r\n        if self.get_distance_in_kms() >= 1 and self.get_distance_in_kms() <= 10 :\r\n            return True\r\n        else :\r\n            return False\r\n\r\n    def calculate_pizza_cost(self):\r\n        pizza_total = 0\r\n        if self.validate_distance_in_kms() :\r\n            super().calculate_pizza_cost()\r\n            pizza_total = 0\r\n            if self.pizza_cost != -1 :\r\n                pizza_distance = self.get_distance_in_kms()\r\n                if pizza_distance <= 5 :\r\n                    pizza_total = self.pizza_cost + (pizza_distance * 5)\r\n                if pizza_distance > 5 and pizza_distance <= 10:\r\n                    first_five_charge = pizza_distance * 5\r\n                    remaining_kms = pizza_distance - 5 \r\n                    remaining_price_charge = remaining_kms * 7\r\n                    pizza_total = self.pizza_cost + (first_five_charge + remaining_price_charge)\r\n                    self.pizza_cost = pizza_total\r\n            \r\n            \r\n            else :\r\n                self.pizza_cost = -1\r\n                return self.pizza_cost\r\n                  \r\n        else :\r\n            self.pizza_cost = -1\r\n            return self.pizza_cost\r\n        \r\n        \r\n           \r\n   \r\n    \r\n    \r\n    \r\n    \r\ncust = Customer(\"Kautilya\" , 5)\r\npizza = Pizzaservice(cust,\"medIUm\",False)\r\npizza.calculate_pizza_cost()\r\ndoor_d = Doordelivery(cust,\"medIUm\",False,6)\r\ndoor_d.calculate_pizza_cost()\r\n","asgnmtId":"30","SolutionFileName":"Assignment30.py","AsgnmtTyp":"A","TestcaseFileName":""}
2017-02-14 16:31:20,597 INFO  Successfully processed and prepared the input for the verify service
2017-02-14 16:31:20,598 INFO  Successfully set the request parameters for VerifySolution
2017-02-14 16:31:20,599 INFO  Invoking the service to verify the user solution
2017-02-14 16:31:20,600 INFO  Time before invoking service:Tue Feb 14 16:31:20 IST 2017
2017-02-14 16:31:20,600 INFO  Initialising service address for VerifySolution
2017-02-14 16:31:20,602 INFO  Time before invoking service In SUPER:Tue Feb 14 16:31:20 IST 2017
2017-02-14 16:31:27,913 INFO  Time after invoking service In SUPER:Tue Feb 14 16:31:27 IST 2017
2017-02-14 16:31:27,915 INFO  Service responded successfully with required details
2017-02-14 16:31:27,917 INFO  Time after invoking service:Tue Feb 14 16:31:27 IST 2017
2017-02-14 16:31:27,918 INFO  User solution successfully verified
2017-02-14 16:31:27,921 INFO  Processing the response from verify service
2017-02-14 16:31:27,925 INFO  Starting to parse JSON response
2017-02-14 16:31:27,928 ERROR Keys used to parse test result JSON might be incorrect
2017-02-14 16:31:27,929 ERROR Keys used to parse test result JSON might be incorrect
2017-02-14 16:31:27,930 ERROR Keys used to parse test result JSON might be incorrect
2017-02-14 16:31:27,935 ERROR Keys used to parse test result JSON might be incorrect
2017-02-14 16:31:27,937 ERROR Keys used to parse test result JSON might be incorrect
2017-02-14 16:31:27,939 ERROR Keys used to parse test result JSON might be incorrect
2017-02-14 16:31:27,940 ERROR Keys used to parse test result JSON might be incorrect
2017-02-14 16:31:27,941 ERROR Keys used to parse test result JSON might be incorrect
2017-02-14 16:31:27,942 ERROR Keys used to parse test result JSON might be incorrect
2017-02-14 16:31:27,943 ERROR Keys used to parse test result JSON might be incorrect
2017-02-14 16:31:27,944 INFO  Successfully parsed JSON response
2017-02-14 16:31:27,946 INFO  In the process of generating verify response in HTML
2017-02-14 16:31:28,077 INFO  Successfully generated verify response in HTML
2017-02-14 16:31:28,079 INFO  Successfully processed the response from service
2017-02-14 16:42:45,123 INFO  Setting request parameters for VerifySolution
2017-02-14 16:42:45,128 INFO  Initiating to process and prepare Input for the verify service
2017-02-14 16:42:45,129 INFO  Starting to parse the user solution
2017-02-14 16:42:45,132 INFO  Displaying user solution
2017-02-14 16:42:50,854 INFO  Successfully parsed the user solution{"CourseShortName":"OOP","UserSolution":"#OOP-Assgn-30\r\n#Start writing your code here\r\n\r\nclass Customer :\r\n    \r\n    def __init__(self,customer_name , quantity):\r\n        self.__customer_name = customer_name\r\n        self.__quantity = quantity\r\n        \r\n    def validate_quantity(self):\r\n        if self.get_quantity() >= 1 and self.get_quantity() <= 5 :\r\n            return True\r\n        else :\r\n            return False\r\n    \r\n    def get_customer_name(self):\r\n        return self.__customer_name\r\n    \r\n    def get_quantity(self):\r\n        return  self.__quantity\r\n            \r\n\r\n\r\nclass Pizzaservice :\r\n    counter = 100\r\n    \r\n    def __init__(self,customer,pizza_type,additional_topping):\r\n        self.__customer = customer\r\n        self.__service_id = None\r\n        self.__pizza_type = pizza_type\r\n        self.__additional_topping = additional_topping\r\n        \r\n        self.pizza_cost = 0\r\n\r\n    def get_customer(self):\r\n        return self.__customer\r\n\r\n\r\n    def get_service_id(self):\r\n        return self.__service_id\r\n\r\n\r\n    def get_pizza_type(self):\r\n        return self.__pizza_type\r\n\r\n\r\n    def get_additional_topping(self):\r\n        return self.__additional_topping\r\n\r\n        \r\n    def validate_pizza_type(self):\r\n        if self.get_pizza_type() == \"small\" or self.get_pizza_type() == \"medium\" :\r\n            return True\r\n        else :\r\n            return False\r\n\r\n    def calculate_pizza_cost(self):\r\n        pizza_price = 0\r\n        #total_pizza = None\r\n        pizza_topping = 0\r\n        quantity  = self.get_customer().get_quantity()\r\n        Pizzaservice.counter += 1\r\n        \r\n        if self.validate_pizza_type() and self.get_customer().validate_quantity() :\r\n            if self.get_pizza_type().lower() == \"small\" :\r\n                pizza_price = 150\r\n                pizza_topping = 35\r\n                \r\n                if self.get_additional_topping() :\r\n                    self.pizza_cost = (pizza_price + pizza_topping) * quantity \r\n                else :\r\n                    self.pizza_cost = pizza_price * quantity\r\n            \r\n            elif self.get_pizza_type().lower() == \"medium\" :\r\n                pizza_price = 200\r\n                pizza_topping = 50\r\n                if self.get_additional_topping() :\r\n                    self.pizza_cost = (pizza_price + pizza_topping) * quantity \r\n                else :\r\n                    self.pizza_cost = pizza_price * quantity\r\n            \r\n            self.get_service_id = self.get_pizza_type()[0] + str(Pizzaservice.__counter)\r\n            return (self.pizza_cost)\r\n        \r\n        else :\r\n            self.pizza_cost= -1\r\n            return (self.pizza_cost)\r\n        \r\n        \r\n    \r\n    \r\nclass Doordelivery(Pizzaservice) :\r\n    \r\n    def __init__(self,customer,pizza_type,additional_topping,distance_in_kms):\r\n        super().__init__(customer, pizza_type, additional_topping)\r\n        self.__delivery_charge = None\r\n        self.__distance_in_kms = distance_in_kms\r\n\r\n    def get_delivery_charge(self):\r\n        return self.__delivery_charge\r\n\r\n\r\n    def get_distance_in_kms(self):\r\n        return self.__distance_in_kms\r\n\r\n    \r\n    def validate_distance_in_kms(self):\r\n        if self.get_distance_in_kms() >= 1 and self.get_distance_in_kms() <= 10 :\r\n            return True\r\n        else :\r\n            return False\r\n\r\n    def calculate_pizza_cost(self):\r\n        pizza_total = 0\r\n        if self.validate_distance_in_kms() :\r\n            super().calculate_pizza_cost()\r\n            pizza_total = 0\r\n            if self.pizza_cost != -1 :\r\n                pizza_distance = self.get_distance_in_kms()\r\n                if pizza_distance <= 5 :\r\n                    pizza_total = self.pizza_cost + (pizza_distance * 5)\r\n                    self.pizza_cost = pizza_total\r\n                if pizza_distance > 5 and pizza_distance <= 10:\r\n                    first_five_charge = pizza_distance * 5\r\n                    remaining_kms = pizza_distance - 5 \r\n                    remaining_price_charge = remaining_kms * 7\r\n                    pizza_total = self.pizza_cost + (first_five_charge + remaining_price_charge)\r\n                    self.pizza_cost = pizza_total\r\n            \r\n            \r\n            else :\r\n                self.pizza_cost = -1\r\n                return self.pizza_cost\r\n                  \r\n        else :\r\n            self.pizza_cost = -1\r\n            return self.pizza_cost\r\n        \r\n        \r\n           \r\n   \r\n    \r\n    \r\n    \r\n    \r\ncust = Customer(\"Kautilya\" , 5)\r\npizza = Pizzaservice(cust,\"medIUm\",False)\r\npizza.calculate_pizza_cost()\r\ndoor_d = Doordelivery(cust,\"medIUm\",False,6)\r\ndoor_d.calculate_pizza_cost()\r\n","asgnmtId":"30","SolutionFileName":"Assignment30.py","AsgnmtTyp":"A","TestcaseFileName":""}
2017-02-14 16:42:50,856 INFO  Successfully processed and prepared the input for the verify service
2017-02-14 16:42:50,859 INFO  Successfully set the request parameters for VerifySolution
2017-02-14 16:42:50,860 INFO  Invoking the service to verify the user solution
2017-02-14 16:42:50,861 INFO  Time before invoking service:Tue Feb 14 16:42:50 IST 2017
2017-02-14 16:42:50,862 INFO  Initialising service address for VerifySolution
2017-02-14 16:42:50,864 INFO  Time before invoking service In SUPER:Tue Feb 14 16:42:50 IST 2017
2017-02-14 16:42:56,827 INFO  Time after invoking service In SUPER:Tue Feb 14 16:42:56 IST 2017
2017-02-14 16:42:56,829 INFO  Service responded successfully with required details
2017-02-14 16:42:56,830 INFO  Time after invoking service:Tue Feb 14 16:42:56 IST 2017
2017-02-14 16:42:56,831 INFO  User solution successfully verified
2017-02-14 16:42:56,834 INFO  Processing the response from verify service
2017-02-14 16:42:56,841 INFO  Starting to parse JSON response
2017-02-14 16:42:56,845 ERROR Keys used to parse test result JSON might be incorrect
2017-02-14 16:42:56,847 ERROR Keys used to parse test result JSON might be incorrect
2017-02-14 16:42:56,849 ERROR Keys used to parse test result JSON might be incorrect
2017-02-14 16:42:56,850 ERROR Keys used to parse test result JSON might be incorrect
2017-02-14 16:42:56,850 ERROR Keys used to parse test result JSON might be incorrect
2017-02-14 16:42:56,851 ERROR Keys used to parse test result JSON might be incorrect
2017-02-14 16:42:56,853 ERROR Keys used to parse test result JSON might be incorrect
2017-02-14 16:42:56,855 ERROR Keys used to parse test result JSON might be incorrect
2017-02-14 16:42:56,856 ERROR Keys used to parse test result JSON might be incorrect
2017-02-14 16:42:56,858 ERROR Keys used to parse test result JSON might be incorrect
2017-02-14 16:42:56,859 INFO  Successfully parsed JSON response
2017-02-14 16:42:56,862 INFO  In the process of generating verify response in HTML
2017-02-14 16:42:56,999 INFO  Successfully generated verify response in HTML
2017-02-14 16:42:57,005 INFO  Successfully processed the response from service
2017-02-14 16:46:35,893 INFO  Setting request parameters for VerifySolution
2017-02-14 16:46:35,899 INFO  Initiating to process and prepare Input for the verify service
2017-02-14 16:46:35,901 INFO  Starting to parse the user solution
2017-02-14 16:46:35,904 INFO  Displaying user solution
2017-02-14 16:46:47,670 INFO  Successfully parsed the user solution{"CourseShortName":"OOP","UserSolution":"#OOP-Assgn-30\r\n#Start writing your code here\r\n\r\nclass Customer :\r\n    \r\n    def __init__(self,customer_name , quantity):\r\n        self.__customer_name = customer_name\r\n        self.__quantity = quantity\r\n        \r\n    def validate_quantity(self):\r\n        if self.get_quantity() >= 1 and self.get_quantity() <= 5 :\r\n            return True\r\n        else :\r\n            return False\r\n    \r\n    def get_customer_name(self):\r\n        return self.__customer_name\r\n    \r\n    def get_quantity(self):\r\n        return  self.__quantity\r\n            \r\n\r\n\r\nclass Pizzaservice :\r\n    counter = 100\r\n    \r\n    def __init__(self,customer,pizza_type,additional_topping):\r\n        self.__customer = customer\r\n        self.__service_id = None\r\n        self.__pizza_type = pizza_type\r\n        self.__additional_topping = additional_topping\r\n        \r\n        self.pizza_cost = None\r\n\r\n    def get_customer(self):\r\n        return self.__customer\r\n\r\n\r\n    def get_service_id(self):\r\n        return self.__service_id\r\n\r\n\r\n    def get_pizza_type(self):\r\n        return self.__pizza_type\r\n\r\n\r\n    def get_additional_topping(self):\r\n        return self.__additional_topping\r\n\r\n        \r\n    def validate_pizza_type(self):\r\n        if self.get_pizza_type().lower() == \"small\" or self.get_pizza_type().lower() == \"medium\" :\r\n            return True\r\n        else :\r\n            return False\r\n\r\n    def calculate_pizza_cost(self):\r\n        pizza_price = 0\r\n        self.pizza_cost = 0\r\n        pizza_topping = 0\r\n        quantity  = self.get_customer().get_quantity()\r\n        Pizzaservice.counter += 1\r\n        \r\n        if self.validate_pizza_type() and self.get_customer().validate_quantity() :\r\n            if self.get_pizza_type().lower() == \"small\" :\r\n                pizza_price = 150\r\n                pizza_topping = 35\r\n                \r\n                if self.get_additional_topping() :\r\n                    self.pizza_cost = (pizza_price + pizza_topping) * quantity \r\n                else :\r\n                    self.pizza_cost = pizza_price * quantity\r\n            \r\n            elif self.get_pizza_type().lower() == \"medium\" :\r\n                pizza_price = 200\r\n                pizza_topping = 50\r\n                if self.get_additional_topping() :\r\n                    self.pizza_cost = (pizza_price + pizza_topping) * quantity \r\n                else :\r\n                    self.pizza_cost = pizza_price * quantity\r\n            \r\n            self.get_service_id = self.get_pizza_type()[0] + str(Pizzaservice.counter)\r\n            return (self.pizza_cost)\r\n        \r\n        else :\r\n            self.pizza_cost= -1\r\n            return (self.pizza_cost)\r\n        \r\n        \r\n    \r\n    \r\nclass Doordelivery(Pizzaservice) :\r\n    \r\n    def __init__(self,customer,pizza_type,additional_topping,distance_in_kms):\r\n        super().__init__(customer, pizza_type, additional_topping)\r\n        self.__delivery_charge = None\r\n        self.__distance_in_kms = distance_in_kms\r\n\r\n    def get_delivery_charge(self):\r\n        return self.__delivery_charge\r\n\r\n\r\n    def get_distance_in_kms(self):\r\n        return self.__distance_in_kms\r\n\r\n    \r\n    def validate_distance_in_kms(self):\r\n        if self.get_distance_in_kms() >= 1 and self.get_distance_in_kms() <= 10 :\r\n            return True\r\n        else :\r\n            return False\r\n\r\n    def calculate_pizza_cost(self):\r\n        pizza_total = 0\r\n        if self.validate_distance_in_kms() :\r\n            super().calculate_pizza_cost()\r\n            pizza_total = 0\r\n            if self.pizza_cost != -1 :\r\n                pizza_distance = self.get_distance_in_kms()\r\n                if pizza_distance <= 5 :\r\n                    pizza_total = self.pizza_cost + (pizza_distance * 5)\r\n                    self.pizza_cost = pizza_total\r\n                if pizza_distance > 5 and pizza_distance <= 10:\r\n                    first_five_charge = pizza_distance * 5\r\n                    remaining_kms = pizza_distance - 5 \r\n                    remaining_price_charge = remaining_kms * 7\r\n                    pizza_total = self.pizza_cost + (first_five_charge + remaining_price_charge)\r\n                    self.pizza_cost = pizza_total\r\n            \r\n            \r\n            else :\r\n                self.pizza_cost = -1\r\n                return self.pizza_cost\r\n                  \r\n        else :\r\n            self.pizza_cost = -1\r\n            return self.pizza_cost\r\n        \r\n        \r\n           \r\n   \r\n    \r\n    \r\n    \r\n    \r\ncust = Customer(\"Kautilya\" , 5)\r\npizza = Pizzaservice(cust,\"medIUm\",False)\r\npizza.calculate_pizza_cost()\r\ndoor_d = Doordelivery(cust,\"medIUm\",False,6)\r\ndoor_d.calculate_pizza_cost()\r\n","asgnmtId":"30","SolutionFileName":"Assignment30.py","AsgnmtTyp":"A","TestcaseFileName":""}
2017-02-14 16:46:47,673 INFO  Successfully processed and prepared the input for the verify service
2017-02-14 16:46:47,674 INFO  Successfully set the request parameters for VerifySolution
2017-02-14 16:46:47,676 INFO  Invoking the service to verify the user solution
2017-02-14 16:46:47,679 INFO  Time before invoking service:Tue Feb 14 16:46:47 IST 2017
2017-02-14 16:46:47,680 INFO  Initialising service address for VerifySolution
2017-02-14 16:46:47,682 INFO  Time before invoking service In SUPER:Tue Feb 14 16:46:47 IST 2017
2017-02-14 16:46:53,905 INFO  Time after invoking service In SUPER:Tue Feb 14 16:46:53 IST 2017
2017-02-14 16:46:53,920 INFO  Service responded successfully with required details
2017-02-14 16:46:53,924 INFO  Time after invoking service:Tue Feb 14 16:46:53 IST 2017
2017-02-14 16:46:53,936 INFO  User solution successfully verified
2017-02-14 16:46:53,939 INFO  Processing the response from verify service
2017-02-14 16:46:53,963 INFO  Starting to parse JSON response
2017-02-14 16:46:53,972 ERROR Keys used to parse test result JSON might be incorrect
2017-02-14 16:46:53,979 ERROR Keys used to parse test result JSON might be incorrect
2017-02-14 16:46:53,982 ERROR Keys used to parse test result JSON might be incorrect
2017-02-14 16:46:53,984 ERROR Keys used to parse test result JSON might be incorrect
2017-02-14 16:46:53,985 ERROR Keys used to parse test result JSON might be incorrect
2017-02-14 16:46:53,993 ERROR Keys used to parse test result JSON might be incorrect
2017-02-14 16:46:53,995 ERROR Keys used to parse test result JSON might be incorrect
2017-02-14 16:46:53,996 ERROR Keys used to parse test result JSON might be incorrect
2017-02-14 16:46:53,997 ERROR Keys used to parse test result JSON might be incorrect
2017-02-14 16:46:53,999 INFO  Successfully parsed JSON response
2017-02-14 16:46:54,013 INFO  In the process of generating verify response in HTML
2017-02-14 16:46:54,243 INFO  Successfully generated verify response in HTML
2017-02-14 16:46:54,256 INFO  Successfully processed the response from service
