2017-02-16 08:32:02,617 INFO  Loading Baseframework Plugin
2017-02-16 08:32:03,545 INFO  Initializing the platform to load the Menu - HandsOn
2017-02-16 08:32:06,385 INFO  Loading the Menu - HandsOn
2017-02-16 08:32:06,845 INFO  Successfully loaded the Menu - HandsOn
2017-02-16 19:13:25,371 INFO  Loading Programming Assignment Plugin
2017-02-16 19:13:25,873 INFO  Setting request parameters for VerifySolution
2017-02-16 19:13:25,875 INFO  Initiating to process and prepare Input for the verify service
2017-02-16 19:13:25,880 INFO  Starting to parse the user solution
2017-02-16 19:13:25,882 INFO  Displaying user solution
2017-02-16 19:13:30,283 INFO  Successfully parsed the user solution{"CourseShortName":"OOP","UserSolution":"#OOP-Assgn-30\r\n#Start writing your code here\r\n\r\nclass Customer :\r\n    \r\n    def __init__(self,customer_name , quantity):\r\n        self.__customer_name = customer_name\r\n        self.__quantity = quantity\r\n        \r\n    def validate_quantity(self):\r\n        if self.get_quantity() >= 1 and self.get_quantity() <= 5 :\r\n            return True\r\n        else :\r\n            return False\r\n    \r\n    def get_customer_name(self):\r\n        return self.__customer_name\r\n    \r\n    def get_quantity(self):\r\n        return  self.__quantity\r\n            \r\n\r\n\r\nclass Pizzaservice :\r\n    counter = 100\r\n    \r\n    def __init__(self,customer,pizza_type,additional_topping):\r\n        self.__customer = customer\r\n        self.__service_id = None\r\n        self.__pizza_type = pizza_type\r\n        self.__additional_topping = additional_topping\r\n        \r\n        self.pizza_cost = None\r\n\r\n    def get_customer(self):\r\n        return self.__customer\r\n\r\n\r\n    def get_service_id(self):\r\n        return self.__service_id\r\n\r\n\r\n    def get_pizza_type(self):\r\n        return self.__pizza_type\r\n\r\n\r\n    def get_additional_topping(self):\r\n        return self.__additional_topping\r\n\r\n        \r\n    def validate_pizza_type(self):\r\n        if self.get_pizza_type().lower() == \"small\" or self.get_pizza_type().lower() == \"medium\" :\r\n            return True\r\n        else :\r\n            return False\r\n\r\n    def calculate_pizza_cost(self):\r\n        pizza_price = 0\r\n        self.pizza_cost = 0\r\n        pizza_topping = 0\r\n        quantity  = self.get_customer().get_quantity()\r\n        Pizzaservice.counter += 1\r\n        \r\n        if self.validate_pizza_type() and self.get_customer().validate_quantity() :\r\n            if self.get_pizza_type().lower() == \"small\" :\r\n                pizza_price = 150\r\n                pizza_topping = 35\r\n                \r\n                if self.get_additional_topping() :\r\n                    self.pizza_cost = (pizza_price + pizza_topping) * quantity \r\n                else :\r\n                    self.pizza_cost = pizza_price * quantity\r\n            \r\n            elif self.get_pizza_type().lower() == \"medium\" :\r\n                pizza_price = 200\r\n                pizza_topping = 50\r\n                if self.get_additional_topping() :\r\n                    self.pizza_cost = (pizza_price + pizza_topping) * quantity \r\n                else :\r\n                    self.pizza_cost = pizza_price * quantity\r\n            \r\n            self.get_service_id = self.get_pizza_type()[0] + str(Pizzaservice.counter)\r\n            \r\n            return (self.pizza_cost)\r\n        \r\n        else :\r\n            self.pizza_cost= -1\r\n            return (self.pizza_cost)\r\n        \r\n        \r\n    \r\n    \r\nclass Doordelivery(Pizzaservice) :\r\n    \r\n    def __init__(self,customer,pizza_type,additional_topping,distance_in_kms):\r\n        super().__init__(customer, pizza_type, additional_topping)\r\n        self.__delivery_charge = None\r\n        self.__distance_in_kms = distance_in_kms\r\n\r\n    def get_delivery_charge(self):\r\n        return self.__delivery_charge\r\n\r\n\r\n    def get_distance_in_kms(self):\r\n        return self.__distance_in_kms\r\n\r\n    \r\n    def validate_distance_in_kms(self):\r\n        if self.get_distance_in_kms() >= 1 and self.get_distance_in_kms() <= 10 :\r\n            return True\r\n        else :\r\n            return False\r\n\r\n    def calculate_pizza_cost(self):\r\n        pizza_total = 0\r\n        if self.validate_distance_in_kms() :\r\n            super().calculate_pizza_cost()\r\n            pizza_total = 0\r\n            if self.pizza_cost != -1 :\r\n                pizza_distance = self.get_distance_in_kms()\r\n                if pizza_distance <= 5 :\r\n                    pizza_total = self.pizza_cost + (pizza_distance * 5)\r\n                    self.pizza_cost = pizza_total\r\n                if pizza_distance > 5 and pizza_distance <= 10:\r\n                    first_five_charge = pizza_distance * 5\r\n                    remaining_kms = pizza_distance - 5 \r\n                    remaining_price_charge = remaining_kms * 7\r\n                    pizza_total = self.pizza_cost + (first_five_charge + remaining_price_charge)\r\n                    self.pizza_cost = pizza_total\r\n            \r\n            \r\n            else :\r\n                self.pizza_cost = -1\r\n                return self.pizza_cost\r\n                  \r\n        else :\r\n            self.pizza_cost = -1\r\n            return self.pizza_cost\r\n        \r\n        \r\n           \r\n   \r\n    \r\n    \r\n    \r\n    \r\ncust = Customer(\"Kautilya\" , 5)\r\npizza = Pizzaservice(cust,\"medIUm\",False)\r\npizza.calculate_pizza_cost()\r\ndoor_d = Doordelivery(cust,\"medIUm\",False,6)\r\ndoor_d.calculate_pizza_cost()\r\n","asgnmtId":"30","SolutionFileName":"Assignment30.py","AsgnmtTyp":"A","TestcaseFileName":""}
2017-02-16 19:13:30,286 INFO  Successfully processed and prepared the input for the verify service
2017-02-16 19:13:30,286 INFO  Successfully set the request parameters for VerifySolution
2017-02-16 19:13:30,286 INFO  Invoking the service to verify the user solution
2017-02-16 19:13:30,288 INFO  Time before invoking service:Thu Feb 16 19:13:30 IST 2017
2017-02-16 19:13:30,289 INFO  Initialising service address for VerifySolution
2017-02-16 19:13:30,290 INFO  Time before invoking service In SUPER:Thu Feb 16 19:13:30 IST 2017
2017-02-16 19:13:35,789 INFO  Time after invoking service In SUPER:Thu Feb 16 19:13:35 IST 2017
2017-02-16 19:13:35,790 INFO  Service responded successfully with required details
2017-02-16 19:13:35,791 INFO  Time after invoking service:Thu Feb 16 19:13:35 IST 2017
2017-02-16 19:13:35,792 INFO  User solution successfully verified
2017-02-16 19:13:35,793 INFO  Processing the response from verify service
2017-02-16 19:13:35,798 INFO  Starting to parse JSON response
2017-02-16 19:13:35,802 ERROR Keys used to parse test result JSON might be incorrect
2017-02-16 19:13:35,804 ERROR Keys used to parse test result JSON might be incorrect
2017-02-16 19:13:35,805 ERROR Keys used to parse test result JSON might be incorrect
2017-02-16 19:13:35,805 ERROR Keys used to parse test result JSON might be incorrect
2017-02-16 19:13:35,806 ERROR Keys used to parse test result JSON might be incorrect
2017-02-16 19:13:35,807 ERROR Keys used to parse test result JSON might be incorrect
2017-02-16 19:13:35,807 ERROR Keys used to parse test result JSON might be incorrect
2017-02-16 19:13:35,808 ERROR Keys used to parse test result JSON might be incorrect
2017-02-16 19:13:35,809 ERROR Keys used to parse test result JSON might be incorrect
2017-02-16 19:13:35,810 INFO  Successfully parsed JSON response
2017-02-16 19:13:35,812 INFO  In the process of generating verify response in HTML
2017-02-16 19:13:36,143 INFO  Successfully generated verify response in HTML
2017-02-16 19:13:36,144 INFO  Successfully processed the response from service
2017-02-16 19:19:46,736 INFO  Setting request parameters for VerifySolution
2017-02-16 19:19:46,738 INFO  Initiating to process and prepare Input for the verify service
2017-02-16 19:19:46,740 INFO  Starting to parse the user solution
2017-02-16 19:19:46,741 INFO  Displaying user solution
2017-02-16 19:19:50,965 INFO  Successfully parsed the user solution{"CourseShortName":"OOP","UserSolution":"#OOP-Assgn-30\r\n#Start writing your code here\r\n\r\nclass Customer :\r\n    \r\n    def __init__(self,customer_name , quantity):\r\n        self.__customer_name = customer_name\r\n        self.__quantity = quantity\r\n        \r\n    def validate_quantity(self):\r\n        if self.get_quantity() >= 1 and self.get_quantity() <= 5 :\r\n            return True\r\n        else :\r\n            return False\r\n    \r\n    def get_customer_name(self):\r\n        return self.__customer_name\r\n    \r\n    def get_quantity(self):\r\n        return  self.__quantity\r\n            \r\n\r\n\r\nclass Pizzaservice :\r\n    counter = 100\r\n    \r\n    def __init__(self,customer,pizza_type,additional_topping):\r\n        self.__customer = customer\r\n        self.__service_id = None\r\n        self.__pizza_type = pizza_type\r\n        self.__additional_topping = additional_topping\r\n        \r\n        self.pizza_cost = None\r\n\r\n    def get_customer(self):\r\n        return self.__customer\r\n\r\n\r\n    def get_service_id(self):\r\n        return self.__service_id\r\n\r\n\r\n    def get_pizza_type(self):\r\n        return self.__pizza_type\r\n\r\n\r\n    def get_additional_topping(self):\r\n        return self.__additional_topping\r\n\r\n        \r\n    def validate_pizza_type(self):\r\n        if self.get_pizza_type().lower() == \"small\" or self.get_pizza_type().lower() == \"medium\" :\r\n            return True\r\n        else :\r\n            return False\r\n\r\n    def calculate_pizza_cost(self):\r\n        pizza_price = 0\r\n        self.pizza_cost = 0\r\n        pizza_topping = 0\r\n        quantity  = self.get_customer().get_quantity()\r\n        Pizzaservice.counter += 1\r\n        \r\n        if self.validate_pizza_type() and self.get_customer().validate_quantity() :\r\n            if self.get_pizza_type().lower() == \"small\" :\r\n                pizza_price = 150\r\n                pizza_topping = 35\r\n                \r\n                if self.get_additional_topping() :\r\n                    self.pizza_cost = (pizza_price + pizza_topping) * quantity \r\n                else :\r\n                    self.pizza_cost = pizza_price * quantity\r\n            \r\n            elif self.get_pizza_type().lower() == \"medium\" :\r\n                pizza_price = 200\r\n                pizza_topping = 50\r\n                if self.get_additional_topping() :\r\n                    self.pizza_cost = (pizza_price + pizza_topping) * quantity \r\n                else :\r\n                    self.pizza_cost = pizza_price * quantity\r\n            \r\n            self.get_service_id = self.get_pizza_type()[0] + str(Pizzaservice.counter)\r\n            \r\n            return (self.pizza_cost)\r\n        \r\n        else :\r\n            self.pizza_cost= -1\r\n            return (self.pizza_cost)\r\n        \r\n        \r\n    \r\n    \r\nclass Doordelivery(Pizzaservice) :\r\n    \r\n    def __init__(self,customer,pizza_type,additional_topping,distance_in_kms):\r\n        super().__init__(customer, pizza_type, additional_topping)\r\n        self.__delivery_charge = None\r\n        self.__distance_in_kms = distance_in_kms\r\n\r\n    def get_delivery_charge(self):\r\n        return self.__delivery_charge\r\n\r\n\r\n    def get_distance_in_kms(self):\r\n        return self.__distance_in_kms\r\n\r\n    \r\n    def validate_distance_in_kms(self):\r\n        if self.get_distance_in_kms() >= 1 and self.get_distance_in_kms() <= 10 :\r\n            return True\r\n        else :\r\n            return False\r\n\r\n    def calculate_pizza_cost(self):\r\n        pizza_total = 0\r\n        if self.validate_distance_in_kms() :\r\n            super().calculate_pizza_cost()\r\n            pizza_total = 0\r\n            if self.pizza_cost != -1 :\r\n                self.pizza_cost = pizza_total\r\n                pizza_distance = self.get_distance_in_kms()\r\n                if pizza_distance <= 5 :\r\n                    pizza_total = self.pizza_cost + (pizza_distance * 5)\r\n                    self.pizza_cost = pizza_total\r\n                if pizza_distance > 5 and pizza_distance <= 10:\r\n                    first_five_charge = pizza_distance * 5\r\n                    remaining_kms = pizza_distance - 5 \r\n                    remaining_price_charge = remaining_kms * 7\r\n                    pizza_total = self.pizza_cost + (first_five_charge + remaining_price_charge)\r\n                    self.pizza_cost = pizza_total\r\n                \r\n            \r\n            else :\r\n                self.pizza_cost = -1\r\n                return self.pizza_cost\r\n                  \r\n        else :\r\n            self.pizza_cost = -1\r\n            return self.pizza_cost\r\n        \r\n        \r\n           \r\n   \r\n    \r\n    \r\n    \r\n    \r\ncust = Customer(\"Kautilya\" , 4)\r\npizza = Pizzaservice(cust,\"small\",True)\r\npizza.calculate_pizza_cost()\r\ndoor_d = Doordelivery(cust,\"small\",True,24)\r\ndoor_d.calculate_pizza_cost()\r\n","asgnmtId":"30","SolutionFileName":"Assignment30.py","AsgnmtTyp":"A","TestcaseFileName":""}
2017-02-16 19:19:50,967 INFO  Successfully processed and prepared the input for the verify service
2017-02-16 19:19:50,969 INFO  Successfully set the request parameters for VerifySolution
2017-02-16 19:19:50,969 INFO  Invoking the service to verify the user solution
2017-02-16 19:19:50,970 INFO  Time before invoking service:Thu Feb 16 19:19:50 IST 2017
2017-02-16 19:19:50,971 INFO  Initialising service address for VerifySolution
2017-02-16 19:19:50,972 INFO  Time before invoking service In SUPER:Thu Feb 16 19:19:50 IST 2017
2017-02-16 19:19:57,400 INFO  Time after invoking service In SUPER:Thu Feb 16 19:19:57 IST 2017
2017-02-16 19:19:57,405 INFO  Service responded successfully with required details
2017-02-16 19:19:57,407 INFO  Time after invoking service:Thu Feb 16 19:19:57 IST 2017
2017-02-16 19:19:57,409 INFO  User solution successfully verified
2017-02-16 19:19:57,411 INFO  Processing the response from verify service
2017-02-16 19:19:57,417 INFO  Starting to parse JSON response
2017-02-16 19:19:57,420 ERROR Keys used to parse test result JSON might be incorrect
2017-02-16 19:19:57,424 ERROR Keys used to parse test result JSON might be incorrect
2017-02-16 19:19:57,425 ERROR Keys used to parse test result JSON might be incorrect
2017-02-16 19:19:57,427 ERROR Keys used to parse test result JSON might be incorrect
2017-02-16 19:19:57,428 ERROR Keys used to parse test result JSON might be incorrect
2017-02-16 19:19:57,431 ERROR Keys used to parse test result JSON might be incorrect
2017-02-16 19:19:57,433 ERROR Keys used to parse test result JSON might be incorrect
2017-02-16 19:19:57,434 ERROR Keys used to parse test result JSON might be incorrect
2017-02-16 19:19:57,436 ERROR Keys used to parse test result JSON might be incorrect
2017-02-16 19:19:57,438 ERROR Keys used to parse test result JSON might be incorrect
2017-02-16 19:19:57,439 INFO  Successfully parsed JSON response
2017-02-16 19:19:57,441 INFO  In the process of generating verify response in HTML
2017-02-16 19:19:57,585 INFO  Successfully generated verify response in HTML
2017-02-16 19:19:57,586 INFO  Successfully processed the response from service
2017-02-16 19:21:38,849 INFO  Setting request parameters for VerifySolution
2017-02-16 19:21:38,851 INFO  Initiating to process and prepare Input for the verify service
2017-02-16 19:21:38,852 INFO  Starting to parse the user solution
2017-02-16 19:21:38,853 INFO  Displaying user solution
2017-02-16 19:21:43,317 INFO  Successfully parsed the user solution{"CourseShortName":"OOP","UserSolution":"#OOP-Assgn-30\r\n#Start writing your code here\r\n\r\nclass Customer :\r\n    \r\n    def __init__(self,customer_name , quantity):\r\n        self.__customer_name = customer_name\r\n        self.__quantity = quantity\r\n        \r\n    def validate_quantity(self):\r\n        if self.get_quantity() >= 1 and self.get_quantity() <= 5 :\r\n            return True\r\n        else :\r\n            return False\r\n    \r\n    def get_customer_name(self):\r\n        return self.__customer_name\r\n    \r\n    def get_quantity(self):\r\n        return  self.__quantity\r\n            \r\n\r\n\r\nclass Pizzaservice :\r\n    counter = 100\r\n    \r\n    def __init__(self,customer,pizza_type,additional_topping):\r\n        self.__customer = customer\r\n        self.__service_id = None\r\n        self.__pizza_type = pizza_type\r\n        self.__additional_topping = additional_topping\r\n        \r\n        self.pizza_cost = None\r\n\r\n    def get_customer(self):\r\n        return self.__customer\r\n\r\n\r\n    def get_service_id(self):\r\n        return self.__service_id\r\n\r\n\r\n    def get_pizza_type(self):\r\n        return self.__pizza_type\r\n\r\n\r\n    def get_additional_topping(self):\r\n        return self.__additional_topping\r\n\r\n        \r\n    def validate_pizza_type(self):\r\n        if self.get_pizza_type().lower() == \"small\" or self.get_pizza_type().lower() == \"medium\" :\r\n            return True\r\n        else :\r\n            return False\r\n\r\n    def calculate_pizza_cost(self):\r\n        pizza_price = 0\r\n        self.pizza_cost = 0\r\n        pizza_topping = 0\r\n        quantity  = self.get_customer().get_quantity()\r\n        Pizzaservice.counter += 1\r\n        \r\n        if self.validate_pizza_type() and self.get_customer().validate_quantity() :\r\n            if self.get_pizza_type().lower() == \"small\" :\r\n                pizza_price = 150\r\n                pizza_topping = 35\r\n                \r\n                if self.get_additional_topping() :\r\n                    self.pizza_cost = (pizza_price + pizza_topping) * quantity \r\n                else :\r\n                    self.pizza_cost = pizza_price * quantity\r\n            \r\n            elif self.get_pizza_type().lower() == \"medium\" :\r\n                pizza_price = 200\r\n                pizza_topping = 50\r\n                if self.get_additional_topping() :\r\n                    self.pizza_cost = (pizza_price + pizza_topping) * quantity \r\n                else :\r\n                    self.pizza_cost = pizza_price * quantity\r\n            \r\n            self.get_service_id = self.get_pizza_type()[0] + str(Pizzaservice.counter)\r\n            return (self.pizza_cost)\r\n        \r\n        else :\r\n            self.pizza_cost= -1\r\n            return (self.pizza_cost)\r\n        \r\n        \r\n    \r\n    \r\nclass Doordelivery(Pizzaservice) :\r\n    \r\n    def __init__(self,customer,pizza_type,additional_topping,distance_in_kms):\r\n        super().__init__(customer, pizza_type, additional_topping)\r\n        self.__delivery_charge = None\r\n        self.__distance_in_kms = distance_in_kms\r\n\r\n    def get_delivery_charge(self):\r\n        return self.__delivery_charge\r\n\r\n\r\n    def get_distance_in_kms(self):\r\n        return self.__distance_in_kms\r\n\r\n    \r\n    def validate_distance_in_kms(self):\r\n        if self.get_distance_in_kms() >= 1 and self.get_distance_in_kms() <= 10 :\r\n            return True\r\n        else :\r\n            return False\r\n\r\n    def calculate_pizza_cost(self):\r\n        pizza_total = 0\r\n        if self.validate_distance_in_kms() :\r\n            super().calculate_pizza_cost()\r\n            pizza_total = 0\r\n            if self.pizza_cost != -1 :\r\n                pizza_distance = self.get_distance_in_kms()\r\n                if pizza_distance <= 5 :\r\n                    pizza_total = self.pizza_cost + (pizza_distance * 5)\r\n                    self.pizza_cost = pizza_total\r\n                if pizza_distance > 5 and pizza_distance <= 10:\r\n                    first_five_charge = pizza_distance * 5\r\n                    remaining_kms = pizza_distance - 5 \r\n                    remaining_price_charge = remaining_kms * 7\r\n                    pizza_total = self.pizza_cost + (first_five_charge + remaining_price_charge)\r\n                    self.pizza_cost = pizza_total\r\n            \r\n            \r\n            else :\r\n                self.pizza_cost = -1\r\n                return self.pizza_cost\r\n                  \r\n        else :\r\n            self.pizza_cost = -1\r\n            return self.pizza_cost\r\n        \r\n        \r\n           \r\n   \r\n    \r\n    \r\n    \r\n    \r\ncust = Customer(\"Kautilya\" , 5)\r\npizza = Pizzaservice(cust,\"medIUm\",False)\r\npizza.calculate_pizza_cost()\r\ndoor_d = Doordelivery(cust,\"medIUm\",False,6)\r\ndoor_d.calculate_pizza_cost()\r\n","asgnmtId":"30","SolutionFileName":"Assignment30.py","AsgnmtTyp":"A","TestcaseFileName":""}
2017-02-16 19:21:43,318 INFO  Successfully processed and prepared the input for the verify service
2017-02-16 19:21:43,319 INFO  Successfully set the request parameters for VerifySolution
2017-02-16 19:21:43,319 INFO  Invoking the service to verify the user solution
2017-02-16 19:21:43,320 INFO  Time before invoking service:Thu Feb 16 19:21:43 IST 2017
2017-02-16 19:21:43,321 INFO  Initialising service address for VerifySolution
2017-02-16 19:21:43,322 INFO  Time before invoking service In SUPER:Thu Feb 16 19:21:43 IST 2017
2017-02-16 19:21:49,944 INFO  Time after invoking service In SUPER:Thu Feb 16 19:21:49 IST 2017
2017-02-16 19:21:49,946 INFO  Service responded successfully with required details
2017-02-16 19:21:49,947 INFO  Time after invoking service:Thu Feb 16 19:21:49 IST 2017
2017-02-16 19:21:49,948 INFO  User solution successfully verified
2017-02-16 19:21:49,948 INFO  Processing the response from verify service
2017-02-16 19:21:49,951 INFO  Starting to parse JSON response
2017-02-16 19:21:49,952 ERROR Keys used to parse test result JSON might be incorrect
2017-02-16 19:21:49,952 ERROR Keys used to parse test result JSON might be incorrect
2017-02-16 19:21:49,953 ERROR Keys used to parse test result JSON might be incorrect
2017-02-16 19:21:49,953 ERROR Keys used to parse test result JSON might be incorrect
2017-02-16 19:21:49,954 ERROR Keys used to parse test result JSON might be incorrect
2017-02-16 19:21:49,955 ERROR Keys used to parse test result JSON might be incorrect
2017-02-16 19:21:49,956 ERROR Keys used to parse test result JSON might be incorrect
2017-02-16 19:21:49,956 ERROR Keys used to parse test result JSON might be incorrect
2017-02-16 19:21:49,957 ERROR Keys used to parse test result JSON might be incorrect
2017-02-16 19:21:49,958 INFO  Successfully parsed JSON response
2017-02-16 19:21:49,959 INFO  In the process of generating verify response in HTML
2017-02-16 19:21:50,047 INFO  Successfully generated verify response in HTML
2017-02-16 19:21:50,048 INFO  Successfully processed the response from service
2017-02-16 19:25:43,840 INFO  Setting request parameters for VerifySolution
2017-02-16 19:25:43,842 INFO  Initiating to process and prepare Input for the verify service
2017-02-16 19:25:43,843 INFO  Starting to parse the user solution
2017-02-16 19:25:43,844 INFO  Displaying user solution
2017-02-16 19:25:46,959 INFO  Successfully parsed the user solution{"CourseShortName":"OOP","UserSolution":"#OOP-Assgn-30\r\n#Start writing your code here\r\n\r\nclass Customer :\r\n    \r\n    def __init__(self,customer_name , quantity):\r\n        self.__customer_name = customer_name\r\n        self.__quantity = quantity\r\n        \r\n    def validate_quantity(self):\r\n        if self.get_quantity() >= 1 and self.get_quantity() <= 5 :\r\n            return True\r\n        else :\r\n            return False\r\n    \r\n    def get_customer_name(self):\r\n        return self.__customer_name\r\n    \r\n    def get_quantity(self):\r\n        return  self.__quantity\r\n            \r\n\r\n\r\nclass Pizzaservice :\r\n    counter = 100\r\n    \r\n    def __init__(self,customer,pizza_type,additional_topping):\r\n        self.__customer = customer\r\n        self.__service_id = None\r\n        self.__pizza_type = pizza_type\r\n        self.__additional_topping = additional_topping\r\n        \r\n        self.pizza_cost = None\r\n\r\n    def get_customer(self):\r\n        return self.__customer\r\n\r\n\r\n    def get_service_id(self):\r\n        return self.__service_id\r\n\r\n\r\n    def get_pizza_type(self):\r\n        return self.__pizza_type\r\n\r\n\r\n    def get_additional_topping(self):\r\n        return self.__additional_topping\r\n\r\n        \r\n    def validate_pizza_type(self):\r\n        if self.get_pizza_type().lower() == \"small\" or self.get_pizza_type().lower() == \"medium\" :\r\n            return True\r\n        else :\r\n            return False\r\n\r\n    def calculate_pizza_cost(self):\r\n        pizza_price = 0\r\n        self.pizza_cost = 0\r\n        pizza_topping = 0\r\n        quantity  = self.get_customer().get_quantity()\r\n        Pizzaservice.counter += 1\r\n        \r\n        if self.validate_pizza_type() and self.get_customer().validate_quantity() :\r\n            if self.get_pizza_type().lower() == \"small\" :\r\n                pizza_price = 150\r\n                pizza_topping = 35\r\n                \r\n                if self.get_additional_topping() :\r\n                    self.pizza_cost = (pizza_price + pizza_topping) * quantity \r\n                else :\r\n                    self.pizza_cost = pizza_price * quantity\r\n            \r\n            elif self.get_pizza_type().lower() == \"medium\" :\r\n                pizza_price = 200\r\n                pizza_topping = 50\r\n                if self.get_additional_topping() :\r\n                    self.pizza_cost = (pizza_price + pizza_topping) * quantity \r\n                else :\r\n                    self.pizza_cost = pizza_price * quantity\r\n            \r\n                \r\n            self.get_service_id = self.get_pizza_type()[0] + str(Pizzaservice.counter)\r\n            return (self.pizza_cost)\r\n        \r\n        else :\r\n            self.pizza_cost= -1\r\n            return (self.pizza_cost)\r\n        \r\n        \r\n    \r\n    \r\nclass Doordelivery(Pizzaservice) :\r\n    \r\n    def __init__(self,customer,pizza_type,additional_topping,distance_in_kms):\r\n        super().__init__(customer, pizza_type, additional_topping)\r\n        self.__delivery_charge = None\r\n        self.__distance_in_kms = distance_in_kms\r\n\r\n    def get_delivery_charge(self):\r\n        return self.__delivery_charge\r\n\r\n\r\n    def get_distance_in_kms(self):\r\n        return self.__distance_in_kms\r\n\r\n    \r\n    def validate_distance_in_kms(self):\r\n        if self.get_distance_in_kms() >= 1 and self.get_distance_in_kms() <= 10 :\r\n            return True\r\n        else :\r\n            return False\r\n\r\n    def calculate_pizza_cost(self):\r\n        pizza_total = 0\r\n        if self.validate_distance_in_kms() :\r\n            super().calculate_pizza_cost()\r\n            pizza_total = 0\r\n            if self.pizza_cost != -1 :\r\n                pizza_distance = self.get_distance_in_kms()\r\n                if pizza_distance <= 5 :\r\n                    pizza_total = self.pizza_cost + (pizza_distance * 5)\r\n                    self.pizza_cost = pizza_total\r\n                if pizza_distance > 5 and pizza_distance <= 10:\r\n                    first_five_charge = pizza_distance * 5\r\n                    remaining_kms = pizza_distance - 5 \r\n                    remaining_price_charge = remaining_kms * 7\r\n                    pizza_total = self.pizza_cost + (first_five_charge + remaining_price_charge)\r\n                    self.pizza_cost = pizza_total\r\n            \r\n            \r\n            else :\r\n                self.pizza_cost = -1\r\n                return self.pizza_cost\r\n                  \r\n        else :\r\n            self.pizza_cost = -1\r\n            return self.pizza_cost\r\n        \r\n        \r\n           \r\n   \r\n    \r\n    \r\n    \r\n    \r\ncust = Customer(\"Kautilya\" , 5)\r\npizza = Pizzaservice(cust,\"medIUm\",False)\r\nprint(pizza.calculate_pizza_cost())\r\n# door_d = Doordelivery(cust,\"medIUm\",False,6)\r\n# door_d.calculate_pizza_cost()\r\n","asgnmtId":"30","SolutionFileName":"Assignment30.py","AsgnmtTyp":"A","TestcaseFileName":""}
2017-02-16 19:25:46,960 INFO  Successfully processed and prepared the input for the verify service
2017-02-16 19:25:46,961 INFO  Successfully set the request parameters for VerifySolution
2017-02-16 19:25:46,962 INFO  Invoking the service to verify the user solution
2017-02-16 19:25:46,963 INFO  Time before invoking service:Thu Feb 16 19:25:46 IST 2017
2017-02-16 19:25:46,963 INFO  Initialising service address for VerifySolution
2017-02-16 19:25:46,965 INFO  Time before invoking service In SUPER:Thu Feb 16 19:25:46 IST 2017
2017-02-16 19:25:52,557 INFO  Time after invoking service In SUPER:Thu Feb 16 19:25:52 IST 2017
2017-02-16 19:25:52,557 INFO  Service responded successfully with required details
2017-02-16 19:25:52,559 INFO  Time after invoking service:Thu Feb 16 19:25:52 IST 2017
2017-02-16 19:25:52,560 INFO  User solution successfully verified
2017-02-16 19:25:52,561 INFO  Processing the response from verify service
2017-02-16 19:25:52,565 INFO  Starting to parse JSON response
2017-02-16 19:25:52,568 ERROR Keys used to parse test result JSON might be incorrect
2017-02-16 19:25:52,568 ERROR Keys used to parse test result JSON might be incorrect
2017-02-16 19:25:52,569 ERROR Keys used to parse test result JSON might be incorrect
2017-02-16 19:25:52,569 ERROR Keys used to parse test result JSON might be incorrect
2017-02-16 19:25:52,570 ERROR Keys used to parse test result JSON might be incorrect
2017-02-16 19:25:52,570 ERROR Keys used to parse test result JSON might be incorrect
2017-02-16 19:25:52,571 ERROR Keys used to parse test result JSON might be incorrect
2017-02-16 19:25:52,571 ERROR Keys used to parse test result JSON might be incorrect
2017-02-16 19:25:52,571 ERROR Keys used to parse test result JSON might be incorrect
2017-02-16 19:25:52,572 INFO  Successfully parsed JSON response
2017-02-16 19:25:52,574 INFO  In the process of generating verify response in HTML
2017-02-16 19:25:52,652 INFO  Successfully generated verify response in HTML
2017-02-16 19:25:52,653 INFO  Successfully processed the response from service
2017-02-16 19:31:29,094 INFO  Setting request parameters for VerifySolution
2017-02-16 19:31:29,103 INFO  Initiating to process and prepare Input for the verify service
2017-02-16 19:31:29,103 INFO  Starting to parse the user solution
2017-02-16 19:31:29,104 INFO  Displaying user solution
2017-02-16 19:31:32,444 INFO  Successfully parsed the user solution{"CourseShortName":"OOP","UserSolution":"#OOP-Assgn-30\r\n#Start writing your code here\r\n\r\nclass Customer :\r\n    \r\n    def __init__(self,customer_name , quantity):\r\n        self.__customer_name = customer_name\r\n        self.__quantity = quantity\r\n        \r\n    def validate_quantity(self):\r\n        if self.get_quantity() >= 1 and self.get_quantity() <= 5 :\r\n            return True\r\n        else :\r\n            return False\r\n    \r\n    def get_customer_name(self):\r\n        return self.__customer_name\r\n    \r\n    def get_quantity(self):\r\n        return  self.__quantity\r\n            \r\n\r\n\r\nclass Pizzaservice :\r\n    counter = 100\r\n    \r\n    def __init__(self,customer,pizza_type,additional_topping):\r\n        self.__customer = customer\r\n        self.__service_id = None\r\n        self.__pizza_type = pizza_type\r\n        self.__additional_topping = additional_topping\r\n        \r\n        self.pizza_cost = None\r\n\r\n    def get_customer(self):\r\n        return self.__customer\r\n\r\n\r\n    def get_service_id(self):\r\n        return self.__service_id\r\n\r\n\r\n    def get_pizza_type(self):\r\n        return self.__pizza_type\r\n\r\n\r\n    def get_additional_topping(self):\r\n        return self.__additional_topping\r\n\r\n        \r\n    def validate_pizza_type(self):\r\n        if self.get_pizza_type().lower() == \"small\" or self.get_pizza_type().lower() == \"medium\" :\r\n            return True\r\n        else :\r\n            return False\r\n\r\n    def calculate_pizza_cost(self):\r\n        pizza_price = 0\r\n        self.pizza_cost = 0\r\n        pizza_topping = 0\r\n        quantity  = self.get_customer().get_quantity()\r\n        Pizzaservice.counter += 1\r\n        \r\n        if self.validate_pizza_type() and self.get_customer().validate_quantity() :\r\n            if self.get_pizza_type().lower() == \"small\" :\r\n                pizza_price = 150\r\n                pizza_topping = 35\r\n                \r\n                if self.get_additional_topping() :\r\n                    self.pizza_cost = (pizza_price + pizza_topping) * quantity \r\n                else :\r\n                    self.pizza_cost = pizza_price * quantity\r\n            \r\n            elif self.get_pizza_type().lower() == \"medium\" :\r\n                pizza_price = 200\r\n                pizza_topping = 50\r\n                if self.get_additional_topping() :\r\n                    self.pizza_cost = (pizza_price + pizza_topping) * quantity \r\n                else :\r\n                    self.pizza_cost = pizza_price * quantity\r\n            \r\n                \r\n            self.get_service_id = self.get_pizza_type()[0] + str(Pizzaservice.counter)\r\n#             return (self.pizza_cost)\r\n        \r\n        else :\r\n            self.pizza_cost= -1\r\n#             return (self.pizza_cost)\r\n        \r\n        \r\n    \r\n    \r\nclass Doordelivery(Pizzaservice) :\r\n    \r\n    def __init__(self,customer,pizza_type,additional_topping,distance_in_kms):\r\n        super().__init__(customer, pizza_type, additional_topping)\r\n        self.__delivery_charge = None\r\n        self.__distance_in_kms = distance_in_kms\r\n\r\n    def get_delivery_charge(self):\r\n        return self.__delivery_charge\r\n\r\n\r\n    def get_distance_in_kms(self):\r\n        return self.__distance_in_kms\r\n\r\n    \r\n    def validate_distance_in_kms(self):\r\n        if self.get_distance_in_kms() >= 1 and self.get_distance_in_kms() <= 10 :\r\n            return True\r\n        else :\r\n            return False\r\n\r\n    def calculate_pizza_cost(self):\r\n        pizza_total = 0\r\n        if self.validate_distance_in_kms() :\r\n            super().calculate_pizza_cost()\r\n            pizza_total = 0\r\n            if self.pizza_cost != -1 :\r\n                pizza_distance = self.get_distance_in_kms()\r\n                if pizza_distance <= 5 :\r\n                    pizza_total = self.pizza_cost + (pizza_distance * 5)\r\n                    self.pizza_cost = pizza_total\r\n                if pizza_distance > 5 and pizza_distance <= 10:\r\n                    first_five_charge = pizza_distance * 5\r\n                    remaining_kms = pizza_distance - 5 \r\n                    remaining_price_charge = remaining_kms * 7\r\n                    pizza_total = self.pizza_cost + (first_five_charge + remaining_price_charge)\r\n                    self.pizza_cost = pizza_total\r\n            \r\n            \r\n            else :\r\n                self.pizza_cost = -1\r\n                return self.pizza_cost\r\n                  \r\n        else :\r\n            self.pizza_cost = -1\r\n            return self.pizza_cost\r\n        \r\n        \r\n           \r\n   \r\n    \r\n    \r\n    \r\n    \r\ncust = Customer(\"Kautilya\" , 5)\r\npizza = Pizzaservice(cust,\"medIUm\",True)\r\npizza.calculate_pizza_cost()\r\n# door_d = Doordelivery(cust,\"medIUm\",False,6)\r\n# door_d.calculate_pizza_cost()\r\n","asgnmtId":"30","SolutionFileName":"Assignment30.py","AsgnmtTyp":"A","TestcaseFileName":""}
2017-02-16 19:31:32,445 INFO  Successfully processed and prepared the input for the verify service
2017-02-16 19:31:32,446 INFO  Successfully set the request parameters for VerifySolution
2017-02-16 19:31:32,447 INFO  Invoking the service to verify the user solution
2017-02-16 19:31:32,448 INFO  Time before invoking service:Thu Feb 16 19:31:32 IST 2017
2017-02-16 19:31:32,449 INFO  Initialising service address for VerifySolution
2017-02-16 19:31:32,449 INFO  Time before invoking service In SUPER:Thu Feb 16 19:31:32 IST 2017
2017-02-16 19:31:37,993 INFO  Time after invoking service In SUPER:Thu Feb 16 19:31:37 IST 2017
2017-02-16 19:31:37,994 INFO  Service responded successfully with required details
2017-02-16 19:31:37,995 INFO  Time after invoking service:Thu Feb 16 19:31:37 IST 2017
2017-02-16 19:31:37,996 INFO  User solution successfully verified
2017-02-16 19:31:37,997 INFO  Processing the response from verify service
2017-02-16 19:31:37,999 INFO  Starting to parse JSON response
2017-02-16 19:31:38,001 ERROR Keys used to parse test result JSON might be incorrect
2017-02-16 19:31:38,001 ERROR Keys used to parse test result JSON might be incorrect
2017-02-16 19:31:38,002 ERROR Keys used to parse test result JSON might be incorrect
2017-02-16 19:31:38,002 ERROR Keys used to parse test result JSON might be incorrect
2017-02-16 19:31:38,003 ERROR Keys used to parse test result JSON might be incorrect
2017-02-16 19:31:38,003 ERROR Keys used to parse test result JSON might be incorrect
2017-02-16 19:31:38,004 ERROR Keys used to parse test result JSON might be incorrect
2017-02-16 19:31:38,004 ERROR Keys used to parse test result JSON might be incorrect
2017-02-16 19:31:38,005 ERROR Keys used to parse test result JSON might be incorrect
2017-02-16 19:31:38,006 INFO  Successfully parsed JSON response
2017-02-16 19:31:38,007 INFO  In the process of generating verify response in HTML
2017-02-16 19:31:38,078 INFO  Successfully generated verify response in HTML
2017-02-16 19:31:38,079 INFO  Successfully processed the response from service
