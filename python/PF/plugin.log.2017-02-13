2017-02-13 08:30:55,288 INFO  Loading Baseframework Plugin
2017-02-13 08:30:55,303 INFO  Initializing the platform to load the Menu - HandsOn
2017-02-13 08:30:57,753 INFO  Loading the Menu - HandsOn
2017-02-13 08:30:58,071 INFO  Successfully loaded the Menu - HandsOn
2017-02-13 14:33:12,244 INFO  Loading Programming Assignment Plugin
2017-02-13 14:33:12,927 INFO  Setting request parameters for VerifySolution
2017-02-13 14:33:12,928 INFO  Initiating to process and prepare Input for the verify service
2017-02-13 14:33:12,935 INFO  Starting to parse the user solution
2017-02-13 14:33:12,939 INFO  Displaying user solution
2017-02-13 14:33:19,529 INFO  Successfully parsed the user solution{"CourseShortName":"DSA","UserSolution":"#DSA-Exer-15\r\n\r\ndef pattern_search(text, pattern):\r\n    length = len(pattern)\r\n    count = 0\r\n    \r\n    for i in range (len(text)):\r\n        if text [i:(i+ length)] == pattern :\r\n            count += 1\r\n        \r\n \r\n    \r\n    return count\r\n    \r\n\r\n#Use different values for text and pattern and test your program\r\ntext = \"MESMERIZING MESSAGE\"\r\npattern = \"MES\"\r\nresult=pattern_search(text, pattern)\r\nprint(\"The given text:\",text)\r\nprint(\"Pattern:\",pattern)\r\nprint(\"No. of occurrences of the pattern :\",result)\r\n","asgnmtId":"15","SolutionFileName":"Exercise15.py","AsgnmtTyp":"E","TestcaseFileName":""}
2017-02-13 14:33:19,530 INFO  Successfully processed and prepared the input for the verify service
2017-02-13 14:33:19,532 INFO  Successfully set the request parameters for VerifySolution
2017-02-13 14:33:19,533 INFO  Invoking the service to verify the user solution
2017-02-13 14:33:19,535 INFO  Time before invoking service:Mon Feb 13 14:33:19 IST 2017
2017-02-13 14:33:19,536 INFO  Initialising service address for VerifySolution
2017-02-13 14:33:19,538 INFO  Time before invoking service In SUPER:Mon Feb 13 14:33:19 IST 2017
2017-02-13 14:33:22,133 INFO  Time after invoking service In SUPER:Mon Feb 13 14:33:22 IST 2017
2017-02-13 14:33:22,135 INFO  Service responded successfully with required details
2017-02-13 14:33:22,137 INFO  Time after invoking service:Mon Feb 13 14:33:22 IST 2017
2017-02-13 14:33:22,138 INFO  User solution successfully verified
2017-02-13 14:33:22,139 INFO  Processing the response from verify service
2017-02-13 14:33:22,142 INFO  Starting to parse JSON response
2017-02-13 14:33:22,147 ERROR Keys used to parse test result JSON might be incorrect
2017-02-13 14:33:22,148 ERROR Keys used to parse test result JSON might be incorrect
2017-02-13 14:33:22,149 INFO  Successfully parsed JSON response
2017-02-13 14:33:22,151 INFO  In the process of generating verify response in HTML
2017-02-13 14:33:22,548 INFO  Successfully generated verify response in HTML
2017-02-13 14:33:22,549 INFO  Successfully processed the response from service
2017-02-13 14:34:08,837 INFO  Initiating to process and prepare Input for the submit service
2017-02-13 14:34:08,843 INFO  Displaying user solution
2017-02-13 14:34:08,858 INFO  Successfully processed and prepared the input for the submit service
2017-02-13 14:34:08,860 INFO  Invoking the service to submit the user solution
2017-02-13 14:34:08,861 INFO  Initialising service address for Submit
2017-02-13 14:34:08,862 INFO  Time before invoking service In SUPER:Mon Feb 13 14:34:08 IST 2017
2017-02-13 14:34:08,972 INFO  Time after invoking service In SUPER:Mon Feb 13 14:34:08 IST 2017
2017-02-13 14:34:08,974 INFO  Service responded successfully with required details
2017-02-13 14:34:08,975 INFO  User solution successfully submitted
2017-02-13 14:34:08,976 INFO  Displaying submission status
2017-02-13 14:34:08,977 INFO  Displayed submission status successfullySuccessfully Submitted!
2017-02-13 14:40:38,052 INFO  Setting request parameters for VerifySolution
2017-02-13 14:40:38,053 INFO  Initiating to process and prepare Input for the verify service
2017-02-13 14:40:38,054 INFO  Starting to parse the user solution
2017-02-13 14:40:38,056 INFO  Displaying user solution
2017-02-13 14:40:42,961 INFO  Successfully parsed the user solution{"CourseShortName":"DSA","UserSolution":"#DSA-Exer-16\r\n\r\ndef find_decreasing_start(list1,start,end):\r\n    #Remove pass and write your logic here\r\n    j = 1\r\n    for index in range(len(list1)) :\r\n        if list1[j] < list1[index] :\r\n            return j \r\n        \r\n        j += 1\r\n    \r\n\r\n#Use different values for list1 and test your program\r\nlist1=[1,4,7,8,9,5,4]\r\nstart=0\r\nend=len(list1)-1\r\nresult=find_decreasing_start(list1,start,end)\r\nprint(\"The index position at which the increasing array starts decreasing is:\",result)\r\n","asgnmtId":"16","SolutionFileName":"Exercise16.py","AsgnmtTyp":"E","TestcaseFileName":""}
2017-02-13 14:40:42,963 INFO  Successfully processed and prepared the input for the verify service
2017-02-13 14:40:42,965 INFO  Successfully set the request parameters for VerifySolution
2017-02-13 14:40:42,965 INFO  Invoking the service to verify the user solution
2017-02-13 14:40:42,966 INFO  Time before invoking service:Mon Feb 13 14:40:42 IST 2017
2017-02-13 14:40:42,967 INFO  Initialising service address for VerifySolution
2017-02-13 14:40:42,969 INFO  Time before invoking service In SUPER:Mon Feb 13 14:40:42 IST 2017
2017-02-13 14:40:44,440 INFO  Time after invoking service In SUPER:Mon Feb 13 14:40:44 IST 2017
2017-02-13 14:40:44,441 INFO  Service responded successfully with required details
2017-02-13 14:40:44,442 INFO  Time after invoking service:Mon Feb 13 14:40:44 IST 2017
2017-02-13 14:40:44,443 INFO  User solution successfully verified
2017-02-13 14:40:44,444 INFO  Processing the response from verify service
2017-02-13 14:40:44,447 INFO  Starting to parse JSON response
2017-02-13 14:40:44,449 ERROR Keys used to parse test result JSON might be incorrect
2017-02-13 14:40:44,450 ERROR Keys used to parse test result JSON might be incorrect
2017-02-13 14:40:44,451 INFO  Successfully parsed JSON response
2017-02-13 14:40:44,454 INFO  In the process of generating verify response in HTML
2017-02-13 14:40:44,534 INFO  Successfully generated verify response in HTML
2017-02-13 14:40:44,535 INFO  Successfully processed the response from service
2017-02-13 14:40:47,584 INFO  Initiating to process and prepare Input for the submit service
2017-02-13 14:40:47,586 INFO  Displaying user solution
2017-02-13 14:40:47,599 INFO  Successfully processed and prepared the input for the submit service
2017-02-13 14:40:47,600 INFO  Invoking the service to submit the user solution
2017-02-13 14:40:47,601 INFO  Initialising service address for Submit
2017-02-13 14:40:47,602 INFO  Time before invoking service In SUPER:Mon Feb 13 14:40:47 IST 2017
2017-02-13 14:40:47,681 INFO  Time after invoking service In SUPER:Mon Feb 13 14:40:47 IST 2017
2017-02-13 14:40:47,684 INFO  Service responded successfully with required details
2017-02-13 14:40:47,685 INFO  User solution successfully submitted
2017-02-13 14:40:47,686 INFO  Displaying submission status
2017-02-13 14:40:47,687 INFO  Displayed submission status successfullySuccessfully Submitted!
2017-02-13 14:41:25,099 INFO  Initiating to process and prepare Input for the submit service
2017-02-13 14:41:25,100 INFO  Displaying user solution
2017-02-13 14:41:25,102 INFO  No changes made in the assignment since the last submission
2017-02-13 14:41:25,105 ERROR Exception occured while submitting the user solution
2017-02-13 14:41:27,134 INFO  Setting request parameters for VerifySolution
2017-02-13 14:41:27,135 INFO  Initiating to process and prepare Input for the verify service
2017-02-13 14:41:27,136 INFO  Starting to parse the user solution
2017-02-13 14:41:27,136 INFO  Displaying user solution
2017-02-13 14:41:31,419 INFO  Successfully parsed the user solution{"CourseShortName":"DSA","UserSolution":"#DSA-Exer-16\r\n\r\ndef find_decreasing_start(list1,start,end):\r\n    #Remove pass and write your logic here\r\n    j = 1\r\n    for index in range(len(list1)) :\r\n        if list1[j] < list1[index] :\r\n            return j \r\n        j += 1\r\n    \r\n#Use different values for list1 and test your program\r\nlist1=[1,4,7,8,9,5,4]\r\nstart=0\r\nend=len(list1)-1\r\nresult=find_decreasing_start(list1,start,end)\r\nprint(\"The index position at which the increasing array starts decreasing is:\",result)\r\n","asgnmtId":"16","SolutionFileName":"Exercise16.py","AsgnmtTyp":"E","TestcaseFileName":""}
2017-02-13 14:41:31,420 INFO  Successfully processed and prepared the input for the verify service
2017-02-13 14:41:31,421 INFO  Successfully set the request parameters for VerifySolution
2017-02-13 14:41:31,422 INFO  Invoking the service to verify the user solution
2017-02-13 14:41:31,424 INFO  Time before invoking service:Mon Feb 13 14:41:31 IST 2017
2017-02-13 14:41:31,424 INFO  Initialising service address for VerifySolution
2017-02-13 14:41:31,426 INFO  Time before invoking service In SUPER:Mon Feb 13 14:41:31 IST 2017
2017-02-13 14:41:32,775 INFO  Time after invoking service In SUPER:Mon Feb 13 14:41:32 IST 2017
2017-02-13 14:41:32,776 INFO  Service responded successfully with required details
2017-02-13 14:41:32,780 INFO  Time after invoking service:Mon Feb 13 14:41:32 IST 2017
2017-02-13 14:41:32,782 INFO  User solution successfully verified
2017-02-13 14:41:32,783 INFO  Processing the response from verify service
2017-02-13 14:41:32,785 INFO  Starting to parse JSON response
2017-02-13 14:41:32,787 ERROR Keys used to parse test result JSON might be incorrect
2017-02-13 14:41:32,788 ERROR Keys used to parse test result JSON might be incorrect
2017-02-13 14:41:32,790 INFO  Successfully parsed JSON response
2017-02-13 14:41:32,790 INFO  In the process of generating verify response in HTML
2017-02-13 14:41:32,900 INFO  Successfully generated verify response in HTML
2017-02-13 14:41:32,902 INFO  Successfully processed the response from service
2017-02-13 14:41:41,054 INFO  Initiating to process and prepare Input for the submit service
2017-02-13 14:41:41,074 INFO  Displaying user solution
2017-02-13 14:41:41,140 INFO  Successfully processed and prepared the input for the submit service
2017-02-13 14:41:41,144 INFO  Invoking the service to submit the user solution
2017-02-13 14:41:41,149 INFO  Initialising service address for Submit
2017-02-13 14:41:41,151 INFO  Time before invoking service In SUPER:Mon Feb 13 14:41:41 IST 2017
2017-02-13 14:41:41,389 INFO  Time after invoking service In SUPER:Mon Feb 13 14:41:41 IST 2017
2017-02-13 14:41:41,398 INFO  Service responded successfully with required details
2017-02-13 14:41:41,400 INFO  User solution successfully submitted
2017-02-13 14:41:41,402 INFO  Displaying submission status
2017-02-13 14:41:41,416 INFO  Displayed submission status successfullySuccessfully Submitted!
2017-02-13 14:55:14,835 INFO  Setting request parameters for VerifySolution
2017-02-13 14:55:14,837 INFO  Initiating to process and prepare Input for the verify service
2017-02-13 14:55:14,838 INFO  Starting to parse the user solution
2017-02-13 14:55:14,839 INFO  Displaying user solution
2017-02-13 14:55:19,601 INFO  Successfully parsed the user solution{"CourseShortName":"DSA","UserSolution":"#DSA-Assgn-16\r\n\r\n#This assignment needs DataStructures.py file in your package, you can get it    from resources page\r\n\r\nfrom DataStructures import Stack,Queue\r\n\r\ndef separate_boxes(box_stack):\r\n    length = box_stack.get_max_size()\r\n    temp_stack = Stack(length)\r\n    temp_stack2 = Stack(length)\r\n    que = Queue(length)\r\n    while not box_stack.is_empty() :\r\n        temp_box = box_stack.pop()\r\n        #temp_stack2.push(temp_box)\r\n        if temp_box != [\"Red\" , \"Green\" , \"Blue\"] :\r\n            que.enqueue(temp_box)\r\n        else :\r\n            temp_stack.push(temp_box)\r\n            \r\n            \r\n    \r\n    while not temp_stack.is_empty() :\r\n        temp_box = temp_stack.pop()\r\n        box_stack.push(temp_box)\r\n        \r\n    \r\n    return que\r\n        \r\n        \r\n        \r\n    \r\n    \r\n    \r\n    \r\n    \r\n\r\n#Use different values for stack and test your program\r\nbox_stack=Stack(8)\r\nbox_stack.push(\"Red\")\r\nbox_stack.push(\"Magenta\")\r\nbox_stack.push(\"Yellow\")\r\nbox_stack.push(\"Red\")\r\nbox_stack.push(\"Orange\")\r\nbox_stack.push(\"Green\")\r\nbox_stack.push(\"White\")\r\nbox_stack.push(\"Purple\")\r\nprint(\"Boxes in the stack:\")\r\nbox_stack.display()\r\nresult=separate_boxes(box_stack)\r\nprint()\r\nprint(\"Boxes in the stack after modification:\")\r\nbox_stack.display()\r\nprint(\"Boxes in the queue:\")\r\nresult.display()\r\n","asgnmtId":"16","SolutionFileName":"Assignment16.py","AsgnmtTyp":"A","TestcaseFileName":""}
2017-02-13 14:55:19,606 INFO  Successfully processed and prepared the input for the verify service
2017-02-13 14:55:19,607 INFO  Successfully set the request parameters for VerifySolution
2017-02-13 14:55:19,607 INFO  Invoking the service to verify the user solution
2017-02-13 14:55:19,608 INFO  Time before invoking service:Mon Feb 13 14:55:19 IST 2017
2017-02-13 14:55:19,609 INFO  Initialising service address for VerifySolution
2017-02-13 14:55:19,610 INFO  Time before invoking service In SUPER:Mon Feb 13 14:55:19 IST 2017
2017-02-13 14:55:21,153 INFO  Time after invoking service In SUPER:Mon Feb 13 14:55:21 IST 2017
2017-02-13 14:55:21,154 INFO  Service responded successfully with required details
2017-02-13 14:55:21,155 INFO  Time after invoking service:Mon Feb 13 14:55:21 IST 2017
2017-02-13 14:55:21,156 INFO  User solution successfully verified
2017-02-13 14:55:21,157 INFO  Processing the response from verify service
2017-02-13 14:55:21,159 INFO  Starting to parse JSON response
2017-02-13 14:55:21,161 ERROR Keys used to parse test result JSON might be incorrect
2017-02-13 14:55:21,162 ERROR Keys used to parse test result JSON might be incorrect
2017-02-13 14:55:21,162 ERROR Keys used to parse test result JSON might be incorrect
2017-02-13 14:55:21,163 ERROR Keys used to parse test result JSON might be incorrect
2017-02-13 14:55:21,164 INFO  Successfully parsed JSON response
2017-02-13 14:55:21,166 INFO  In the process of generating verify response in HTML
2017-02-13 14:55:21,244 INFO  Successfully generated verify response in HTML
2017-02-13 14:55:21,245 INFO  Successfully processed the response from service
2017-02-13 15:00:09,556 INFO  Setting request parameters for VerifySolution
2017-02-13 15:00:09,557 INFO  Initiating to process and prepare Input for the verify service
2017-02-13 15:00:09,558 INFO  Starting to parse the user solution
2017-02-13 15:00:09,559 INFO  Displaying user solution
2017-02-13 15:00:15,160 INFO  Successfully parsed the user solution{"CourseShortName":"DSA","UserSolution":"#DSA-Assgn-16\r\n\r\n#This assignment needs DataStructures.py file in your package, you can get it    from resources page\r\n\r\nfrom DataStructures import Stack,Queue\r\n\r\ndef separate_boxes(box_stack):\r\n    length = box_stack.get_max_size()\r\n    temp_stack = Stack(length)\r\n    temp_stack2 = Stack(length)\r\n    que = Queue(length)\r\n    while not box_stack.is_empty() :\r\n        temp_box = box_stack.pop()\r\n        #temp_stack2.push(temp_box)\r\n        if temp_box == \"Red\" or temp_box == \"Green\" or temp_box == \"Blue\" :\r\n            #print(\"Hello\")\r\n            temp_stack.push(temp_box)\r\n        else :\r\n            #print(\"Yellow\")\r\n            que.enqueue(temp_box)\r\n            \r\n            \r\n            \r\n    \r\n    while not temp_stack.is_empty() :\r\n        temp_box = temp_stack.pop()\r\n        box_stack.push(temp_box)\r\n        \r\n    \r\n    return que\r\n        \r\n        \r\n        \r\n    \r\n    \r\n    \r\n    \r\n    \r\n\r\n#Use different values for stack and test your program\r\nbox_stack=Stack(8)\r\nbox_stack.push(\"Red\")\r\nbox_stack.push(\"Magenta\")\r\nbox_stack.push(\"Yellow\")\r\nbox_stack.push(\"Red\")\r\nbox_stack.push(\"Orange\")\r\nbox_stack.push(\"Green\")\r\nbox_stack.push(\"White\")\r\nbox_stack.push(\"Purple\")\r\nprint(\"Boxes in the stack:\")\r\nbox_stack.display()\r\nresult=separate_boxes(box_stack)\r\nprint()\r\nprint(\"Boxes in the stack after modification:\")\r\nbox_stack.display()\r\nprint(\"Boxes in the queue:\")\r\nresult.display()\r\n","asgnmtId":"16","SolutionFileName":"Assignment16.py","AsgnmtTyp":"A","TestcaseFileName":""}
2017-02-13 15:00:15,162 INFO  Successfully processed and prepared the input for the verify service
2017-02-13 15:00:15,164 INFO  Successfully set the request parameters for VerifySolution
2017-02-13 15:00:15,166 INFO  Invoking the service to verify the user solution
2017-02-13 15:00:15,168 INFO  Time before invoking service:Mon Feb 13 15:00:15 IST 2017
2017-02-13 15:00:15,170 INFO  Initialising service address for VerifySolution
2017-02-13 15:00:15,171 INFO  Time before invoking service In SUPER:Mon Feb 13 15:00:15 IST 2017
2017-02-13 15:00:16,597 INFO  Time after invoking service In SUPER:Mon Feb 13 15:00:16 IST 2017
2017-02-13 15:00:16,599 INFO  Service responded successfully with required details
2017-02-13 15:00:16,600 INFO  Time after invoking service:Mon Feb 13 15:00:16 IST 2017
2017-02-13 15:00:16,602 INFO  User solution successfully verified
2017-02-13 15:00:16,603 INFO  Processing the response from verify service
2017-02-13 15:00:16,607 INFO  Starting to parse JSON response
2017-02-13 15:00:16,610 ERROR Keys used to parse test result JSON might be incorrect
2017-02-13 15:00:16,611 ERROR Keys used to parse test result JSON might be incorrect
2017-02-13 15:00:16,612 ERROR Keys used to parse test result JSON might be incorrect
2017-02-13 15:00:16,613 ERROR Keys used to parse test result JSON might be incorrect
2017-02-13 15:00:16,614 INFO  Successfully parsed JSON response
2017-02-13 15:00:16,617 INFO  In the process of generating verify response in HTML
2017-02-13 15:00:16,716 INFO  Successfully generated verify response in HTML
2017-02-13 15:00:16,718 INFO  Successfully processed the response from service
2017-02-13 15:00:21,411 INFO  Setting request parameters for VerifySolution
2017-02-13 15:00:21,413 INFO  Initiating to process and prepare Input for the verify service
2017-02-13 15:00:21,414 INFO  Starting to parse the user solution
2017-02-13 15:00:21,414 INFO  Displaying user solution
2017-02-13 15:00:21,419 INFO   User Solution is unchanged since the last verification.
2017-02-13 15:00:21,426 INFO  Problem in processing and preparing Input for the verify service
2017-02-13 15:00:23,266 INFO  Initiating to process and prepare Input for the submit service
2017-02-13 15:00:23,268 INFO  Displaying user solution
2017-02-13 15:00:23,279 INFO  Successfully processed and prepared the input for the submit service
2017-02-13 15:00:23,280 INFO  Invoking the service to submit the user solution
2017-02-13 15:00:23,282 INFO  Initialising service address for Submit
2017-02-13 15:00:23,283 INFO  Time before invoking service In SUPER:Mon Feb 13 15:00:23 IST 2017
2017-02-13 15:00:23,405 INFO  Time after invoking service In SUPER:Mon Feb 13 15:00:23 IST 2017
2017-02-13 15:00:23,406 INFO  Service responded successfully with required details
2017-02-13 15:00:23,407 INFO  User solution successfully submitted
2017-02-13 15:00:23,412 INFO  Displaying submission status
2017-02-13 15:00:23,413 INFO  Displayed submission status successfullySuccessfully Submitted!
2017-02-13 15:00:55,621 INFO  Setting request parameters for VerifySolution
2017-02-13 15:00:55,624 INFO  Initiating to process and prepare Input for the verify service
2017-02-13 15:00:55,625 INFO  Starting to parse the user solution
2017-02-13 15:00:55,629 INFO  Displaying user solution
2017-02-13 15:01:02,197 INFO  Successfully parsed the user solution{"CourseShortName":"DSA","UserSolution":"#DSA-Assgn-16\r\n\r\n#This assignment needs DataStructures.py file in your package, you can get it    from resources page\r\n\r\nfrom DataStructures import Stack,Queue\r\n\r\ndef separate_boxes(box_stack):\r\n    length = box_stack.get_max_size()\r\n    temp_stack = Stack(length)\r\n    que = Queue(length)\r\n    while not box_stack.is_empty() :\r\n        temp_box = box_stack.pop()\r\n        \r\n        if temp_box == \"Red\" or temp_box == \"Green\" or temp_box == \"Blue\" :\r\n            temp_stack.push(temp_box)\r\n        else :\r\n            que.enqueue(temp_box)\r\n\r\n    while not temp_stack.is_empty() :\r\n        temp_box = temp_stack.pop()\r\n        box_stack.push(temp_box)\r\n        \r\n    \r\n    return que\r\n        \r\n#Use different values for stack and test your program\r\nbox_stack=Stack(8)\r\nbox_stack.push(\"Red\")\r\nbox_stack.push(\"Magenta\")\r\nbox_stack.push(\"Yellow\")\r\nbox_stack.push(\"Red\")\r\nbox_stack.push(\"Orange\")\r\nbox_stack.push(\"Green\")\r\nbox_stack.push(\"White\")\r\nbox_stack.push(\"Purple\")\r\nprint(\"Boxes in the stack:\")\r\nbox_stack.display()\r\nresult=separate_boxes(box_stack)\r\nprint()\r\nprint(\"Boxes in the stack after modification:\")\r\nbox_stack.display()\r\nprint(\"Boxes in the queue:\")\r\nresult.display()\r\n","asgnmtId":"16","SolutionFileName":"Assignment16.py","AsgnmtTyp":"A","TestcaseFileName":""}
2017-02-13 15:01:02,199 INFO  Successfully processed and prepared the input for the verify service
2017-02-13 15:01:02,200 INFO  Successfully set the request parameters for VerifySolution
2017-02-13 15:01:02,201 INFO  Invoking the service to verify the user solution
2017-02-13 15:01:02,203 INFO  Time before invoking service:Mon Feb 13 15:01:02 IST 2017
2017-02-13 15:01:02,204 INFO  Initialising service address for VerifySolution
2017-02-13 15:01:02,205 INFO  Time before invoking service In SUPER:Mon Feb 13 15:01:02 IST 2017
2017-02-13 15:01:06,679 INFO  Time after invoking service In SUPER:Mon Feb 13 15:01:06 IST 2017
2017-02-13 15:01:06,694 INFO  Service responded successfully with required details
2017-02-13 15:01:06,700 INFO  Time after invoking service:Mon Feb 13 15:01:06 IST 2017
2017-02-13 15:01:06,709 INFO  User solution successfully verified
2017-02-13 15:01:06,716 INFO  Processing the response from verify service
2017-02-13 15:01:06,720 INFO  Starting to parse JSON response
2017-02-13 15:01:06,723 ERROR Keys used to parse test result JSON might be incorrect
2017-02-13 15:01:06,725 ERROR Keys used to parse test result JSON might be incorrect
2017-02-13 15:01:06,727 ERROR Keys used to parse test result JSON might be incorrect
2017-02-13 15:01:06,730 ERROR Keys used to parse test result JSON might be incorrect
2017-02-13 15:01:06,733 INFO  Successfully parsed JSON response
2017-02-13 15:01:06,738 INFO  In the process of generating verify response in HTML
2017-02-13 15:01:06,833 INFO  Successfully generated verify response in HTML
2017-02-13 15:01:06,835 INFO  Successfully processed the response from service
2017-02-13 15:29:56,506 INFO  Setting request parameters for VerifySolution
2017-02-13 15:29:56,517 INFO  Initiating to process and prepare Input for the verify service
2017-02-13 15:29:56,518 INFO  Starting to parse the user solution
2017-02-13 15:29:56,520 INFO  Displaying user solution
2017-02-13 15:30:04,035 INFO  Successfully parsed the user solution{"CourseShortName":"DSA","UserSolution":"#DSA-Assgn-18\r\n\r\ndef find_unknown_words(text,vocabulary):\r\n    list_text = text.split()\r\n    unknown_words = []\r\n    unknown_set = {}\r\n    \r\n    \r\n    for value in list_text :\r\n        is_value_present = False\r\n        \r\n        for voc in vocabulary :\r\n            if \".\" in value :\r\n                #print(\"Periods\")\r\n                value_period = value.replace(\".\" , \"\")\r\n                if value_period == voc :\r\n                    is_value_present = True\r\n            else :\r\n                #print(\"yel\")\r\n                \r\n                if value == voc :\r\n                    is_value_present = True\r\n                    \r\n        if not is_value_present :\r\n            unknown_words.append(value)\r\n            \r\n    \r\n    \r\n    unknown_set = set(unknown_words)\r\n        \r\n    return unknown_set\r\n    \r\n    \r\n    \r\n#Pass different values of text and vocabulary to the function and test your program\r\ntext=\"The sun rises in the east and sets in the west.\"\r\nvocabulary = [\"sun\",\"in\",\"rises\",\"the\",\"east\"]\r\nunknown_words=find_unknown_words(text,vocabulary)\r\nprint(\"The unknown words in the file are:\",unknown_words)\r\n","asgnmtId":"18","SolutionFileName":"Assignment18.py","AsgnmtTyp":"A","TestcaseFileName":""}
2017-02-13 15:30:04,037 INFO  Successfully processed and prepared the input for the verify service
2017-02-13 15:30:04,038 INFO  Successfully set the request parameters for VerifySolution
2017-02-13 15:30:04,039 INFO  Invoking the service to verify the user solution
2017-02-13 15:30:04,041 INFO  Time before invoking service:Mon Feb 13 15:30:04 IST 2017
2017-02-13 15:30:04,041 INFO  Initialising service address for VerifySolution
2017-02-13 15:30:04,043 INFO  Time before invoking service In SUPER:Mon Feb 13 15:30:04 IST 2017
2017-02-13 15:30:05,362 INFO  Time after invoking service In SUPER:Mon Feb 13 15:30:05 IST 2017
2017-02-13 15:30:05,363 INFO  Service responded successfully with required details
2017-02-13 15:30:05,366 INFO  Time after invoking service:Mon Feb 13 15:30:05 IST 2017
2017-02-13 15:30:05,367 INFO  User solution successfully verified
2017-02-13 15:30:05,368 INFO  Processing the response from verify service
2017-02-13 15:30:05,372 INFO  Starting to parse JSON response
2017-02-13 15:30:05,375 ERROR Keys used to parse test result JSON might be incorrect
2017-02-13 15:30:05,376 ERROR Keys used to parse test result JSON might be incorrect
2017-02-13 15:30:05,378 INFO  Successfully parsed JSON response
2017-02-13 15:30:05,380 INFO  In the process of generating verify response in HTML
2017-02-13 15:30:05,480 INFO  Successfully generated verify response in HTML
2017-02-13 15:30:05,481 INFO  Successfully processed the response from service
2017-02-13 15:31:11,486 INFO  Setting request parameters for VerifySolution
2017-02-13 15:31:11,491 INFO  Initiating to process and prepare Input for the verify service
2017-02-13 15:31:11,492 INFO  Starting to parse the user solution
2017-02-13 15:31:11,494 INFO  Displaying user solution
2017-02-13 15:31:16,923 INFO  Successfully parsed the user solution{"CourseShortName":"DSA","UserSolution":"#DSA-Assgn-18\r\n\r\ndef find_unknown_words(text,vocabulary):\r\n    list_text = text.split()\r\n    unknown_words = []\r\n    unknown_set = {}\r\n    \r\n    \r\n    for value in list_text :\r\n        is_value_present = False\r\n        \r\n        for voc in vocabulary :\r\n            if \".\" in value :\r\n                #print(\"Periods\")\r\n                value_period = value.replace(\".\" , \"\")\r\n                if value_period == voc :\r\n                    is_value_present = True\r\n            else :\r\n                #print(\"yel\")\r\n                \r\n                if value == voc :\r\n                    is_value_present = True\r\n                    \r\n        if not is_value_present :\r\n            unknown_words.append(value)\r\n        else :\r\n            return -1\r\n    \r\n    \r\n    unknown_set = set(unknown_words)\r\n        \r\n    return unknown_set\r\n    \r\n    \r\n    \r\n#Pass different values of text and vocabulary to the function and test your program\r\ntext=\"The sun rises in the east and sets in the west.\"\r\nvocabulary = [\"sun\",\"in\",\"rises\",\"the\",\"east\"]\r\nunknown_words=find_unknown_words(text,vocabulary)\r\nprint(\"The unknown words in the file are:\",unknown_words)\r\n","asgnmtId":"18","SolutionFileName":"Assignment18.py","AsgnmtTyp":"A","TestcaseFileName":""}
2017-02-13 15:31:16,925 INFO  Successfully processed and prepared the input for the verify service
2017-02-13 15:31:16,926 INFO  Successfully set the request parameters for VerifySolution
2017-02-13 15:31:16,926 INFO  Invoking the service to verify the user solution
2017-02-13 15:31:16,928 INFO  Time before invoking service:Mon Feb 13 15:31:16 IST 2017
2017-02-13 15:31:16,929 INFO  Initialising service address for VerifySolution
2017-02-13 15:31:16,930 INFO  Time before invoking service In SUPER:Mon Feb 13 15:31:16 IST 2017
2017-02-13 15:31:18,377 INFO  Time after invoking service In SUPER:Mon Feb 13 15:31:18 IST 2017
2017-02-13 15:31:18,378 INFO  Service responded successfully with required details
2017-02-13 15:31:18,379 INFO  Time after invoking service:Mon Feb 13 15:31:18 IST 2017
2017-02-13 15:31:18,380 INFO  User solution successfully verified
2017-02-13 15:31:18,382 INFO  Processing the response from verify service
2017-02-13 15:31:18,384 INFO  Starting to parse JSON response
2017-02-13 15:31:18,385 ERROR Keys used to parse test result JSON might be incorrect
2017-02-13 15:31:18,386 ERROR Keys used to parse test result JSON might be incorrect
2017-02-13 15:31:18,387 INFO  Successfully parsed JSON response
2017-02-13 15:31:18,389 INFO  In the process of generating verify response in HTML
2017-02-13 15:31:18,480 INFO  Successfully generated verify response in HTML
2017-02-13 15:31:18,481 INFO  Successfully processed the response from service
2017-02-13 15:32:59,892 INFO  Setting request parameters for VerifySolution
2017-02-13 15:32:59,894 INFO  Initiating to process and prepare Input for the verify service
2017-02-13 15:32:59,895 INFO  Starting to parse the user solution
2017-02-13 15:32:59,897 INFO  Displaying user solution
2017-02-13 15:33:05,933 INFO  Successfully parsed the user solution{"CourseShortName":"DSA","UserSolution":"#DSA-Assgn-18\r\n\r\ndef find_unknown_words(text,vocabulary):\r\n    list_text = text.split()\r\n    unknown_words = []\r\n    unknown_set = {}\r\n    \r\n    \r\n    for value in list_text :\r\n        is_value_present = False\r\n        \r\n        for voc in vocabulary :\r\n            if \".\" in value :\r\n                #print(\"Periods\")\r\n                value_period = value.replace(\".\" , \"\")\r\n                if value_period == voc :\r\n                    is_value_present = True\r\n            else :\r\n                #print(\"yel\")\r\n                \r\n                if value == voc :\r\n                    is_value_present = True\r\n                    \r\n        if not is_value_present :\r\n            unknown_words.append(value)\r\n        \r\n    \r\n    if len(unknown_words) == 0 :\r\n        return -1\r\n    \r\n    unknown_set = set(unknown_words)\r\n        \r\n    return unknown_set\r\n    \r\n    \r\n    \r\n#Pass different values of text and vocabulary to the function and test your program\r\ntext=\"The sun rises in the east and sets in the west.\"\r\nvocabulary = [\"sun\",\"in\",\"rises\",\"the\",\"east\"]\r\nunknown_words=find_unknown_words(text,vocabulary)\r\nprint(\"The unknown words in the file are:\",unknown_words)\r\n","asgnmtId":"18","SolutionFileName":"Assignment18.py","AsgnmtTyp":"A","TestcaseFileName":""}
2017-02-13 15:33:05,935 INFO  Successfully processed and prepared the input for the verify service
2017-02-13 15:33:05,936 INFO  Successfully set the request parameters for VerifySolution
2017-02-13 15:33:05,937 INFO  Invoking the service to verify the user solution
2017-02-13 15:33:05,938 INFO  Time before invoking service:Mon Feb 13 15:33:05 IST 2017
2017-02-13 15:33:05,940 INFO  Initialising service address for VerifySolution
2017-02-13 15:33:05,942 INFO  Time before invoking service In SUPER:Mon Feb 13 15:33:05 IST 2017
2017-02-13 15:33:07,576 INFO  Time after invoking service In SUPER:Mon Feb 13 15:33:07 IST 2017
2017-02-13 15:33:07,578 INFO  Service responded successfully with required details
2017-02-13 15:33:07,579 INFO  Time after invoking service:Mon Feb 13 15:33:07 IST 2017
2017-02-13 15:33:07,580 INFO  User solution successfully verified
2017-02-13 15:33:07,581 INFO  Processing the response from verify service
2017-02-13 15:33:07,583 INFO  Starting to parse JSON response
2017-02-13 15:33:07,585 ERROR Keys used to parse test result JSON might be incorrect
2017-02-13 15:33:07,586 ERROR Keys used to parse test result JSON might be incorrect
2017-02-13 15:33:07,587 INFO  Successfully parsed JSON response
2017-02-13 15:33:07,589 INFO  In the process of generating verify response in HTML
2017-02-13 15:33:07,661 INFO  Successfully generated verify response in HTML
2017-02-13 15:33:07,662 INFO  Successfully processed the response from service
2017-02-13 15:33:16,056 INFO  Initiating to process and prepare Input for the submit service
2017-02-13 15:33:16,059 INFO  Displaying user solution
2017-02-13 15:33:16,071 INFO  Successfully processed and prepared the input for the submit service
2017-02-13 15:33:16,073 INFO  Invoking the service to submit the user solution
2017-02-13 15:33:16,076 INFO  Initialising service address for Submit
2017-02-13 15:33:16,077 INFO  Time before invoking service In SUPER:Mon Feb 13 15:33:16 IST 2017
2017-02-13 15:33:16,541 INFO  Time after invoking service In SUPER:Mon Feb 13 15:33:16 IST 2017
2017-02-13 15:33:16,543 INFO  Service responded successfully with required details
2017-02-13 15:33:16,544 INFO  User solution successfully submitted
2017-02-13 15:33:16,546 INFO  Displaying submission status
2017-02-13 15:33:16,547 INFO  Displayed submission status successfullySuccessfully Submitted!
2017-02-13 15:36:34,919 INFO  Setting request parameters for VerifySolution
2017-02-13 15:36:34,923 INFO  Initiating to process and prepare Input for the verify service
2017-02-13 15:36:34,925 INFO  Starting to parse the user solution
2017-02-13 15:36:34,927 INFO  Displaying user solution
2017-02-13 15:36:42,913 INFO  Successfully parsed the user solution{"CourseShortName":"DSA","UserSolution":"#DSA-Assgn-18\r\n\r\ndef find_unknown_words(text,vocabulary):\r\n    list_text = text.split()\r\n    unknown_words = []\r\n    unknown_set = {}\r\n    \r\n    \r\n    for value in list_text :\r\n        is_value_present = False\r\n        value_period = \"\"\r\n        if \".\" in value :\r\n            #print(\"Periods\")\r\n            value_period = value.replace(\".\" , \"\")\r\n        for voc in vocabulary :\r\n            if value == voc or value_period == voc :\r\n                    is_value_present = True\r\n                    \r\n        if not is_value_present :\r\n            unknown_words.append(value)\r\n        \r\n    \r\n    if len(unknown_words) == 0 :\r\n        return -1\r\n    \r\n    unknown_set = set(unknown_words)\r\n        \r\n    return unknown_set\r\n    \r\n    \r\n    \r\n#Pass different values of text and vocabulary to the function and test your program\r\ntext=\"The sun rises in the east and sets in the west.\"\r\nvocabulary = [\"sun\",\"in\",\"rises\",\"the\",\"east\"]\r\nunknown_words=find_unknown_words(text,vocabulary)\r\nprint(\"The unknown words in the file are:\",unknown_words)\r\n","asgnmtId":"18","SolutionFileName":"Assignment18.py","AsgnmtTyp":"A","TestcaseFileName":""}
2017-02-13 15:36:42,918 INFO  Successfully processed and prepared the input for the verify service
2017-02-13 15:36:42,922 INFO  Successfully set the request parameters for VerifySolution
2017-02-13 15:36:42,924 INFO  Invoking the service to verify the user solution
2017-02-13 15:36:42,929 INFO  Time before invoking service:Mon Feb 13 15:36:42 IST 2017
2017-02-13 15:36:42,931 INFO  Initialising service address for VerifySolution
2017-02-13 15:36:42,933 INFO  Time before invoking service In SUPER:Mon Feb 13 15:36:42 IST 2017
2017-02-13 15:36:44,278 INFO  Time after invoking service In SUPER:Mon Feb 13 15:36:44 IST 2017
2017-02-13 15:36:44,279 INFO  Service responded successfully with required details
2017-02-13 15:36:44,281 INFO  Time after invoking service:Mon Feb 13 15:36:44 IST 2017
2017-02-13 15:36:44,282 INFO  User solution successfully verified
2017-02-13 15:36:44,283 INFO  Processing the response from verify service
2017-02-13 15:36:44,286 INFO  Starting to parse JSON response
2017-02-13 15:36:44,287 ERROR Keys used to parse test result JSON might be incorrect
2017-02-13 15:36:44,288 ERROR Keys used to parse test result JSON might be incorrect
2017-02-13 15:36:44,289 INFO  Successfully parsed JSON response
2017-02-13 15:36:44,291 INFO  In the process of generating verify response in HTML
2017-02-13 15:36:44,371 INFO  Successfully generated verify response in HTML
2017-02-13 15:36:44,373 INFO  Successfully processed the response from service
2017-02-13 15:50:49,340 INFO  Setting request parameters for VerifySolution
2017-02-13 15:50:49,341 INFO  Initiating to process and prepare Input for the verify service
2017-02-13 15:50:49,343 INFO  Starting to parse the user solution
2017-02-13 15:50:49,345 INFO  Displaying user solution
2017-02-13 15:50:54,100 INFO  Successfully parsed the user solution{"CourseShortName":"DSA","UserSolution":"#DSA-Assgn-19\r\n\r\ndef last_instance( num_list,  start,  end,  key):\r\n    \r\n    for index in range(start , end) :\r\n        if num_list[index] == key :\r\n            last_index = index\r\n\r\n    if last_index == 0 :\r\n        return -1\r\n    \r\n    result = last_index\r\n    return result \r\n\r\n    \r\n    \r\n    \r\n   \r\n\r\nnum_list=[1,1,2,2,3,4,5,5,5,5]\r\nstart=0\r\nend=len(num_list)-1\r\nkey=5 #Number to be searched\r\n#Pass different values for num_list, start,end and key and test your program\r\nresult=last_instance(num_list, start,end,key)\r\n\r\nif(result!=-1):\r\n    print(\"The index position of the last occurrence of the number:\",result)\r\nelse:\r\n    print(\"Number not found\")\r\n","asgnmtId":"19","SolutionFileName":"Assignment18.py","AsgnmtTyp":"A","TestcaseFileName":""}
2017-02-13 15:50:54,101 INFO  Successfully processed and prepared the input for the verify service
2017-02-13 15:50:54,103 INFO  Successfully set the request parameters for VerifySolution
2017-02-13 15:50:54,104 INFO  Invoking the service to verify the user solution
2017-02-13 15:50:54,105 INFO  Time before invoking service:Mon Feb 13 15:50:54 IST 2017
2017-02-13 15:50:54,106 INFO  Initialising service address for VerifySolution
2017-02-13 15:50:54,107 INFO  Time before invoking service In SUPER:Mon Feb 13 15:50:54 IST 2017
2017-02-13 15:50:55,580 INFO  Time after invoking service In SUPER:Mon Feb 13 15:50:55 IST 2017
2017-02-13 15:50:55,581 INFO  Service responded successfully with required details
2017-02-13 15:50:55,582 INFO  Time after invoking service:Mon Feb 13 15:50:55 IST 2017
2017-02-13 15:50:55,583 INFO  User solution successfully verified
2017-02-13 15:50:55,583 INFO  Processing the response from verify service
2017-02-13 15:50:55,586 INFO  Starting to parse JSON response
2017-02-13 15:50:55,587 ERROR Keys used to parse test result JSON might be incorrect
2017-02-13 15:50:55,590 ERROR Keys used to parse test result JSON might be incorrect
2017-02-13 15:50:55,592 INFO  Successfully parsed JSON response
2017-02-13 15:50:55,594 INFO  In the process of generating verify response in HTML
2017-02-13 15:50:55,681 INFO  Successfully generated verify response in HTML
2017-02-13 15:50:55,683 INFO  Successfully processed the response from service
2017-02-13 15:52:00,876 INFO  Setting request parameters for VerifySolution
2017-02-13 15:52:00,878 INFO  Initiating to process and prepare Input for the verify service
2017-02-13 15:52:00,881 INFO  Starting to parse the user solution
2017-02-13 15:52:00,883 INFO  Displaying user solution
2017-02-13 15:52:08,671 INFO  Successfully parsed the user solution{"CourseShortName":"DSA","UserSolution":"#DSA-Assgn-19\r\n\r\ndef last_instance( num_list,  start,  end,  key):\r\n    \r\n    for index in range(start , end+1) :\r\n        if num_list[index] == key :\r\n            last_index = index\r\n\r\n    if last_index == 0 :\r\n        return -1\r\n    \r\n    result = last_index\r\n    return result \r\n\r\n    \r\n    \r\n    \r\n   \r\n\r\nnum_list=[1,1,2,2,3,4,5,5,5,5]\r\nstart=0\r\nend=len(num_list)-1\r\nkey=5 #Number to be searched\r\n#Pass different values for num_list, start,end and key and test your program\r\nresult=last_instance(num_list, start,end,key)\r\n\r\nif(result!=-1):\r\n    print(\"The index position of the last occurrence of the number:\",result)\r\nelse:\r\n    print(\"Number not found\")\r\n","asgnmtId":"19","SolutionFileName":"Assignment18.py","AsgnmtTyp":"A","TestcaseFileName":""}
2017-02-13 15:52:08,672 INFO  Successfully processed and prepared the input for the verify service
2017-02-13 15:52:08,675 INFO  Successfully set the request parameters for VerifySolution
2017-02-13 15:52:08,677 INFO  Invoking the service to verify the user solution
2017-02-13 15:52:08,678 INFO  Time before invoking service:Mon Feb 13 15:52:08 IST 2017
2017-02-13 15:52:08,679 INFO  Initialising service address for VerifySolution
2017-02-13 15:52:08,681 INFO  Time before invoking service In SUPER:Mon Feb 13 15:52:08 IST 2017
2017-02-13 15:52:10,135 INFO  Time after invoking service In SUPER:Mon Feb 13 15:52:10 IST 2017
2017-02-13 15:52:10,136 INFO  Service responded successfully with required details
2017-02-13 15:52:10,138 INFO  Time after invoking service:Mon Feb 13 15:52:10 IST 2017
2017-02-13 15:52:10,139 INFO  User solution successfully verified
2017-02-13 15:52:10,140 INFO  Processing the response from verify service
2017-02-13 15:52:10,142 INFO  Starting to parse JSON response
2017-02-13 15:52:10,144 ERROR Keys used to parse test result JSON might be incorrect
2017-02-13 15:52:10,146 ERROR Keys used to parse test result JSON might be incorrect
2017-02-13 15:52:10,147 INFO  Successfully parsed JSON response
2017-02-13 15:52:10,150 INFO  In the process of generating verify response in HTML
2017-02-13 15:52:10,254 INFO  Successfully generated verify response in HTML
2017-02-13 15:52:10,255 INFO  Successfully processed the response from service
2017-02-13 15:53:15,443 INFO  Setting request parameters for VerifySolution
2017-02-13 15:53:15,444 INFO  Initiating to process and prepare Input for the verify service
2017-02-13 15:53:15,447 INFO  Starting to parse the user solution
2017-02-13 15:53:15,449 INFO  Displaying user solution
2017-02-13 15:53:20,736 INFO  Successfully parsed the user solution{"CourseShortName":"DSA","UserSolution":"#DSA-Assgn-19\r\n\r\ndef last_instance( num_list,  start,  end,  key):\r\n    last_index = None\r\n    for index in range(start , end+1) :\r\n        if num_list[index] == key :\r\n            last_index = index\r\n\r\n    if last_index == None :\r\n        return -1\r\n    \r\n    result = last_index\r\n    return result \r\n\r\n    \r\n    \r\n    \r\n   \r\n\r\nnum_list=[1,1,2,2,3,4,5,5,5,5]\r\nstart=0\r\nend=len(num_list)-1\r\nkey=5 #Number to be searched\r\n#Pass different values for num_list, start,end and key and test your program\r\nresult=last_instance(num_list, start,end,key)\r\n\r\nif(result!=-1):\r\n    print(\"The index position of the last occurrence of the number:\",result)\r\nelse:\r\n    print(\"Number not found\")\r\n","asgnmtId":"19","SolutionFileName":"Assignment18.py","AsgnmtTyp":"A","TestcaseFileName":""}
2017-02-13 15:53:20,738 INFO  Successfully processed and prepared the input for the verify service
2017-02-13 15:53:20,739 INFO  Successfully set the request parameters for VerifySolution
2017-02-13 15:53:20,740 INFO  Invoking the service to verify the user solution
2017-02-13 15:53:20,741 INFO  Time before invoking service:Mon Feb 13 15:53:20 IST 2017
2017-02-13 15:53:20,742 INFO  Initialising service address for VerifySolution
2017-02-13 15:53:20,743 INFO  Time before invoking service In SUPER:Mon Feb 13 15:53:20 IST 2017
2017-02-13 15:53:22,105 INFO  Time after invoking service In SUPER:Mon Feb 13 15:53:22 IST 2017
2017-02-13 15:53:22,106 INFO  Service responded successfully with required details
2017-02-13 15:53:22,107 INFO  Time after invoking service:Mon Feb 13 15:53:22 IST 2017
2017-02-13 15:53:22,108 INFO  User solution successfully verified
2017-02-13 15:53:22,109 INFO  Processing the response from verify service
2017-02-13 15:53:22,111 INFO  Starting to parse JSON response
2017-02-13 15:53:22,112 ERROR Keys used to parse test result JSON might be incorrect
2017-02-13 15:53:22,113 ERROR Keys used to parse test result JSON might be incorrect
2017-02-13 15:53:22,114 INFO  Successfully parsed JSON response
2017-02-13 15:53:22,116 INFO  In the process of generating verify response in HTML
2017-02-13 15:53:22,215 INFO  Successfully generated verify response in HTML
2017-02-13 15:53:22,216 INFO  Successfully processed the response from service
2017-02-13 15:56:25,004 INFO  Initiating to process and prepare Input for the submit service
2017-02-13 15:56:25,009 INFO  Displaying user solution
2017-02-13 15:56:25,021 INFO  Successfully processed and prepared the input for the submit service
2017-02-13 15:56:25,024 INFO  Invoking the service to submit the user solution
2017-02-13 15:56:25,024 INFO  Initialising service address for Submit
2017-02-13 15:56:25,026 INFO  Time before invoking service In SUPER:Mon Feb 13 15:56:25 IST 2017
2017-02-13 15:56:25,253 INFO  Time after invoking service In SUPER:Mon Feb 13 15:56:25 IST 2017
2017-02-13 15:56:25,254 INFO  Service responded successfully with required details
2017-02-13 15:56:25,255 INFO  User solution successfully submitted
2017-02-13 15:56:25,256 INFO  Displaying submission status
2017-02-13 15:56:25,257 INFO  Displayed submission status successfullySuccessfully Submitted!
2017-02-13 20:17:45,016 INFO  Setting request parameters for VerifySolution
2017-02-13 20:17:45,025 INFO  Initiating to process and prepare Input for the verify service
2017-02-13 20:17:45,026 INFO  Starting to parse the user solution
2017-02-13 20:17:45,027 INFO  Displaying user solution
2017-02-13 20:17:48,773 INFO  Successfully parsed the user solution{"CourseShortName":"OOP","UserSolution":"#OOP-Assgn-29\r\n#Start writing your code here\r\nfrom abc import ABCMeta,abstractmethod\r\n\r\n\r\nclass Customer(metaclass = ABCMeta) :\r\n    \r\n    def __init__(self,customer_name):\r\n        self.__customer_name = customer_name\r\n        self.bill_amount = None\r\n        self.bill_id = None\r\n        \r\n    @abstractmethod    \r\n    def calculate_bill_amount(self):\r\n        pass\r\n    \r\n    def get_customer_name(self):\r\n        return self.__customer_name\r\n    \r\nclass OccasionalCustomer(Customer) :\r\n    __counter = 1000\r\n    \r\n    def __init__(self,customer_name,distance_in_kms):\r\n        super().__init__(customer_name)\r\n        self.__distance_in_kms = distance_in_kms\r\n        OccasionalCustomer.__counter += 1\r\n        self.bill_id = \"O\" + str(OccasionalCustomer.__counter)\r\n        \r\n    def validate_distance_in_kms(self):\r\n        if self.get_distance_in_kms() >= 1 and self.get_distance_in_kms() <= 5 :\r\n            return True\r\n        return False   \r\n    \r\n    def calculate_bill_amount(self):\r\n        if self.validate_distance_in_kms():\r\n            pass\r\n            distance = self.get_distance_in_kms()\r\n            bill_amount = 0\r\n            delivery_charge = 0\r\n            cost_tiffin  = 50\r\n            if distance >= 1 and distance <= 2 :\r\n                delivery_charge = 5 * distance\r\n            elif distance >= 2 and distance <=5 :\r\n                delivery_charge = 7.5 * distance\r\n            \r\n            \r\n            bill_amount = cost_tiffin + delivery_charge\r\n            self.bill_amount = bill_amount\r\n            return self.bill_amount\r\n        else :\r\n            self.bill_amount = -1\r\n            return self.bill_amount\r\n    \r\n    def get_distance_in_kms(self):\r\n        return self.__distance_in_kms\r\n    \r\n    \r\nclass RegularCustomer(Customer) :\r\n    __counter = 100\r\n    \r\n    def __init__(self,customer_name,no_of_tiffin):\r\n        super().__init__(customer_name)\r\n        self.__no_of_tiffin = no_of_tiffin\r\n        RegularCustomer.__counter += 1\r\n        self.bill_id = \"R\" + str(RegularCustomer.__counter)\r\n    \r\n    def validate_no_of_tiffin(self):\r\n        if self.get_no_of_tiffin() >= 1 and self.get_no_of_tiffin() <= 7 :\r\n            return True\r\n        return False   \r\n    \r\n    def calculate_bill_amount(self):\r\n        if self.validate_no_of_tiffin() :\r\n            tiffins = self.__no_of_tiffin\r\n            bill_amount = 0\r\n            delivery_charge = 0\r\n            cost_tiffin  = 50\r\n            \r\n            delivery_charge = cost_tiffin * tiffins \r\n            \r\n            bill_amount = 7 * delivery_charge\r\n            self.bill_amount = bill_amount\r\n            return self.bill_amount\r\n        \r\n        else:\r\n            self.bill_amount = -1\r\n            return self.bill_amount\r\n    \r\n    def get_no_of_tiffin(self):\r\n        return self.__no_of_tiffin\r\n    \r\n\r\n\r\n\r\noc  = OccasionalCustomer(\"Kautilya\" , 4)\r\nrc = RegularCustomer(\"NAresh\", 5)\r\n\r\n\r\noc.calculate_bill_amount()\r\nrc.calculate_bill_amount()\r\n\r\n\r\n","asgnmtId":"29","SolutionFileName":"Assignment29.py","AsgnmtTyp":"A","TestcaseFileName":""}
2017-02-13 20:17:48,776 INFO  Successfully processed and prepared the input for the verify service
2017-02-13 20:17:48,777 INFO  Successfully set the request parameters for VerifySolution
2017-02-13 20:17:48,778 INFO  Invoking the service to verify the user solution
2017-02-13 20:17:48,780 INFO  Time before invoking service:Mon Feb 13 20:17:48 IST 2017
2017-02-13 20:17:48,781 INFO  Initialising service address for VerifySolution
2017-02-13 20:17:48,782 INFO  Time before invoking service In SUPER:Mon Feb 13 20:17:48 IST 2017
2017-02-13 20:17:53,419 INFO  Time after invoking service In SUPER:Mon Feb 13 20:17:53 IST 2017
2017-02-13 20:17:53,421 INFO  Service responded successfully with required details
2017-02-13 20:17:53,422 INFO  Time after invoking service:Mon Feb 13 20:17:53 IST 2017
2017-02-13 20:17:53,422 INFO  User solution successfully verified
2017-02-13 20:17:53,423 INFO  Processing the response from verify service
2017-02-13 20:17:53,429 INFO  Starting to parse JSON response
2017-02-13 20:17:53,430 ERROR Keys used to parse test result JSON might be incorrect
2017-02-13 20:17:53,431 ERROR Keys used to parse test result JSON might be incorrect
2017-02-13 20:17:53,434 ERROR Keys used to parse test result JSON might be incorrect
2017-02-13 20:17:53,434 ERROR Keys used to parse test result JSON might be incorrect
2017-02-13 20:17:53,435 ERROR Keys used to parse test result JSON might be incorrect
2017-02-13 20:17:53,435 ERROR Keys used to parse test result JSON might be incorrect
2017-02-13 20:17:53,436 ERROR Keys used to parse test result JSON might be incorrect
2017-02-13 20:17:53,436 ERROR Keys used to parse test result JSON might be incorrect
2017-02-13 20:17:53,437 ERROR Keys used to parse test result JSON might be incorrect
2017-02-13 20:17:53,437 ERROR Keys used to parse test result JSON might be incorrect
2017-02-13 20:17:53,438 INFO  Successfully parsed JSON response
2017-02-13 20:17:53,439 INFO  In the process of generating verify response in HTML
2017-02-13 20:17:53,533 INFO  Successfully generated verify response in HTML
2017-02-13 20:17:53,534 INFO  Successfully processed the response from service
2017-02-13 20:17:56,282 INFO  Initiating to process and prepare Input for the submit service
2017-02-13 20:17:56,284 INFO  Displaying user solution
2017-02-13 20:17:56,296 INFO  Successfully processed and prepared the input for the submit service
2017-02-13 20:17:56,296 INFO  Invoking the service to submit the user solution
2017-02-13 20:17:56,297 INFO  Initialising service address for Submit
2017-02-13 20:17:56,299 INFO  Time before invoking service In SUPER:Mon Feb 13 20:17:56 IST 2017
2017-02-13 20:17:56,345 INFO  Time after invoking service In SUPER:Mon Feb 13 20:17:56 IST 2017
2017-02-13 20:17:56,346 INFO  Service responded successfully with required details
2017-02-13 20:17:56,346 INFO  User solution successfully submitted
2017-02-13 20:17:56,347 INFO  Displaying submission status
2017-02-13 20:17:56,348 INFO  Displayed submission status successfullySuccessfully Submitted!
2017-02-13 22:51:19,626 INFO  Setting request parameters for VerifySolution
2017-02-13 22:51:19,636 INFO  Initiating to process and prepare Input for the verify service
2017-02-13 22:51:19,637 INFO  Starting to parse the user solution
2017-02-13 22:51:19,638 INFO  Displaying user solution
2017-02-13 22:51:23,591 INFO  Successfully parsed the user solution{"CourseShortName":"OOP","UserSolution":"#OOP-Assgn-30\r\n#Start writing your code here\r\n\r\nclass Customer :\r\n    \r\n    def __init__(self,customer_name , quantity):\r\n        self.__customer_name = customer_name\r\n        self.__quantity = quantity\r\n        \r\n    def validate_quantity(self):\r\n        if self.get_quantity() >= 1 and self.get_quantity() <= 5 :\r\n            return True\r\n        else :\r\n            return False\r\n    \r\n    def get_customer_name(self):\r\n        return self.__customer_name\r\n    \r\n    def get_quantity(self):\r\n        return  self.__quantity\r\n            \r\n\r\n\r\nclass Pizzaservice :\r\n    __counter = 100\r\n    \r\n    def __init__(self,customer,pizza_type,additional_topping):\r\n        self.__customer = customer\r\n        self.__service_id = None\r\n        self.__pizza_type = pizza_type\r\n        self.__additional_topping = additional_topping\r\n        \r\n        self.pizza_cost = 0\r\n\r\n    def get_customer(self):\r\n        return self.__customer\r\n\r\n\r\n    def get_service_id(self):\r\n        return self.__service_id\r\n\r\n\r\n    def get_pizza_type(self):\r\n        return self.__pizza_type\r\n\r\n\r\n    def get_additional_topping(self):\r\n        return self.__additional_topping\r\n\r\n        \r\n    def validate_pizza_type(self):\r\n        if self.get_pizza_type() == \"small\" or self.get_pizza_type() == \"medium\" :\r\n            return True\r\n        else :\r\n            return False\r\n\r\n    def calculate_pizza_cost(self):\r\n        pizza_price = 0\r\n        #total_pizza = None\r\n        pizza_topping = 0\r\n        quantity  = self.get_customer().get_quantity()\r\n        Pizzaservice.__counter += 1\r\n        \r\n        if self.validate_pizza_type() and self.get_customer().validate_quantity() :\r\n            if self.get_pizza_type() == \"small\" :\r\n                pizza_price = 150\r\n                pizza_topping = 35\r\n                self.get_service_id = \"S\" + str(Pizzaservice.__counter)\r\n                if self.get_additional_topping() :\r\n                    self.pizza_cost = (pizza_price + pizza_topping) * quantity \r\n                else :\r\n                    self.pizza_cost = pizza_price * quantity\r\n            \r\n            elif self.get_pizza_type() == \"medium\" :\r\n                pizza_price = 200\r\n                pizza_topping = 50\r\n                self.get_service_id = \"M\" + str(Pizzaservice.__counter)\r\n                if self.get_additional_topping() :\r\n                    self.pizza_cost = (pizza_price + pizza_topping) * quantity \r\n                else :\r\n                    self.pizza_cost = pizza_price * quantity\r\n            \r\n            \r\n            return (self.pizza_cost)\r\n        \r\n        else :\r\n            self.pizza_cost= -1\r\n            return (self.pizza_cost)\r\n        \r\n        \r\n    \r\n    \r\nclass Doordelivery(Pizzaservice) :\r\n    \r\n    def __init__(self,customer,pizza_type,additional_topping,distance_in_kms):\r\n        super().__init__(customer, pizza_type, additional_topping)\r\n        self.__delivery_charge = None\r\n        self.__distance_in_kms = distance_in_kms\r\n\r\n    def get_delivery_charge(self):\r\n        return self.__delivery_charge\r\n\r\n\r\n    def get_distance_in_kms(self):\r\n        return self.__distance_in_kms\r\n\r\n    \r\n    def validate_distance_in_kms(self):\r\n        if self.get_distance_in_kms() >= 1 and self.get_distance_in_kms() <= 10 :\r\n            return True\r\n        else :\r\n            return False\r\n\r\n    def calculate_pizza_cost(self):\r\n        pizza_total = 0\r\n        if self.validate_distance_in_kms() :\r\n            super().calculate_pizza_cost()\r\n            pizza_total = 0\r\n            if self.pizza_cost != -1 :\r\n                pizza_distance = self.get_distance_in_kms()\r\n                if pizza_distance <= 5 :\r\n                    pizza_total = self.pizza_cost + (pizza_distance * 5)\r\n                if pizza_distance > 5 and pizza_distance <= 10:\r\n                    first_five_charge = pizza_distance * 5\r\n                    remaining_kms = pizza_distance - 5 \r\n                    remaining_price_charge = remaining_kms * 7\r\n                    pizza_total = self.pizza_cost + (first_five_charge + remaining_price_charge)\r\n        \r\n        else :\r\n            self.pizza_cost = -1\r\n        \r\n        \r\n        self.pizza_cost = pizza_total   \r\n   \r\n    \r\n    \r\n    \r\n    \r\ncust = Customer(\"Kautilya\" , 8)\r\npizza = Pizzaservice(cust,\"small\",True)\r\npizza.calculate_pizza_cost()\r\ndoor_d = Doordelivery(cust,\"small\",True,6)\r\ndoor_d.calculate_pizza_cost()\r\n","asgnmtId":"30","SolutionFileName":"Assignment30.py","AsgnmtTyp":"A","TestcaseFileName":""}
2017-02-13 22:51:23,593 INFO  Successfully processed and prepared the input for the verify service
2017-02-13 22:51:23,594 INFO  Successfully set the request parameters for VerifySolution
2017-02-13 22:51:23,595 INFO  Invoking the service to verify the user solution
2017-02-13 22:51:23,596 INFO  Time before invoking service:Mon Feb 13 22:51:23 IST 2017
2017-02-13 22:51:23,596 INFO  Initialising service address for VerifySolution
2017-02-13 22:51:23,597 INFO  Time before invoking service In SUPER:Mon Feb 13 22:51:23 IST 2017
2017-02-13 22:51:29,609 INFO  Time after invoking service In SUPER:Mon Feb 13 22:51:29 IST 2017
2017-02-13 22:51:29,610 INFO  Service responded successfully with required details
2017-02-13 22:51:29,610 INFO  Time after invoking service:Mon Feb 13 22:51:29 IST 2017
2017-02-13 22:51:29,611 INFO  User solution successfully verified
2017-02-13 22:51:29,612 INFO  Processing the response from verify service
2017-02-13 22:51:29,618 INFO  Starting to parse JSON response
2017-02-13 22:51:29,620 ERROR Keys used to parse test result JSON might be incorrect
2017-02-13 22:51:29,621 ERROR Keys used to parse test result JSON might be incorrect
2017-02-13 22:51:29,621 ERROR Keys used to parse test result JSON might be incorrect
2017-02-13 22:51:29,622 ERROR Keys used to parse test result JSON might be incorrect
2017-02-13 22:51:29,622 ERROR Keys used to parse test result JSON might be incorrect
2017-02-13 22:51:29,623 ERROR Keys used to parse test result JSON might be incorrect
2017-02-13 22:51:29,623 ERROR Keys used to parse test result JSON might be incorrect
2017-02-13 22:51:29,624 ERROR Keys used to parse test result JSON might be incorrect
2017-02-13 22:51:29,624 ERROR Keys used to parse test result JSON might be incorrect
2017-02-13 22:51:29,626 ERROR Keys used to parse test result JSON might be incorrect
2017-02-13 22:51:29,626 INFO  Successfully parsed JSON response
2017-02-13 22:51:29,628 INFO  In the process of generating verify response in HTML
2017-02-13 22:51:29,708 INFO  Successfully generated verify response in HTML
2017-02-13 22:51:29,709 INFO  Successfully processed the response from service
2017-02-13 22:52:14,527 INFO  Setting request parameters for VerifySolution
2017-02-13 22:52:14,528 INFO  Initiating to process and prepare Input for the verify service
2017-02-13 22:52:14,529 INFO  Starting to parse the user solution
2017-02-13 22:52:14,532 INFO  Displaying user solution
2017-02-13 22:52:17,324 INFO  Successfully parsed the user solution{"CourseShortName":"OOP","UserSolution":"#OOP-Assgn-30\r\n#Start writing your code here\r\n\r\nclass Customer :\r\n    \r\n    def __init__(self,customer_name , quantity):\r\n        self.__customer_name = customer_name\r\n        self.__quantity = quantity\r\n        \r\n    def validate_quantity(self):\r\n        if self.get_quantity() >= 1 and self.get_quantity() <= 5 :\r\n            return True\r\n        else :\r\n            return False\r\n    \r\n    def get_customer_name(self):\r\n        return self.__customer_name\r\n    \r\n    def get_quantity(self):\r\n        return  self.__quantity\r\n            \r\n\r\n\r\nclass Pizzaservice :\r\n    __counter = 100\r\n    \r\n    def __init__(self,customer,pizza_type,additional_topping):\r\n        self.__customer = customer\r\n        self.__service_id = None\r\n        self.__pizza_type = pizza_type\r\n        self.__additional_topping = additional_topping\r\n        \r\n        self.pizza_cost = 0\r\n\r\n    def get_customer(self):\r\n        return self.__customer\r\n\r\n\r\n    def get_service_id(self):\r\n        return self.__service_id\r\n\r\n\r\n    def get_pizza_type(self):\r\n        return self.__pizza_type\r\n\r\n\r\n    def get_additional_topping(self):\r\n        return self.__additional_topping\r\n\r\n        \r\n    def validate_pizza_type(self):\r\n        if self.get_pizza_type() == \"small\" or self.get_pizza_type() == \"medium\" :\r\n            return True\r\n        else :\r\n            return False\r\n\r\n    def calculate_pizza_cost(self):\r\n        pizza_price = 0\r\n        #total_pizza = None\r\n        pizza_topping = 0\r\n        quantity  = self.get_customer().get_quantity()\r\n        Pizzaservice.__counter += 1\r\n        \r\n        if self.validate_pizza_type() and self.get_customer().validate_quantity() :\r\n            if self.get_pizza_type().lower() == \"small\" :\r\n                pizza_price = 150\r\n                pizza_topping = 35\r\n                self.get_service_id = \"S\" + str(Pizzaservice.__counter)\r\n                if self.get_additional_topping() :\r\n                    self.pizza_cost = (pizza_price + pizza_topping) * quantity \r\n                else :\r\n                    self.pizza_cost = pizza_price * quantity\r\n            \r\n            elif self.get_pizza_type().lower() == \"medium\" :\r\n                pizza_price = 200\r\n                pizza_topping = 50\r\n                self.get_service_id = \"M\" + str(Pizzaservice.__counter)\r\n                if self.get_additional_topping() :\r\n                    self.pizza_cost = (pizza_price + pizza_topping) * quantity \r\n                else :\r\n                    self.pizza_cost = pizza_price * quantity\r\n            \r\n            \r\n            return (self.pizza_cost)\r\n        \r\n        else :\r\n            self.pizza_cost= -1\r\n            return (self.pizza_cost)\r\n        \r\n        \r\n    \r\n    \r\nclass Doordelivery(Pizzaservice) :\r\n    \r\n    def __init__(self,customer,pizza_type,additional_topping,distance_in_kms):\r\n        super().__init__(customer, pizza_type, additional_topping)\r\n        self.__delivery_charge = None\r\n        self.__distance_in_kms = distance_in_kms\r\n\r\n    def get_delivery_charge(self):\r\n        return self.__delivery_charge\r\n\r\n\r\n    def get_distance_in_kms(self):\r\n        return self.__distance_in_kms\r\n\r\n    \r\n    def validate_distance_in_kms(self):\r\n        if self.get_distance_in_kms() >= 1 and self.get_distance_in_kms() <= 10 :\r\n            return True\r\n        else :\r\n            return False\r\n\r\n    def calculate_pizza_cost(self):\r\n        pizza_total = 0\r\n        if self.validate_distance_in_kms() :\r\n            super().calculate_pizza_cost()\r\n            pizza_total = 0\r\n            if self.pizza_cost != -1 :\r\n                pizza_distance = self.get_distance_in_kms()\r\n                if pizza_distance <= 5 :\r\n                    pizza_total = self.pizza_cost + (pizza_distance * 5)\r\n                if pizza_distance > 5 and pizza_distance <= 10:\r\n                    first_five_charge = pizza_distance * 5\r\n                    remaining_kms = pizza_distance - 5 \r\n                    remaining_price_charge = remaining_kms * 7\r\n                    pizza_total = self.pizza_cost + (first_five_charge + remaining_price_charge)\r\n        \r\n        else :\r\n            self.pizza_cost = -1\r\n        \r\n        \r\n        self.pizza_cost = pizza_total   \r\n   \r\n    \r\n    \r\n    \r\n    \r\ncust = Customer(\"Kautilya\" , 8)\r\npizza = Pizzaservice(cust,\"small\",True)\r\npizza.calculate_pizza_cost()\r\ndoor_d = Doordelivery(cust,\"small\",True,6)\r\ndoor_d.calculate_pizza_cost()\r\n","asgnmtId":"30","SolutionFileName":"Assignment30.py","AsgnmtTyp":"A","TestcaseFileName":""}
2017-02-13 22:52:17,325 INFO  Successfully processed and prepared the input for the verify service
2017-02-13 22:52:17,326 INFO  Successfully set the request parameters for VerifySolution
2017-02-13 22:52:17,326 INFO  Invoking the service to verify the user solution
2017-02-13 22:52:17,327 INFO  Time before invoking service:Mon Feb 13 22:52:17 IST 2017
2017-02-13 22:52:17,328 INFO  Initialising service address for VerifySolution
2017-02-13 22:52:17,329 INFO  Time before invoking service In SUPER:Mon Feb 13 22:52:17 IST 2017
2017-02-13 22:52:23,806 INFO  Time after invoking service In SUPER:Mon Feb 13 22:52:23 IST 2017
2017-02-13 22:52:23,807 INFO  Service responded successfully with required details
2017-02-13 22:52:23,808 INFO  Time after invoking service:Mon Feb 13 22:52:23 IST 2017
2017-02-13 22:52:23,809 INFO  User solution successfully verified
2017-02-13 22:52:23,809 INFO  Processing the response from verify service
2017-02-13 22:52:23,812 INFO  Starting to parse JSON response
2017-02-13 22:52:23,814 ERROR Keys used to parse test result JSON might be incorrect
2017-02-13 22:52:23,814 ERROR Keys used to parse test result JSON might be incorrect
2017-02-13 22:52:23,815 ERROR Keys used to parse test result JSON might be incorrect
2017-02-13 22:52:23,815 ERROR Keys used to parse test result JSON might be incorrect
2017-02-13 22:52:23,816 ERROR Keys used to parse test result JSON might be incorrect
2017-02-13 22:52:23,816 ERROR Keys used to parse test result JSON might be incorrect
2017-02-13 22:52:23,817 ERROR Keys used to parse test result JSON might be incorrect
2017-02-13 22:52:23,817 ERROR Keys used to parse test result JSON might be incorrect
2017-02-13 22:52:23,818 ERROR Keys used to parse test result JSON might be incorrect
2017-02-13 22:52:23,818 ERROR Keys used to parse test result JSON might be incorrect
2017-02-13 22:52:23,819 INFO  Successfully parsed JSON response
2017-02-13 22:52:23,820 INFO  In the process of generating verify response in HTML
2017-02-13 22:52:23,889 INFO  Successfully generated verify response in HTML
2017-02-13 22:52:23,890 INFO  Successfully processed the response from service
2017-02-13 22:54:32,514 INFO  Setting request parameters for VerifySolution
2017-02-13 22:54:32,520 INFO  Initiating to process and prepare Input for the verify service
2017-02-13 22:54:32,521 INFO  Starting to parse the user solution
2017-02-13 22:54:32,522 INFO  Displaying user solution
2017-02-13 22:54:35,464 INFO  Successfully parsed the user solution{"CourseShortName":"OOP","UserSolution":"#OOP-Assgn-30\r\n#Start writing your code here\r\n\r\nclass Customer :\r\n    \r\n    def __init__(self,customer_name , quantity):\r\n        self.__customer_name = customer_name\r\n        self.__quantity = quantity\r\n        \r\n    def validate_quantity(self):\r\n        if self.get_quantity() >= 1 and self.get_quantity() <= 5 :\r\n            return True\r\n        else :\r\n            return False\r\n    \r\n    def get_customer_name(self):\r\n        return self.__customer_name\r\n    \r\n    def get_quantity(self):\r\n        return  self.__quantity\r\n            \r\n\r\n\r\nclass Pizzaservice :\r\n    counter = 100\r\n    \r\n    def __init__(self,customer,pizza_type,additional_topping):\r\n        self.__customer = customer\r\n        self.__service_id = None\r\n        self.__pizza_type = pizza_type\r\n        self.__additional_topping = additional_topping\r\n        \r\n        self.pizza_cost = 0\r\n\r\n    def get_customer(self):\r\n        return self.__customer\r\n\r\n\r\n    def get_service_id(self):\r\n        return self.__service_id\r\n\r\n\r\n    def get_pizza_type(self):\r\n        return self.__pizza_type\r\n\r\n\r\n    def get_additional_topping(self):\r\n        return self.__additional_topping\r\n\r\n        \r\n    def validate_pizza_type(self):\r\n        if self.get_pizza_type() == \"small\" or self.get_pizza_type() == \"medium\" :\r\n            return True\r\n        else :\r\n            return False\r\n\r\n    def calculate_pizza_cost(self):\r\n        pizza_price = 0\r\n        #total_pizza = None\r\n        pizza_topping = 0\r\n        quantity  = self.get_customer().get_quantity()\r\n        Pizzaservice.counter += 1\r\n        \r\n        if self.validate_pizza_type() and self.get_customer().validate_quantity() :\r\n            if self.get_pizza_type().lower() == \"small\" :\r\n                pizza_price = 150\r\n                pizza_topping = 35\r\n                self.get_service_id = \"S\" + str(Pizzaservice.__counter)\r\n                if self.get_additional_topping() :\r\n                    self.pizza_cost = (pizza_price + pizza_topping) * quantity \r\n                else :\r\n                    self.pizza_cost = pizza_price * quantity\r\n            \r\n            elif self.get_pizza_type().lower() == \"medium\" :\r\n                pizza_price = 200\r\n                pizza_topping = 50\r\n                self.get_service_id = \"M\" + str(Pizzaservice.__counter)\r\n                if self.get_additional_topping() :\r\n                    self.pizza_cost = (pizza_price + pizza_topping) * quantity \r\n                else :\r\n                    self.pizza_cost = pizza_price * quantity\r\n            \r\n            \r\n            return (self.pizza_cost)\r\n        \r\n        else :\r\n            self.pizza_cost= -1\r\n            return (self.pizza_cost)\r\n        \r\n        \r\n    \r\n    \r\nclass Doordelivery(Pizzaservice) :\r\n    \r\n    def __init__(self,customer,pizza_type,additional_topping,distance_in_kms):\r\n        super().__init__(customer, pizza_type, additional_topping)\r\n        self.__delivery_charge = None\r\n        self.__distance_in_kms = distance_in_kms\r\n\r\n    def get_delivery_charge(self):\r\n        return self.__delivery_charge\r\n\r\n\r\n    def get_distance_in_kms(self):\r\n        return self.__distance_in_kms\r\n\r\n    \r\n    def validate_distance_in_kms(self):\r\n        if self.get_distance_in_kms() >= 1 and self.get_distance_in_kms() <= 10 :\r\n            return True\r\n        else :\r\n            return False\r\n\r\n    def calculate_pizza_cost(self):\r\n        pizza_total = 0\r\n        if self.validate_distance_in_kms() :\r\n            super().calculate_pizza_cost()\r\n            pizza_total = 0\r\n            if self.pizza_cost != -1 :\r\n                pizza_distance = self.get_distance_in_kms()\r\n                if pizza_distance <= 5 :\r\n                    pizza_total = self.pizza_cost + (pizza_distance * 5)\r\n                if pizza_distance > 5 and pizza_distance <= 10:\r\n                    first_five_charge = pizza_distance * 5\r\n                    remaining_kms = pizza_distance - 5 \r\n                    remaining_price_charge = remaining_kms * 7\r\n                    pizza_total = self.pizza_cost + (first_five_charge + remaining_price_charge)\r\n            \r\n            self.pizza_cost = pizza_total\r\n            return self.pizza_cost\r\n        else :\r\n            self.pizza_cost = -1\r\n            return self.pizza_cost\r\n        \r\n        \r\n           \r\n   \r\n    \r\n    \r\n    \r\n    \r\ncust = Customer(\"Kautilya\" , 8)\r\npizza = Pizzaservice(cust,\"small\",True)\r\npizza.calculate_pizza_cost()\r\ndoor_d = Doordelivery(cust,\"small\",True,6)\r\ndoor_d.calculate_pizza_cost()\r\n","asgnmtId":"30","SolutionFileName":"Assignment30.py","AsgnmtTyp":"A","TestcaseFileName":""}
2017-02-13 22:54:35,468 INFO  Successfully processed and prepared the input for the verify service
2017-02-13 22:54:35,469 INFO  Successfully set the request parameters for VerifySolution
2017-02-13 22:54:35,469 INFO  Invoking the service to verify the user solution
2017-02-13 22:54:35,470 INFO  Time before invoking service:Mon Feb 13 22:54:35 IST 2017
2017-02-13 22:54:35,471 INFO  Initialising service address for VerifySolution
2017-02-13 22:54:35,472 INFO  Time before invoking service In SUPER:Mon Feb 13 22:54:35 IST 2017
2017-02-13 22:54:41,754 INFO  Time after invoking service In SUPER:Mon Feb 13 22:54:41 IST 2017
2017-02-13 22:54:41,757 INFO  Service responded successfully with required details
2017-02-13 22:54:41,758 INFO  Time after invoking service:Mon Feb 13 22:54:41 IST 2017
2017-02-13 22:54:41,758 INFO  User solution successfully verified
2017-02-13 22:54:41,759 INFO  Processing the response from verify service
2017-02-13 22:54:41,763 INFO  Starting to parse JSON response
2017-02-13 22:54:41,766 ERROR Keys used to parse test result JSON might be incorrect
2017-02-13 22:54:41,767 ERROR Keys used to parse test result JSON might be incorrect
2017-02-13 22:54:41,768 ERROR Keys used to parse test result JSON might be incorrect
2017-02-13 22:54:41,769 ERROR Keys used to parse test result JSON might be incorrect
2017-02-13 22:54:41,769 ERROR Keys used to parse test result JSON might be incorrect
2017-02-13 22:54:41,770 ERROR Keys used to parse test result JSON might be incorrect
2017-02-13 22:54:41,770 ERROR Keys used to parse test result JSON might be incorrect
2017-02-13 22:54:41,771 ERROR Keys used to parse test result JSON might be incorrect
2017-02-13 22:54:41,771 ERROR Keys used to parse test result JSON might be incorrect
2017-02-13 22:54:41,772 ERROR Keys used to parse test result JSON might be incorrect
2017-02-13 22:54:41,772 INFO  Successfully parsed JSON response
2017-02-13 22:54:41,773 INFO  In the process of generating verify response in HTML
2017-02-13 22:54:41,847 INFO  Successfully generated verify response in HTML
2017-02-13 22:54:41,848 INFO  Successfully processed the response from service
2017-02-13 22:55:11,094 INFO  Setting request parameters for VerifySolution
2017-02-13 22:55:11,094 INFO  Initiating to process and prepare Input for the verify service
2017-02-13 22:55:11,094 INFO  Starting to parse the user solution
2017-02-13 22:55:11,095 INFO  Displaying user solution
2017-02-13 22:55:13,851 INFO  Successfully parsed the user solution{"CourseShortName":"OOP","UserSolution":"#OOP-Assgn-30\r\n\r\nclass Customer:\r\n    def __init__(self,customer_name,quantity):\r\n        self.__customer_name=customer_name\r\n        self.__quantity=quantity\r\n\r\n    def get_customer_name(self):\r\n        return self.__customer_name\r\n\r\n\r\n    def get_quantity(self):\r\n        return self.__quantity\r\n    \r\n    def validate_quantity(self):\r\n        if self.get_quantity()>=1 and self.get_quantity()<=5:\r\n            return True\r\n        else:\r\n            return False\r\n    \r\n    \r\n    \r\nclass Pizzaservice:\r\n    counter=100\r\n    def __init__(self,customer,pizza_type,additional_topping):\r\n        self.__customer=customer\r\n        self.__pizza_type=pizza_type\r\n        self.__additional_topping=additional_topping\r\n        self.__service_id=None\r\n        self.pizza_cost=None\r\n\r\n    def get_pizza_type(self):\r\n        return self.__pizza_type\r\n\r\n\r\n    def get_additional_topping(self):\r\n        return self.__additional_topping\r\n            \r\n        \r\n\r\n\r\n    def get_service_id(self):\r\n        return self.__service_id\r\n    \r\n    def get_customer(self):\r\n        return self.__customer\r\n    def validate_pizza_type(self):\r\n        if self.get_pizza_type().lower()==\"small\" or self.get_pizza_type().lower()==\"medium\":\r\n            return True\r\n        else:\r\n            return False\r\n        \r\n       \r\n    def calculate_pizza_cost(self):\r\n     \r\n        pizza_cost=0\r\n        x= self.__customer.get_quantity()\r\n        if self.validate_pizza_type()==True and self.__customer.validate_quantity()==True:\r\n            if self.get_pizza_type().lower()==\"small\":\r\n                if self.get_additional_topping()==True:\r\n                    pizza_cost=(150+35)*x\r\n                    \r\n                else:\r\n                    pizza_cost=150*x\r\n            elif self.get_pizza_type().lower()==\"medium\": \r\n                if self.get_additional_topping()==True:\r\n                    pizza_cost=(200+50)*x\r\n                else:\r\n                    pizza_cost=200*x\r\n            Pizzaservice.counter+=1\r\n           \r\n            self.__service_id=self.get_pizza_type()[0]+str(Pizzaservice.counter) \r\n            self.pizza_cost=pizza_cost \r\n            return (self.pizza_cost)\r\n        else:\r\n            pizza_cost=-1\r\n            self.pizza_cost=pizza_cost\r\n            return (self.pizza_cost)\r\n    \r\n    \r\nclass Doordelivery(Pizzaservice):\r\n    def __init__(self,customer,pizza_type,additional_topping,distance_in_kms):\r\n        super().__init__(customer, pizza_type, additional_topping)\r\n        self.__distance_in_kms=distance_in_kms\r\n        self.__delivery_charge=None\r\n\r\n    def get_distance_in_kms(self):\r\n        return self.__distance_in_kms\r\n\r\n\r\n    def get_delivery_charge(self):\r\n        return self.__delivery_charge\r\n\r\n    \r\n        \r\n    def validate_distance_in_kms(self):\r\n        if self.get_distance_in_kms()>=1 and self.get_distance_in_kms()<=10:\r\n            return True\r\n        else:\r\n            return False\r\n           \r\n    \r\n    def calculate_pizza_cost(self):\r\n        if self.validate_distance_in_kms()==True:\r\n            super().calculate_pizza_cost()\r\n            if self.pizza_cost!=-1:\r\n                if self.get_distance_in_kms()<=5:\r\n                    self.pizza_cost=self.pizza_cost+5*self.get_distance_in_kms()\r\n                    \r\n                else:\r\n                    self.pizza_cost=self.pizza_cost+25+(self.get_distance_in_kms()-5)*7\r\n                    \r\n            else:\r\n                self.pizza_cost=-1\r\n                return self.pizza_cost\r\n         \r\n        else:\r\n            self.pizza_cost=-1\r\n            return self.pizza_cost       \r\n     \r\n   \r\n\r\n\r\ncust=Customer(\"Asha\",5)\r\ncust.validate_quantity()\r\np1=Pizzaservice(cust,\"SMALL\",True)\r\np1.calculate_pizza_cost()\r\nd1=Doordelivery(cust,\"SMALL\",True,6)\r\nd1.calculate_pizza_cost()\r\n    \r\n","asgnmtId":"30","SolutionFileName":"Assignment30r.py","AsgnmtTyp":"A","TestcaseFileName":""}
2017-02-13 22:55:13,852 INFO  Successfully processed and prepared the input for the verify service
2017-02-13 22:55:13,853 INFO  Successfully set the request parameters for VerifySolution
2017-02-13 22:55:13,854 INFO  Invoking the service to verify the user solution
2017-02-13 22:55:13,854 INFO  Time before invoking service:Mon Feb 13 22:55:13 IST 2017
2017-02-13 22:55:13,855 INFO  Initialising service address for VerifySolution
2017-02-13 22:55:13,856 INFO  Time before invoking service In SUPER:Mon Feb 13 22:55:13 IST 2017
2017-02-13 22:55:19,020 INFO  Time after invoking service In SUPER:Mon Feb 13 22:55:19 IST 2017
2017-02-13 22:55:19,021 INFO  Service responded successfully with required details
2017-02-13 22:55:19,021 INFO  Time after invoking service:Mon Feb 13 22:55:19 IST 2017
2017-02-13 22:55:19,022 INFO  User solution successfully verified
2017-02-13 22:55:19,023 INFO  Processing the response from verify service
2017-02-13 22:55:19,026 INFO  Starting to parse JSON response
2017-02-13 22:55:19,028 ERROR Keys used to parse test result JSON might be incorrect
2017-02-13 22:55:19,029 ERROR Keys used to parse test result JSON might be incorrect
2017-02-13 22:55:19,029 ERROR Keys used to parse test result JSON might be incorrect
2017-02-13 22:55:19,029 ERROR Keys used to parse test result JSON might be incorrect
2017-02-13 22:55:19,030 ERROR Keys used to parse test result JSON might be incorrect
2017-02-13 22:55:19,030 ERROR Keys used to parse test result JSON might be incorrect
2017-02-13 22:55:19,031 ERROR Keys used to parse test result JSON might be incorrect
2017-02-13 22:55:19,031 ERROR Keys used to parse test result JSON might be incorrect
2017-02-13 22:55:19,032 ERROR Keys used to parse test result JSON might be incorrect
2017-02-13 22:55:19,032 ERROR Keys used to parse test result JSON might be incorrect
2017-02-13 22:55:19,033 INFO  Successfully parsed JSON response
2017-02-13 22:55:19,035 INFO  In the process of generating verify response in HTML
2017-02-13 22:55:19,107 INFO  Successfully generated verify response in HTML
2017-02-13 22:55:19,107 INFO  Successfully processed the response from service
2017-02-13 22:58:05,160 INFO  Setting request parameters for VerifySolution
2017-02-13 22:58:05,162 INFO  Initiating to process and prepare Input for the verify service
2017-02-13 22:58:05,162 INFO  Starting to parse the user solution
2017-02-13 22:58:05,167 INFO  Displaying user solution
2017-02-13 22:58:07,935 INFO  Successfully parsed the user solution{"CourseShortName":"OOP","UserSolution":"#OOP-Assgn-30\r\n#Start writing your code here\r\n\r\nclass Customer :\r\n    \r\n    def __init__(self,customer_name , quantity):\r\n        self.__customer_name = customer_name\r\n        self.__quantity = quantity\r\n        \r\n    def validate_quantity(self):\r\n        if self.get_quantity() >= 1 and self.get_quantity() <= 5 :\r\n            return True\r\n        else :\r\n            return False\r\n    \r\n    def get_customer_name(self):\r\n        return self.__customer_name\r\n    \r\n    def get_quantity(self):\r\n        return  self.__quantity\r\n            \r\n\r\n\r\nclass Pizzaservice :\r\n    counter = 100\r\n    \r\n    def __init__(self,customer,pizza_type,additional_topping):\r\n        self.__customer = customer\r\n        self.__service_id = None\r\n        self.__pizza_type = pizza_type\r\n        self.__additional_topping = additional_topping\r\n        \r\n        self.pizza_cost = 0\r\n\r\n    def get_customer(self):\r\n        return self.__customer\r\n\r\n\r\n    def get_service_id(self):\r\n        return self.__service_id\r\n\r\n\r\n    def get_pizza_type(self):\r\n        return self.__pizza_type\r\n\r\n\r\n    def get_additional_topping(self):\r\n        return self.__additional_topping\r\n\r\n        \r\n    def validate_pizza_type(self):\r\n        if self.get_pizza_type() == \"small\" or self.get_pizza_type() == \"medium\" :\r\n            return True\r\n        else :\r\n            return False\r\n\r\n    def calculate_pizza_cost(self):\r\n        pizza_price = 0\r\n        #total_pizza = None\r\n        pizza_topping = 0\r\n        quantity  = self.get_customer().get_quantity()\r\n        Pizzaservice.counter += 1\r\n        \r\n        if self.validate_pizza_type() and self.get_customer().validate_quantity() :\r\n            if self.get_pizza_type().lower() == \"small\" :\r\n                pizza_price = 150\r\n                pizza_topping = 35\r\n                self.get_service_id = \"S\" + str(Pizzaservice.__counter)\r\n                if self.get_additional_topping() :\r\n                    self.pizza_cost = (pizza_price + pizza_topping) * quantity \r\n                else :\r\n                    self.pizza_cost = pizza_price * quantity\r\n            \r\n            elif self.get_pizza_type().lower() == \"medium\" :\r\n                pizza_price = 200\r\n                pizza_topping = 50\r\n                self.get_service_id = \"M\" + str(Pizzaservice.__counter)\r\n                if self.get_additional_topping() :\r\n                    self.pizza_cost = (pizza_price + pizza_topping) * quantity \r\n                else :\r\n                    self.pizza_cost = pizza_price * quantity\r\n            \r\n            \r\n            return (self.pizza_cost)\r\n        \r\n        else :\r\n            self.pizza_cost= -1\r\n            return (self.pizza_cost)\r\n        \r\n        \r\n    \r\n    \r\nclass Doordelivery(Pizzaservice) :\r\n    \r\n    def __init__(self,customer,pizza_type,additional_topping,distance_in_kms):\r\n        super().__init__(customer, pizza_type, additional_topping)\r\n        self.__delivery_charge = None\r\n        self.__distance_in_kms = distance_in_kms\r\n\r\n    def get_delivery_charge(self):\r\n        return self.__delivery_charge\r\n\r\n\r\n    def get_distance_in_kms(self):\r\n        return self.__distance_in_kms\r\n\r\n    \r\n    def validate_distance_in_kms(self):\r\n        if self.get_distance_in_kms() >= 1 and self.get_distance_in_kms() <= 10 :\r\n            return True\r\n        else :\r\n            return False\r\n\r\n    def calculate_pizza_cost(self):\r\n        pizza_total = 0\r\n        if self.validate_distance_in_kms() :\r\n            super().calculate_pizza_cost()\r\n            pizza_total = 0\r\n            if self.pizza_cost != -1 :\r\n                pizza_distance = self.get_distance_in_kms()\r\n                if pizza_distance <= 5 :\r\n                    pizza_total = self.pizza_cost + (pizza_distance * 5)\r\n                if pizza_distance > 5 and pizza_distance <= 10:\r\n                    first_five_charge = pizza_distance * 5\r\n                    remaining_kms = pizza_distance - 5 \r\n                    remaining_price_charge = remaining_kms * 7\r\n                    pizza_total = self.pizza_cost + (first_five_charge + remaining_price_charge)\r\n                    self.pizza_cost = pizza_total\r\n            \r\n            \r\n            else :\r\n                self.pizza_cost = -1\r\n                return self.pizza_cost\r\n                  \r\n        else :\r\n            self.pizza_cost = -1\r\n            return self.pizza_cost\r\n        \r\n        \r\n           \r\n   \r\n    \r\n    \r\n    \r\n    \r\ncust = Customer(\"Kautilya\" , 8)\r\npizza = Pizzaservice(cust,\"small\",True)\r\npizza.calculate_pizza_cost()\r\ndoor_d = Doordelivery(cust,\"small\",True,6)\r\ndoor_d.calculate_pizza_cost()\r\n","asgnmtId":"30","SolutionFileName":"Assignment30.py","AsgnmtTyp":"A","TestcaseFileName":""}
2017-02-13 22:58:07,937 INFO  Successfully processed and prepared the input for the verify service
2017-02-13 22:58:07,938 INFO  Successfully set the request parameters for VerifySolution
2017-02-13 22:58:07,938 INFO  Invoking the service to verify the user solution
2017-02-13 22:58:07,940 INFO  Time before invoking service:Mon Feb 13 22:58:07 IST 2017
2017-02-13 22:58:07,940 INFO  Initialising service address for VerifySolution
2017-02-13 22:58:07,942 INFO  Time before invoking service In SUPER:Mon Feb 13 22:58:07 IST 2017
2017-02-13 22:58:13,500 INFO  Time after invoking service In SUPER:Mon Feb 13 22:58:13 IST 2017
2017-02-13 22:58:13,502 INFO  Service responded successfully with required details
2017-02-13 22:58:13,503 INFO  Time after invoking service:Mon Feb 13 22:58:13 IST 2017
2017-02-13 22:58:13,504 INFO  User solution successfully verified
2017-02-13 22:58:13,505 INFO  Processing the response from verify service
2017-02-13 22:58:13,511 INFO  Starting to parse JSON response
2017-02-13 22:58:13,513 ERROR Keys used to parse test result JSON might be incorrect
2017-02-13 22:58:13,514 ERROR Keys used to parse test result JSON might be incorrect
2017-02-13 22:58:13,515 ERROR Keys used to parse test result JSON might be incorrect
2017-02-13 22:58:13,516 ERROR Keys used to parse test result JSON might be incorrect
2017-02-13 22:58:13,516 ERROR Keys used to parse test result JSON might be incorrect
2017-02-13 22:58:13,517 ERROR Keys used to parse test result JSON might be incorrect
2017-02-13 22:58:13,517 ERROR Keys used to parse test result JSON might be incorrect
2017-02-13 22:58:13,518 ERROR Keys used to parse test result JSON might be incorrect
2017-02-13 22:58:13,518 ERROR Keys used to parse test result JSON might be incorrect
2017-02-13 22:58:13,518 ERROR Keys used to parse test result JSON might be incorrect
2017-02-13 22:58:13,518 INFO  Successfully parsed JSON response
2017-02-13 22:58:13,520 INFO  In the process of generating verify response in HTML
2017-02-13 22:58:13,620 INFO  Successfully generated verify response in HTML
2017-02-13 22:58:13,620 INFO  Successfully processed the response from service
2017-02-13 23:00:02,748 INFO  Setting request parameters for VerifySolution
2017-02-13 23:00:02,749 INFO  Initiating to process and prepare Input for the verify service
2017-02-13 23:00:02,749 INFO  Starting to parse the user solution
2017-02-13 23:00:02,751 INFO  Displaying user solution
2017-02-13 23:00:05,447 INFO  Successfully parsed the user solution{"CourseShortName":"OOP","UserSolution":"#OOP-Assgn-30\r\n#Start writing your code here\r\n\r\nclass Customer :\r\n    \r\n    def __init__(self,customer_name , quantity):\r\n        self.__customer_name = customer_name\r\n        self.__quantity = quantity\r\n        \r\n    def validate_quantity(self):\r\n        if self.get_quantity() >= 1 and self.get_quantity() <= 5 :\r\n            return True\r\n        else :\r\n            return False\r\n    \r\n    def get_customer_name(self):\r\n        return self.__customer_name\r\n    \r\n    def get_quantity(self):\r\n        return  self.__quantity\r\n            \r\n\r\n\r\nclass Pizzaservice :\r\n    counter = 100\r\n    \r\n    def __init__(self,customer,pizza_type,additional_topping):\r\n        self.__customer = customer\r\n        self.__service_id = None\r\n        self.__pizza_type = pizza_type\r\n        self.__additional_topping = additional_topping\r\n        \r\n        self.pizza_cost = 0\r\n\r\n    def get_customer(self):\r\n        return self.__customer\r\n\r\n\r\n    def get_service_id(self):\r\n        return self.__service_id\r\n\r\n\r\n    def get_pizza_type(self):\r\n        return self.__pizza_type\r\n\r\n\r\n    def get_additional_topping(self):\r\n        return self.__additional_topping\r\n\r\n        \r\n    def validate_pizza_type(self):\r\n        if self.get_pizza_type() == \"small\" or self.get_pizza_type() == \"medium\" :\r\n            return True\r\n        else :\r\n            return False\r\n\r\n    def calculate_pizza_cost(self):\r\n        pizza_price = 0\r\n        #total_pizza = None\r\n        pizza_topping = 0\r\n        quantity  = self.get_customer().get_quantity()\r\n        Pizzaservice.counter += 1\r\n        \r\n        if self.validate_pizza_type() and self.get_customer().validate_quantity() :\r\n            if self.get_pizza_type().lower() == \"small\" :\r\n                pizza_price = 150\r\n                pizza_topping = 35\r\n                self.get_service_id = self.get_pizza_type()[0] + str(Pizzaservice.__counter)\r\n                if self.get_additional_topping() :\r\n                    self.pizza_cost = (pizza_price + pizza_topping) * quantity \r\n                else :\r\n                    self.pizza_cost = pizza_price * quantity\r\n            \r\n            elif self.get_pizza_type().lower() == \"medium\" :\r\n                pizza_price = 200\r\n                pizza_topping = 50\r\n                self.get_service_id = self.get_pizza_type()[0] + str(Pizzaservice.__counter)\r\n                if self.get_additional_topping() :\r\n                    self.pizza_cost = (pizza_price + pizza_topping) * quantity \r\n                else :\r\n                    self.pizza_cost = pizza_price * quantity\r\n            \r\n            \r\n            return (self.pizza_cost)\r\n        \r\n        else :\r\n            self.pizza_cost= -1\r\n            return (self.pizza_cost)\r\n        \r\n        \r\n    \r\n    \r\nclass Doordelivery(Pizzaservice) :\r\n    \r\n    def __init__(self,customer,pizza_type,additional_topping,distance_in_kms):\r\n        super().__init__(customer, pizza_type, additional_topping)\r\n        self.__delivery_charge = None\r\n        self.__distance_in_kms = distance_in_kms\r\n\r\n    def get_delivery_charge(self):\r\n        return self.__delivery_charge\r\n\r\n\r\n    def get_distance_in_kms(self):\r\n        return self.__distance_in_kms\r\n\r\n    \r\n    def validate_distance_in_kms(self):\r\n        if self.get_distance_in_kms() >= 1 and self.get_distance_in_kms() <= 10 :\r\n            return True\r\n        else :\r\n            return False\r\n\r\n    def calculate_pizza_cost(self):\r\n        pizza_total = 0\r\n        if self.validate_distance_in_kms() :\r\n            super().calculate_pizza_cost()\r\n            pizza_total = 0\r\n            if self.pizza_cost != -1 :\r\n                pizza_distance = self.get_distance_in_kms()\r\n                if pizza_distance <= 5 :\r\n                    pizza_total = self.pizza_cost + (pizza_distance * 5)\r\n                if pizza_distance > 5 and pizza_distance <= 10:\r\n                    first_five_charge = pizza_distance * 5\r\n                    remaining_kms = pizza_distance - 5 \r\n                    remaining_price_charge = remaining_kms * 7\r\n                    pizza_total = self.pizza_cost + (first_five_charge + remaining_price_charge)\r\n                    self.pizza_cost = pizza_total\r\n            \r\n            \r\n            else :\r\n                self.pizza_cost = -1\r\n                return self.pizza_cost\r\n                  \r\n        else :\r\n            self.pizza_cost = -1\r\n            return self.pizza_cost\r\n        \r\n        \r\n           \r\n   \r\n    \r\n    \r\n    \r\n    \r\ncust = Customer(\"Kautilya\" , 8)\r\npizza = Pizzaservice(cust,\"small\",True)\r\npizza.calculate_pizza_cost()\r\ndoor_d = Doordelivery(cust,\"small\",True,6)\r\ndoor_d.calculate_pizza_cost()\r\n","asgnmtId":"30","SolutionFileName":"Assignment30.py","AsgnmtTyp":"A","TestcaseFileName":""}
2017-02-13 23:00:05,448 INFO  Successfully processed and prepared the input for the verify service
2017-02-13 23:00:05,449 INFO  Successfully set the request parameters for VerifySolution
2017-02-13 23:00:05,449 INFO  Invoking the service to verify the user solution
2017-02-13 23:00:05,450 INFO  Time before invoking service:Mon Feb 13 23:00:05 IST 2017
2017-02-13 23:00:05,451 INFO  Initialising service address for VerifySolution
2017-02-13 23:00:05,451 INFO  Time before invoking service In SUPER:Mon Feb 13 23:00:05 IST 2017
2017-02-13 23:00:11,829 INFO  Time after invoking service In SUPER:Mon Feb 13 23:00:11 IST 2017
2017-02-13 23:00:11,833 INFO  Service responded successfully with required details
2017-02-13 23:00:11,835 INFO  Time after invoking service:Mon Feb 13 23:00:11 IST 2017
2017-02-13 23:00:11,837 INFO  User solution successfully verified
2017-02-13 23:00:11,839 INFO  Processing the response from verify service
2017-02-13 23:00:11,846 INFO  Starting to parse JSON response
2017-02-13 23:00:11,848 ERROR Keys used to parse test result JSON might be incorrect
2017-02-13 23:00:11,848 ERROR Keys used to parse test result JSON might be incorrect
2017-02-13 23:00:11,849 ERROR Keys used to parse test result JSON might be incorrect
2017-02-13 23:00:11,849 ERROR Keys used to parse test result JSON might be incorrect
2017-02-13 23:00:11,850 ERROR Keys used to parse test result JSON might be incorrect
2017-02-13 23:00:11,850 ERROR Keys used to parse test result JSON might be incorrect
2017-02-13 23:00:11,859 ERROR Keys used to parse test result JSON might be incorrect
2017-02-13 23:00:11,863 ERROR Keys used to parse test result JSON might be incorrect
2017-02-13 23:00:11,869 ERROR Keys used to parse test result JSON might be incorrect
2017-02-13 23:00:11,870 ERROR Keys used to parse test result JSON might be incorrect
2017-02-13 23:00:11,871 INFO  Successfully parsed JSON response
2017-02-13 23:00:11,895 INFO  In the process of generating verify response in HTML
2017-02-13 23:00:12,087 INFO  Successfully generated verify response in HTML
2017-02-13 23:00:13,203 INFO  Successfully processed the response from service
